1.Querydsl
    1.1 기본문법
    1.2 중급문법
    1.3 실무 활용 - 순수 JPA 와 Querydsl
    1.4 실무 활용 - 스프링 데이터 JPA 레파지토리로 변경
    1.5 스프링 데이터 JPA 가 제공하는 Querydsl 기능
    1.6 스프링 부트 2.6 이상, Querydsl 5.0 지원 방법


    1.1 기본문법
        - 시작 - JPQL vs Querydsl
            - EntityManager 로 JPAQueryFactory 생성
            - Querydsl 은 JPQL 빌더
            - JPQL: 문자(실행 시점 오류), Querydsl: 코드(컴파일 시점 오류)
            - JPQL: 파라미터 바인딩 직접, Querydsl: 파라미터 바인딩 자동 처리

            - JPAQueryFactory 를 필드로
                - 스프링 프레임워크가 주입해주는 이 엔티티 매니저 자체가 멀티쓰레드에 아무 문제없도록 설계되어 있다.
                - 여러 멀티쓰레드에서 들어와도 현재 내 트랜잭션이 어디에 걸려있는지에 따라서 트랙잭션에 바인딩 되도록 다 분배해줌.
                -> 동시성 문제 발생x
                -> 따라서 JPAQueryFactory queryFactory;
                처럼 따로 필드로 빼서 사용하는 것을 권장

                - JPAQueryFactory 를 필드로 제공하면 동시성 문제는 어떻게 될까? 동시성 문제는 JPAQueryFactory를
                  생성할 때 제공하는 EntityManager(em)에 달려있다. 스프링 프레임워크는 여러 쓰레드에서 동시에 같은
                  EntityManager 에 접근해도, 트랜잭션 마다 별도의 영속성 컨텍스트를 제공하기 때문에, 동시성 문제는
                  걱정하지 않아도 된다.

        - 기본 Q-Type 활용
            - Q 클래스 인스턴스를 사용하는 2가지 방법
                - QMember qMember = new QMember("m"); //별칭 직접 지정
                - QMember qMember = QMember.member; //기본 인스턴스 사용

            - 기본 인스턴스를 static import 와 함께 사용
                - import static study.querydsl.entity.QMember.*;

            - 참고: 같은 테이블을 조인해야 하는 경우가 아니면 기본 인스턴스를 사용하자

            - 다음 설정을 추가하면 실행되는 JPQL 을 볼 수 있다.
              spring.jpa.properties.hibernate.use_sql_comments: true

        - 검색 조건 쿼리
            - JPQL 이 제공하는 모든 검색 조건 제공
                member.username.eq("member1") // username = 'member1'
                member.username.ne("member1") //username != 'member1'
                member.username.eq("member1").not() // username != 'member1'
                member.username.isNotNull() //이름이 is not null
                member.age.in(10, 20) // age in (10,20)
                member.age.notIn(10, 20) // age not in (10, 20)
                member.age.between(10,30) //between 10, 30
                member.age.goe(30) // age >= 30
                member.age.gt(30) // age > 30
                member.age.loe(30) // age <= 30
                member.age.lt(30) // age < 30
                member.username.like("member%") //like 검색
                member.username.contains("member") // like ‘%member%’ 검색
                member.username.startsWith("member") //like ‘member%’ 검색

            - AND 조건을 파라미터로 처리
                - where() 에 파라미터로 검색조건을 추가하면 AND 조건이 추가됨
                - 이 경우 null 값은 무시 메서드 추출을 활용해서 동적 쿼리를 깔끔하게 만들 수 있음 뒤에서 설명

        - 결과 조회
            - fetch() : 리스트 조회, 데이터 없으면 빈 리스트 반환
            - fetchOne() : 단 건 조회
            - 결과가 없으면 : null
            - 결과가 둘 이상이면 : com.querydsl.core.NonUniqueResultException
            - fetchFirst() : limit(1).fetchOne()
            - fetchResults() : 페이징 정보 포함, total count 쿼리 추가 실행
            - fetchCount() : count 쿼리로 변경해서 count 수 조회

            - 컨텐츠를 가져오는 쿼리랑 total count 를 가져오는 쿼리랑 다를 수가 있다. 성능 때문에.
            - 성능을 더 최적화하기 위해서 total count 쿼리를 더 심플하게 가져오는 경우가 있다.
            - 따라서 복잡하고 성능이 중요한 페이지에서는 fetchResults(), fetchCount()를 쓰면 안되고 쿼리 두 개를 따로 날려야 한다.

        - 정렬
            - desc() , asc() : 일반 정렬
            - nullsLast() , nullsFirst() : null 데이터 순서 부여
            - .orderBy(member.age.desc(), member.username.asc().nullsLast())

        - 페이징
            - .offset(1) //0부터 시작(zero index)
            - .limit(2) //최대 2건 조회
            - 주의: count 쿼리가 실행되니 성능상 주의!
            - 실무에서 페이징 쿼리를 작성할 때, 데이터를 조회하는 쿼리는 여러 테이블을 조인해야 하지만,
              count 쿼리는 조인이 필요 없는 경우도 있다. 그런데 이렇게 자동화된 count 쿼리는 원본 쿼리와 같이 모두
              조인을 해버리기 때문에 성능이 안나올 수 있다. count 쿼리에 조인이 필요없는 성능 최적화가 필요하다면,
              count 전용 쿼리를 별도로 작성해야 한다.

        - 집합
            - 집합 함수
                - member.count(),
                  member.age.sum(),
                  member.age.avg(),
                  member.age.max(),
                  member.age.min())

            - GroupBy 사용
                - groupBy , 그룹화된 결과를 제한하려면 having

        - 조인 - 기본 조인
            - 기본 조인
                - 조인의 기본 문법은 첫 번째 파라미터에 조인 대상을 지정하고, 두 번째 파라미터에 별칭(alias)으로 사용할
                  Q 타입을 지정하면 된다.

                - join(조인 대상, 별칭으로 사용할 Q타입)

                - join() , innerJoin() : 내부 조인(inner join)
                  leftJoin() : left 외부 조인(left outer join)
                  rightJoin() : right 외부 조인(right outer join)
                  JPQL 의 on 과 성능 최적화를 위한 fetch 조인 제공 다음 on 절에서 설명

            - 세타 조인
                - 연관관계가 없는 필드로 조인
                - from 절에 여러 엔티티를 선택해서 세타 조인
                  외부 조인 불가능 다음에 설명할 조인 on을 사용하면 외부 조인 가능
                - .from(member, team)

        - 조인 - on절
            1. 조인 대상 필터링
                - .leftJoin(member.team, team).on(team.name.eq("teamA"))
            2. 연관관계 없는 엔티티 외부 조인
                - 주의! 문법을 잘 봐야 한다. leftJoin() 부분에 일반 조인과 다르게 엔티티 하나만 들어간다.
                  일반조인: leftJoin(member.team, team)
                  on 조인: from(member).leftJoin(team).on(xxx)

        - 조인 - 페치 조인
            - 페치 조인은 SQL 에서 제공하는 기능은 아니다. SQL 조인을 활용해서 연관된 엔티티를 SQL 한번에
              조회하는 기능이다. 주로 성능 최적화에 사용하는 방법이다.

            - 페치 조인 미적용
              지연로딩으로 Member, Team SQL 쿼리 각각 실행

              Member findMember = queryFactory
              .selectFrom(member)
              .where(member.username.eq("member1"))
              .fetchOne();

            - 페치 조인 적용
              즉시로딩으로 Member, Team SQL 쿼리 조인으로 한번에 조회

              Member findMember = queryFactory
              .selectFrom(member)
              .join(member.team, team).fetchJoin()
              .where(member.username.eq("member1"))
              .fetchOne();

            - join(), leftJoin() 등 조인 기능 뒤에 fetchJoin() 이라고 추가하면 된다.

        - 서브 쿼리
            - com.querydsl.jpa.JPAExpressions 사용
            - alias 문제 떄문 q를 따로 더 만들어줘야함.

            - 서브 쿼리 eq 사용
              QMember memberSub = new QMember("memberSub");
              List<Member> result = queryFactory
              .selectFrom(member)
              .where(member.age.eq(
              JPAExpressions
              .select(memberSub.age.max())
              .from(memberSub)
              ))
              .fetch();

            - 서브 쿼리 goe 사용
              List<Member> result = queryFactory
              .selectFrom(member)
              .where(member.age.goe(
              JPAExpressions
              .select(memberSub.age.avg())
              .from(memberSub)
              ))
              .fetch();

            - 서브쿼리 여러 건 처리 in 사용
              List<Member> result = queryFactory
              .selectFrom(member)
              .where(member.age.in(
              JPAExpressions
              .select(memberSub.age)
              .from(memberSub)
              .where(memberSub.age.gt(10))
              ))
              .fetch();

            - select 절에 subquery
              List<Tuple> fetch = queryFactory
              .select(member.username,
              JPAExpressions
              .select(memberSub.age.avg())
              .from(memberSub)
              ).from(member)
              .fetch();

            - static import 활용
              import static com.querydsl.jpa.JPAExpressions.select;
              List<Member> result = queryFactory
              .selectFrom(member)
              .where(member.age.eq(
              select(memberSub.age.max())
              .from(memberSub)
              ))
              .fetch();

            - from 절의 서브쿼리 한계
              JPA JPQL 서브쿼리의 한계점으로 from 절의 서브쿼리(인라인 뷰)는 지원하지 않는다. 당연히 Querydsl
              도 지원하지 않는다. 하이버네이트 구현체를 사용하면 select 절의 서브쿼리는 지원한다. Querydsl도
              하이버네이트 구현체를 사용하면 select 절의 서브쿼리를 지원한다.

            - from 절의 서브쿼리 해결방안
              1. 서브쿼리를 join 으로 변경한다. (가능한 상황도 있고, 불가능한 상황도 있다.)
              2. 애플리케이션에서 쿼리를 2번 분리해서 실행한다.
              3. nativeSQL 을 사용한다.

            - 현대적인 어플리케이션들은 어플리케이션 로직에서 많이 풀고, 뷰는 프리젠테이션 로직에서 푸는게 많이 들어가는 패턴인데 쿼리에서
              어떻게든 다 풀려다 보니까 쿼리가 복잡해지고 여러 서브쿼리가 사용되게 된다.
            - db는 데이터만 그룹핑하고 필터링해서 가져오는 게 좋다.
            - db는 데이터를 퍼올리는 용도로만 사용하는게 좋다.
            - 이렇게 데이터를 최소화해서 가져오는 역할에 집중해보면 from 절의 서브쿼리를 많이 줄일 수 있다. 복잡한 쿼리 또한

            - 백단에서 보통 어드민은 좀 느려도 된다.
            - 어드민에서 한방 쿼리로 해결하려고 막 짜는 것보다 쿼리를 2, 3번 나눠서 호출하는 게 훨씬 나을 수 있다.
            - sql 은 집합적으로 사고해서 쿼리를 짜야하기 때문에 복잡한데 어플리케이션 로직은 순차적으로 만들어서 풀어낼 수 있다.
            -> sql antiPatterns

        - Case 문
            - select, 조건절(where), order by 에서 사용 가능
            - 단순한 조건
              .select(member.age
              .when(10).then("열살")
              .when(20).then("스무살")
              .otherwise("기타"))

            - 복잡한 조건
              new CaseBuilder()
              .when(member.age.between(0, 20)).then("0~20살")
              .when(member.age.between(21, 30)).then("21~30살")
              .otherwise("기타"))

            - 예를 들어서 다음과 같은 임의의 순서로 회원을 출력하고 싶다면?
              1. 0 ~ 30살이 아닌 회원을 가장 먼저 출력
              2. 0 ~ 20살 회원 출력
              3. 21 ~ 30살 회원 출력

              NumberExpression<Integer> rankPath = new CaseBuilder()
              .when(member.age.between(0, 20)).then(2)
              .when(member.age.between(21, 30)).then(1)
              .otherwise(3);

              List<Tuple> result = queryFactory
              .select(member.username, member.age, rankPath)
              .from(member)
              .orderBy(rankPath.desc())
              .fetch();

            - Querydsl 은 자바 코드로 작성하기 때문에 rankPath 처럼 복잡한 조건을 변수로 선언해서 select 절,
              orderBy 절에서 함께 사용할 수 있다.

        - 상수, 문자 더하기
            - 상수가 필요하면 Expressions.constant(xxx) 사용

            - Tuple result = queryFactory
              .select(member.username, Expressions.constant("A"))
              .from(member)
              .fetchFirst();

            - 위와 같이 최적화가 가능하면 SQL 에 constant 값을 넘기지 않는다. 상수를 더하는 것 처럼 최적화가
              어려우면 SQL 에 constant 값을 넘긴다.

            - 문자 더하기 concat
              .select(member.username.concat("_").concat(member.age.stringValue()))

    1.2 중급문법
        - 프로젝션과 결과 반환 - 기본
            - 프로젝션: select 대상 지정
                - 프로젝션 대상이 하나
                  List<String> result = queryFactory
                  .select(member.username)
                  .from(member)
                  .fetch();

                - 프로젝션 대상이 하나면 타입을 명확하게 지정할 수 있음
                - 프로젝션 대상이 둘 이상이면 튜플이나 DTO 로 조회

                - 레파지토리 계층 안에서만 쓰는 것을 추천. 바깥 계층으로 던지는 것은 DTO 로 반환해서 던지는 것을 권장.
                  왜냐하면 튜플도 querydsl 에 종속적인 타입이므로

            - 튜플 조회
                - 프로젝션 대상이 둘 이상일 때 사용
                  List<Tuple> result = queryFactory
                  .select(member.username, member.age)
                  .from(member)
                  .fetch();

            - 프로젝션과 결과 반환 - DTO 조회
                - 순수 JPA 에서 DTO 조회
                  List<MemberDto> result = em.createQuery(
                  "select new study.querydsl.dto.MemberDto(m.username, m.age) " +
                  "from Member m", MemberDto.class)
                  .getResultList();

                   - 순수 JPA 에서 DTO 를 조회할 때는 new 명령어를 사용해야함
                   - DTO 의 package 이름을 다 적어줘야해서 지저분함
                   - 생성자 방식만 지원함

                - Querydsl 빈 생성(Bean population)
                    - 결과를 DTO 반환할 때 사용
                        - 프로퍼티 접근 - Setter
                            .select(Projections.bean(MemberDto.class,
                            member.username,
                            member.age))
                        - 필드 직접 접근
                            .select(Projections.fields(MemberDto.class,
                            member.username,
                            member.age))

                            - 별칭이 다를 때
                                .select(Projections.fields(UserDto.class,
                                member.username.as("name"),
                                ExpressionUtils.as(
                                JPAExpressions
                                .select(memberSub.age.max())
                                .from(memberSub), "age")
                                )

                                - 프로퍼티나, 필드 접근 생성 방식에서 이름이 다를 때 해결 방안
                                - ExpressionUtils.as(source,alias) : 필드나, 서브 쿼리에 별칭 적용
                                - username.as("memberName") : 필드에 별칭 적용
                        - 생성자 사용
                            .select(Projections.constructor(MemberDto.class,
                            member.username,
                            member.age))

                - 프로젝션과 결과 반환 - @QueryProjection
                    - 생성자 + @QueryProjection
                        - @QueryProjection
                          public MemberDto(String username, int age) {
                          this.username = username;
                          this.age = age;
                          }

                        - ./gradlew compileQuerydsl
                        - QMemberDto 생성 확인

                        -.select(new QMemberDto(member.username, member.age))
                         .from(member)
                         .fetch();

                        - 이 방법은 컴파일러로 타입을 체크할 수 있으므로 가장 안전한 방법이다. 다만 DTO 에 QueryDSL
                          어노테이션을 유지해야 하는 점과 DTO 까지 Q 파일을 생성해야 하는 단점이 있다.

        - 동적 쿼리 - BooleanBuilder 사용
            BooleanBuilder builder = new BooleanBuilder();
            if (usernameCond != null) {
            builder.and(member.username.eq(usernameCond));
            }
            if (ageCond != null) {
            builder.and(member.age.eq(ageCond));
            }
            return queryFactory
            .selectFrom(member)
            .where(builder)
            .fetch();

        - 동적 쿼리 - Where 다중 파라미터 사용
            .where(usernameEq(usernameCond), ageEq(ageCond))

            private BooleanExpression usernameEq(String usernameCond) {
                return usernameCond != null ? member.username.eq(usernameCond) : null;
            }

            private BooleanExpression ageEq(Integer ageCond) {
                return ageCond != null ? member.age.eq(ageCond) : null;
            }

            - where 조건에 null 값은 무시된다.
            - 메서드를 다른 쿼리에서도 재활용 할 수 있다.
            - 쿼리 자체의 가독성이 높아진다.
            - 조합 가능
                private BooleanExpression allEq(String usernameCond, Integer ageCond) {
                    return usernameEq(usernameCond).and(ageEq(ageCond));
                }

        - 수정, 삭제 벌크 연산
            - 쿼리 한번으로 대량 데이터 수정
              long count = queryFactory
              .update(member)
              .set(member.username, "비회원")
              .where(member.age.lt(28))
              .execute();

            - 기존 숫자에 1 더하기
              .update(member)
              .set(member.age, member.age.add(1))
              .execute();

            - 쿼리 한번으로 대량 데이터 삭제
              long count = queryFactory
              .delete(member)
              .where(member.age.gt(18))
              .execute();

            - 주의: JPQL 배치와 마찬가지로, 영속성 컨텍스트에 있는 엔티티를 무시하고 실행되기 때문에 배치 쿼리를
              실행하고 나면 영속성 컨텍스트를 초기화 하는 것이 안전하다.

        - SQL function 호출하기
            - SQL function 은 JPA 와 같이 Dialect 에 등록된 내용만 호출할 수 있다.

            - member M으로 변경하는 replace 함수 사용
              String result = queryFactory
              .select(Expressions.stringTemplate("function('replace', {0}, {1},
              {2})", member.username, "member", "M"))
              .from(member)
              .fetchFirst();

    1.3 실무 활용 - 순수 JPA 와 Querydsl
        - 동적 쿼리와 성능 최적화 조회 - Builder 사용
            BooleanBuilder builder = new BooleanBuilder();
            if (hasText(condition.getUsername())) {
            builder.and(member.username.eq(condition.getUsername()));
            }
            if (hasText(condition.getTeamName())) {
            builder.and(team.name.eq(condition.getTeamName()));
            }
            if (condition.getAgeGoe() != null) {
            builder.and(member.age.goe(condition.getAgeGoe()));
            }
            if (condition.getAgeLoe() != null) {
            builder.and(member.age.loe(condition.getAgeLoe()));
            }

            .where(builder)

        - 동적 쿼리와 성능 최적화 조회 - Where 절 파라미터 사용
            .where(usernameEq(condition.getUsername()),
            teamNameEq(condition.getTeamName()),
            ageGoe(condition.getAgeGoe()),
            ageLoe(condition.getAgeLoe()))

            private BooleanExpression usernameEq(String username) {
            return isEmpty(username) ? null : member.username.eq(username);
            }
            private BooleanExpression teamNameEq(String teamName) {
            return isEmpty(teamName) ? null : team.name.eq(teamName);
            }
            private BooleanExpression ageGoe(Integer ageGoe) {
            return ageGoe == null ? null : member.age.goe(ageGoe);
            }
            private BooleanExpression ageLoe(Integer ageLoe) {
            return ageLoe == null ? null : member.age.loe(ageLoe);
            }

            - 참고: where 절에 파라미터 방식을 사용하면 조건 재사용 가능

        - 조회 API 컨트롤러 개발

    1.4 실무 활용 - 스프링 데이터 JPA 레파지토리로 변경
        - 간단한 정적쿼리들은 스프링 데이터 JPA 를 활용하면 편하다.
        - 인터페이스만 만들면 이름으로 매칭해서. 다 자동으로 구현체가 만들어져서.

        - 사용자 정의 리포지토리 사용법
            1. 사용자 정의 인터페이스 작성
            2. 사용자 정의 인터페이스 구현
            3. 스프링 데이터 리포지토리에 사용자 정의 인터페이스 상속

        - 스프링 데이터 페이징 활용1 - Querydsl 페이징 연동
            - 전체 카운트를 한번에 조회하는 단순한 방법
                - searchPageSimple(), fetchResults() 사용
                - Querydsl 이 제공하는 fetchResults() 를 사용하면 내용과 전체 카운트를 한번에 조회할 수 있다.(실제
                  쿼리는 2번 호출)
                - fetchResult() 는 카운트 쿼리 실행시 필요없는 order by 는 제거한다.

            - 데이터 내용과 전체 카운트를 별도로 조회하는 방법
                - searchPageComplex()
                - 전체 카운트를 조회 하는 방법을 최적화 할 수 있으면 이렇게 분리하면 된다. (예를 들어서 전체 카운트를
                  조회할 때 조인 쿼리를 줄일 수 있다면 상당한 효과가 있다.)
                - 코드를 리펙토링해서 내용 쿼리과 전체 카운트 쿼리를 읽기 좋게 분리하면 좋다.

        - 스프링 데이터 페이징 활용2 - CountQuery 최적화
            - PageableExecutionUtils.getPage()로 최적화
            - 스프링 데이터 라이브러리가 제공
            - count 쿼리가 생략 가능한 경우 생략해서 처리
                - 페이지 시작이면서 컨텐츠 사이즈가 페이지 사이즈보다 작을 때
                - 마지막 페이지 일 때 (offset + 컨텐츠 사이즈를 더해서 전체 사이즈 구함)

        - 스프링 데이터 페이징 활용3 - 컨트롤러 개발
            - 정렬( Sort )은 조건이 조금만 복잡해져도 Pageable 의 Sort 기능을 사용하기 어렵다. 루트 엔티티
              범위를 넘어가는 동적 정렬 기능이 필요하면 스프링 데이터 페이징이 제공하는 Sort 를 사용하기 보다는
              파라미터를 받아서 직접 처리하는 것을 권장한다.

    1.5 스프링 데이터 JPA 가 제공하는 Querydsl 기능
        - 여기서 소개하는 기능은 제약이 커서 복잡한 실무 환경에서 사용하기에는 많이 부족하다. 그래도 스프링
          데이터에서 제공하는 기능이므로 간단히 소개하고, 왜 부족한지 설명하겠다.

        - 인터페이스 지원 - QuerydslPredicateExecutor
            - 리포지토리에 적용
              interface MemberRepository extends JpaRepository<User, Long>,
              QuerydslPredicateExecutor<User> {
              }

            - 한계점
              조인X (묵시적 조인은 가능하지만 left join 이 불가능하다.)
              클라이언트가 Querydsl 에 의존해야 한다. 서비스 클래스가 Querydsl 이라는 구현 기술에 의존해야 한다.
              복잡한 실무환경에서 사용하기에는 한계가 명확하다.

            - 참고: QuerydslPredicateExecutor 는 Pagable, Sort 를 모두 지원하고 정상 동작한다.

        - Querydsl Web 지원
            - 한계점
              단순한 조건만 가능
              조건을 커스텀하는 기능이 복잡하고 명시적이지 않음
              컨트롤러가 Querydsl 에 의존
              복잡한 실무환경에서 사용하기에는 한계가 명확

        - 리포지토리 지원 - QuerydslRepositorySupport
            - 장점
                - getQuerydsl().applyPagination() 스프링 데이터가 제공하는 페이징을 Querydsl로 편리하게 변환
                  가능(단! Sort 는 오류발생)
                - from() 으로 시작 가능(최근에는 QueryFactory 를 사용해서 select() 로 시작하는 것이 더 명시적)
                - EntityManager 제공

            - 한계
                - Querydsl 3.x 버전을 대상으로 만듬
                - Querydsl 4.x에 나온 JPAQueryFactory 로 시작할 수 없음
                    - select 로 시작할 수 없음 (from 으로 시작해야함)
                - QueryFactory 를 제공하지 않음
                - 스프링 데이터 Sort 기능이 정상 동작하지 않음

        - Querydsl 지원 클래스 직접 만들기
            - 스프링 데이터가 제공하는 QuerydslRepositorySupport 가 지닌 한계를 극복하기 위해 직접 Querydsl
              지원 클래스를 만들어보자.

            - 장점
                - 스프링 데이터가 제공하는 페이징을 편리하게 변환
                - 페이징과 카운트 쿼리 분리 가능
                - 스프링 데이터 Sort 지원
                - select() , selectFrom() 으로 시작 가능
                - EntityManager , QueryFactory 제공































