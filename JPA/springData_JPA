1.스프링데이터 JPA
    1.1 공통 인터페이스 기능
    1.2 쿼리 메소드 기능
    1.3 확장 기능
    1.4 스프링 데이터 JPA 분석
    1.5 나머지 기능들


    * 롬복 설명
      @Setter: 실무에서 가급적 Setter 는 사용하지 않기
      @NoArgsConstructor AccessLevel.PROTECTED: 기본 생성자 막고 싶은데, JPA 스팩상 PROTECTED 로 열어두어야 함
        @NoArgsConstructor(access = AccessLevel.PROTECTED)
      @ToString 은 가급적 내부 필드만(연관관계 없는 필드만)
        @ToString(of = {"id", "username", "age"})

    * 개발자 입장에서 좋은 오류
      1.컴파일러 시점에서 발생하는 오류
      2.실행시점에서 발생하는 오류
         (어플리케이션 로딩 시점)
      3.고객에 의한 오류


    1.1 공통 인터페이스 기능
        - 순수 JPA 로 구현한 MemberJpaRepository 대신에 스프링 데이터 JPA 가 제공하는 공통 인터페이스 사용
        - JpaRepository 인터페이스: 공통 CRUD 제공
        - 제네릭은 <엔티티 타입, 식별자 타입> 설정
        - Repository <- CrudRepository <- PagingAndSortingRepository <- JpaRepository
        - 제네릭 타입
            - T : 엔티티
            - ID : 엔티티의 식별자 타입
            - S : 엔티티와 그 자식 타입
        - 주요 메서드
            - save(S) : 새로운 엔티티는 저장하고 이미 있는 엔티티는 병합한다.
            - delete(T) : 엔티티 하나를 삭제한다. 내부에서 EntityManager.remove() 호출
            - findById(ID) : 엔티티 하나를 조회한다. 내부에서 EntityManager.find() 호출
            - getOne(ID) : 엔티티를 프록시로 조회한다. 내부에서 EntityManager.getReference() 호출
            - findAll(…) : 모든 엔티티를 조회한다. 정렬( Sort )이나 페이징( Pageable ) 조건을 파라미터로 제공할 수 있다.

    1.2 쿼리 메소드 기능
        - 쿼리 메소드 기능 3가지
            - 메소드 이름으로 쿼리 생성
                - 메소드 이름을 분석해서 JPQL 쿼리 실행
                - 참고: 이 기능은 엔티티의 필드명이 변경되면 인터페이스에 정의한 메서드 이름도 꼭 함께 변경해야 한다.
                  그렇지 않으면 애플리케이션을 시작하는 시점에 오류가 발생한다.
                  이렇게 애플리케이션 로딩 시점에 오류를 인지할 수 있는 것이 스프링 데이터 JPA 의 매우 큰 장점이다.
                - List<Member> findByUsernameAndAgeGreaterThan(String username, int age);

            - 메소드 이름으로 JPA NamedQuery 호출
                - @NamedQuery 어노테이션으로 Named 쿼리 정의
                - @NamedQuery(name="Member.findByUsername",
                              query="select m from Member m where m.username = :username")
                - JPA 를 직접 사용해서 Named 쿼리 호출
                  em.createNamedQuery("Member.findByUsername", Member.class)
                - 스프링 데이터 JPA 로 NamedQuery 사용
                  @Query(name = "Member.findByUsername")
                  List<Member> findByUsername(@Param("username") String username);
                    - @Query 를 생략하고 메서드 이름만으로 Named 쿼리를 호출할 수 있다.
                    - 스프링 데이터 JPA 는 선언한 "도메인 클래스 + .(점) + 메서드 이름"으로 Named 쿼리를 찾아서 실행
                      만약 실행할 Named 쿼리가 없으면 메서드 이름으로 쿼리 생성 전략을 사용한다.
                      필요하면 전략을 변경할 수 있지만 권장하지 않는다.
                - 참고: 스프링 데이터 JPA 를 사용하면 실무에서 Named Query 를 직접 등록해서 사용하는 일은 드물다.
                  대신 @Query 를 사용해서 리파지토리 메소드에 쿼리를 직접 정의한다.

            - @Query 어노테이션을 사용해서 레파지토리 인터페이스에 쿼리 직접 정의
                - 참고: 실무에서는 메소드 이름으로 쿼리 생성 기능은 파라미터가 증가하면 메서드 이름이 매우
                  지저분해진다. 따라서 @Query 기능을 자주 사용하게 된다.

        - 파라미터 바인딩
            - select m from Member m where m.username = ?0 //위치 기반
              select m from Member m where m.username = :name //이름 기반

            - public interface MemberRepository extends JpaRepository<Member, Long> {
              @Query("select m from Member m where m.username = :name")
              Member findMembers(@Param("name") String username);
              }
            - 컬렉션 파라미터 바인딩
              Collection 타입으로 in절 지원
              @Query("select m from Member m where m.username in :names")
              List<Member> findByNames(@Param("names") List<String> names);

        - 반환 타입
            - 스프링 데이터 JPA 는 유연한 반환 타입 지원
                - List<Member> findByUsername(String name); //컬렉션
                - Member findByUsername(String name); //단건
                - Optional<Member> findByUsername(String name); //단건 Optional

        - 스프링 데이터 JPA 페이징과 정렬
            - Page<Member> findByUsername(String name, Pageable pageable); //count 쿼리 사용
              Slice<Member> findByUsername(String name, Pageable pageable); //count 쿼리 사용 안함
              List<Member> findByUsername(String name, Pageable pageable); //count 쿼리 사용 안함
              List<Member> findByUsername(String name, Sort sort);

            - Page 사용 예제 실행 코드
                - PageRequest pageRequest = PageRequest.of(0, 3, Sort.by(Sort.Direction.DESC, "username"));
                  Page<Member> page = memberRepository.findByAge(10, pageRequest);

                - 두 번째 파라미터로 받은 Pagable 은 인터페이스다. 따라서 실제 사용할 때는 해당 인터페이스를 구현한
                  org.springframework.data.domain.PageRequest 객체를 사용한다.
                  PageRequest 생성자의 첫 번째 파라미터에는 현재 페이지를, 두 번째 파라미터에는 조회할 데이터 수를
                  입력한다. 여기에 추가로 정렬 정보도 파라미터로 사용할 수 있다. 참고로 페이지는 0부터 시작한다.

                - 주의: Page 는 1부터 시작이 아니라 0부터 시작이다.

                - Page 인터페이스
                  public interface Page<T> extends Slice<T> {
                  int getTotalPages(); //전체 페이지 수
                  long getTotalElements(); //전체 데이터 수
                  <U> Page<U> map(Function<? super T, ? extends U> converter); //변환기
                  }

                - Slice 인터페이스
                  public interface Slice<T> extends Streamable<T> {
                  int getNumber(); //현재 페이지
                  int getSize(); //페이지 크기
                  int getNumberOfElements(); //현재 페이지에 나올 데이터 수
                  List<T> getContent(); //조회된 데이터
                  boolean hasContent(); //조회된 데이터 존재 여부
                  Sort getSort(); //정렬 정보
                  boolean isFirst(); //현재 페이지가 첫 페이지 인지 여부
                  boolean isLast(); //현재 페이지가 마지막 페이지 인지 여부
                  boolean hasNext(); //다음 페이지 여부
                  boolean hasPrevious(); //이전 페이지 여부
                  Pageable getPageable(); //페이지 요청 정보
                  Pageable nextPageable(); //다음 페이지 객체
                  Pageable previousPageable();//이전 페이지 객체
                  <U> Slice<U> map(Function<? super T, ? extends U> converter); //변환기
                  }

                - 참고: count 쿼리를 다음과 같이 분리할 수 있음
                  @Query(value = “select m from Member m”,
                  countQuery = “select count(m.username) from Member m”)
                  Page<Member> findMemberAllCountBy(Pageable pageable);

                - 페이지를 유지하면서 엔티티를 DTO 로 변환하기
                  Page<Member> page = memberRepository.findByAge(10, pageRequest);
                  Page<MemberDto> dtoPage = page.map(m -> new MemberDto());

            - 이제 JPQL 을 직접 짜더라도 페이징 같은 외적인 관심사가 아니라 개발자는 집중해야 하는 쿼리만 짜면 된다.
              나머지는 JPA 가 알아서 해줌. 개발자가 더 핵심 비즈니스에 집중할 수 있다.

            - Page<Member> 는 엔티티 이기에 반환하면 안됨.
              -> Page<MemberDto> toMap = page.map(member -> new MemberDto(member.getId(),
                 member.getUsername, member.getTeam()))
              으로 변환해서 api 반환해주면 된다.

        - 스프링 데이터 JPA 를 사용한 벌크성 수정 쿼리
          @Modifying
          @Query("update Member m set m.age = m.age + 1 where m.age >= :age")
          int bulkAgePlus(@Param("age") int age);

          - 벌크성 수정, 삭제 쿼리는 @Modifying 어노테이션을 사용
          - 벌크성 쿼리를 실행하고 나서 영속성 컨텍스트 초기화: @Modifying(clearAutomatically = true)
            (이 옵션의 기본값은 false )
          - 이 옵션 없이 회원을 findById 로 다시 조회하면 영속성 컨텍스트에 과거 값이 남아서 문제가 될 수
            있다. 만약 다시 조회해야 하면 꼭 영속성 컨텍스트를 초기화 하자.

          - 참고: 벌크 연산은 영속성 컨텍스트를 무시하고 실행하기 때문에, 영속성 컨텍스트에 있는 엔티티의 상태와
            DB에 엔티티 상태가 달라질 수 있다.
            권장하는 방안
              1. 영속성 컨텍스트에 엔티티가 없는 상태에서 벌크 연산을 먼저 실행한다.
              2. 부득이하게 영속성 컨텍스트에 엔티티가 있으면 벌크 연산 직후 영속성 컨텍스트를 초기화 한다.

        - @EntityGraph
            - 연관된 엔티티들을 SQL 한번에 조회하는 방법
            - 참고: 다음과 같이 지연 로딩 여부를 확인할 수 있다.
              //Hibernate 기능으로 확인
              Hibernate.isInitialized(member.getTeam())

              //JPA 표준 방법으로 확인
              PersistenceUnitUtil util =
              em.getEntityManagerFactory().getPersistenceUnitUtil();
              util.isLoaded(member.getTeam());

            - 연관된 엔티티를 한번에 조회하려면 페치 조인이 필요하다.
              @Query("select m from Member m left join fetch m.team")

            - EntityGraph
              //공통 메서드 오버라이드
              @Override
              @EntityGraph(attributePaths = {"team"})
              List<Member> findAll();

              //JPQL + 엔티티 그래프
              @EntityGraph(attributePaths = {"team"})
              @Query("select m from Member m")
              List<Member> findMemberEntityGraph();

              //메서드 이름으로 쿼리에서 특히 편리하다.
              @EntityGraph(attributePaths = {"team"})
              List<Member> findByUsername(String username)

            - EntityGraph 정리
              사실상 페치 조인(FETCH JOIN)의 간편 버전
              LEFT OUTER JOIN 사용

            - NamedEntityGraph 사용 방법
              @NamedEntityGraph(name = "Member.all", attributeNodes = @NamedAttributeNode("team"))

              @EntityGraph("Member.all")
              @Query("select m from Member m")

        - JPA Hint & Lock
            - JPA 쿼리 힌트(SQL 힌트가 아니라 JPA 구현체에게 제공하는 힌트)
            - @QueryHints(value = @QueryHint(name = "org.hibernate.readOnly", value = "true"))
            - 정말 중요하고 트래픽이 아주 많은 api 에 이걸 적용하는 것을 고려.
              다 넣어서 최적화 하기에는 애매함.
              성능 테스트 해보고 얻는 이점이 있는 경우에만 적용 고려.
              그리고 조회 성능이 딸리면 앞에 레디스를 깔던 캐시를 깔아야 한다. 그래서 이 jpa hint로 얻을 수 있는 이점이 크지 않다.

            - @Lock(LockModeType.PESSIMISTIC_WRITE)

    1.3 확장 기능
        - 사용자 정의 리포지토리 구현
            - 스프링 데이터 JPA 리포지토리는 인터페이스만 정의하고 구현체는 스프링이 자동 생성
            - 스프링 데이터 JPA 가 제공하는 인터페이스를 직접 구현하면 구현해야 하는 기능이 너무 많음
            - 다양한 이유로 인터페이스의 메서드를 직접 구현하고 싶다면?
                - JPA 직접 사용( EntityManager )
                  스프링 JDBC Template 사용
                  MyBatis 사용
                  데이터베이스 커넥션 직접 사용 등등...
                  Querydsl 사용

            - 사용자 정의 구현 클래스
              규칙: 리포지토리 인터페이스 이름 + Impl
              스프링 데이터 JPA 가 인식해서 스프링 빈으로 등록

            - Impl 대신 다른 이름으로 변경하고 싶으면?
                - XML 설정
                  <repositories base-package="study.datajpa.repository"
                  repository-impl-postfix="Impl" />
                - JavaConfig 설정
                  @EnableJpaRepositories(basePackages = "study.datajpa.repository",
                  repositoryImplementationPostfix = "Impl")

            - 실무에서는 주로 QueryDSL 이나 SpringJdbcTemplate 을 함께 사용할 때 사용자 정의 리포지토리 기능 자주 사용
            - 스프링 데이터 2.x 부터는 사용자 정의 구현 클래스에 리포지토리 인터페이스 이름 + Impl 을 적용하는 대신에
              사용자 정의 인터페이스 명 + Impl 방식도 지원한다.
            - 예를 들어서 위 예제의 MemberRepositoryImpl 대신에 MemberRepositoryCustomImpl 같이 구현해도 된다.

        - Auditing
            - 엔티티를 생성, 변경할 때 변경한 사람과 시간을 추적하고 싶으면?
            - JPA 주요 이벤트 어노테이션
              @PrePersist, @PostPersist
              @PreUpdate, @PostUpdate

            - @EnableJpaAuditing 스프링 부트 설정 클래스에 적용해야함
              @EntityListeners(AuditingEntityListener.class) 엔티티에 적용
            - 사용 어노테이션
              @CreatedDate
              @LastModifiedDate
              @CreatedBy
              @LastModifiedBy

            - 등록자, 수정자를 처리해주는 AuditorAware 스프링 빈 등록
              @Bean
              public AuditorAware<String> auditorProvider() {
              return () -> Optional.of(UUID.randomUUID().toString());
              }
              실무에서는 세션 정보나, 스프링 시큐리티 로그인 정보에서 ID를 받음

            - @EnableJpaAuditing(modifyOnCreate = false)

            - 전체 적용
                - @EntityListeners(AuditingEntityListener.class) 를 생략하고 스프링 데이터 JPA 가 제공하는
                  이벤트를 엔티티 전체에 적용하려면 orm.xml 에 다음과 같이 등록하면 된다.

                - META-INF/orm.xml
                  <persistence-unit-metadata>
                  <persistence-unit-defaults>
                  <entity-listeners>
                  <entity-listener
                  class="org.springframework.data.jpa.domain.support.AuditingEntityListener”/>
                  </entity-listeners>
                  </persistence-unit-defaults>
                  </persistence-unit-metadata>
                  </entity-mappings>

        - Web 확장 - 도메인 클래스 컨버터
            - HTTP 파라미터로 넘어온 엔티티의 아이디로 엔티티 객체를 찾아서 바인딩
            - 도메인 클래스 컨버터로 엔티티를 파라미터로 받으면, 이 엔티티는 단순 조회용으로만 사용해야 한다.
              (트랜잭션이 없는 범위에서 엔티티를 조회했으므로, 엔티티를 변경해도 DB에 반영되지 않는다.)

        - Web 확장 - 페이징과 정렬
            - 스프링 데이터가 제공하는 페이징과 정렬 기능을 스프링 MVC 에서 편리하게 사용할 수 있다.
            - http 파라미터들이 컨트롤러에서 바인딩 될 때 Pageable 이 있으면 PageRequest 라는 객체를 생성해서
              그 값을 채워서 Pageable 에 인젝션 해줌

            - 요청 파라미터
                - 예) /members?page=0&size=3&sort=id,desc&sort=username,desc
                  page: 현재 페이지, 0부터 시작한다.
                  size: 한 페이지에 노출할 데이터 건수
                  sort: 정렬 조건을 정의한다. 예) 정렬 속성,정렬 속성...(ASC | DESC), 정렬 방향을 변경하고 싶으면 sort
                  파라미터 추가 ( asc 생략 가능)

            - 기본값
                - 글로벌 설정: 스프링 부트
                    - spring.data.web.pageable.default-page-size=20 /# 기본 페이지 사이즈/
                      spring.data.web.pageable.max-page-size=2000 /# 최대 페이지 사이즈/

                - 개별 설정
                    - @PageableDefault 어노테이션을 사용
                      @RequestMapping(value = "/members_page", method = RequestMethod.GET)
                      public String list(@PageableDefault(size = 12, sort = “username”,
                      direction = Sort.Direction.DESC) Pageable pageable) {
                      ...
                      }

            - 접두사
                - 페이징 정보가 둘 이상이면 접두사로 구분
                  @Qualifier 에 접두사명 추가 "{접두사명}_xxx”
                  예제: /members?member_page=0&order_page=1

                - public String list(
                  @Qualifier("member") Pageable memberPageable,
                  @Qualifier("order") Pageable orderPageable, ...

        - Page 내용을 DTO 로 변환하기
            - Page 는 map() 을 지원해서 내부 데이터를 다른 것으로 변경할 수 있다.

            - Page.map() 사용
              @GetMapping("/members")
              public Page<MemberDto> list(Pageable pageable) {
              Page<Member> page = memberRepository.findAll(pageable);
              Page<MemberDto> pageDto = page.map(MemberDto::new);
              return pageDto;
              }

            - Page.map() 코드 최적화
              @GetMapping("/members")
              public Page<MemberDto> list(Pageable pageable) {
              return memberRepository.findAll(pageable).map(MemberDto::new);
              }

    1.4 스프링 데이터 JPA 분석
        - 스프링 데이터 JPA 구현체 분석
          스프링 데이터 JPA 가 제공하는 공통 인터페이스의 구현체
          org.springframework.data.jpa.repository.support.SimpleJpaRepository

        - @Repository 적용: JPA 예외를 스프링이 추상화한 예외로 변환
            *** @Repository 의 두 가지 의미 ***
            1. ComponentScan 의 대상이 되서 스프링이 읽어들여서 스프링 컨테이너에 올림
            2. jpa 든 jdbc 든 예외가 터지면(이 예외들은 다 다르다) 영속성 계층에 있는 예외들을 스프링에서 쓸 수 있는 예외들로 다 바꿔줌.
            -> 그래서 서비스 계층이나 컨트롤러 계층에 예외를 넘길 때 jdbc 예외가 터졌을 때 jdbc 예외를 넘기는 것이 아니라 스프링 프레임웍이
               제공하는 예외로 바껴서 넘어간다.
            -> 결과적으로 하부기술을 jdbc 에서 jpa 로 바꿔도 exception 을 처리하는 메커니즘이 동일하다. 서비스나 컨트롤러나
               레파지토리 계층을 갖다쓰는 입장에서.
            -> 스프링에서 강점으로 밀고 있는 기능
            -> 하부 구현기술을 바꿔도 기존 비즈니스 로직에 최대한 영향을 주지 않도록 잘 설계가 된 것.

        - save() 메서드
          새로운 엔티티면 저장( persist )
          새로운 엔티티가 아니면 병합( merge )

        - 새로운 엔티티를 판단하는 기본 전략
            - 식별자가 객체일 때 null 로 판단
            - 식별자가 자바 기본 타입일 때 0 으로 판단
            - Persistable 인터페이스를 구현해서 판단 로직 변경 가능
                - JPA 식별자 생성 전략이 @GenerateValue 면 save() 호출 시점에 식별자가 없으므로 새로운
                  엔티티로 인식해서 정상 동작한다. 그런데 JPA 식별자 생성 전략이 @Id 만 사용해서 직접 할당이면 이미
                  식별자 값이 있는 상태로 save() 를 호출한다. 따라서 이 경우 merge() 가 호출된다. merge() 는 우선
                  DB를 호출해서 값을 확인하고, DB에 값이 없으면 새로운 엔티티로 인지하므로 매우 비효율 적이다. 따라서
                  Persistable 를 사용해서 새로운 엔티티 확인 여부를 직접 구현하게는 효과적이다.
                  참고로 등록시간( @CreatedDate )을 조합해서 사용하면 이 필드로 새로운 엔티티 여부를 편리하게 확인할
                  수 있다. (@CreatedDate 에 값이 없으면 새로운 엔티티로 판단)

                - @EntityListeners(AuditingEntityListener.class)
                  @NoArgsConstructor(access = AccessLevel.PROTECTED)
                  public class Item implements Persistable<String> {
                  @Id
                  private String id;
                  @CreatedDate
                  private LocalDateTime createdDate;
                  public Item(String id) {
                  this.id = id;
                  }
                  @Override
                  public String getId() {
                  return id;
                  }
                  @Override
                  public boolean isNew() {
                  return createdDate == null;
                  }
                  }

    1.5 나머지 기능들
        - 실무에서는 JPA Criteria 를 거의 안쓴다! 대신에 QueryDSL 을 사용하자.
        - Query By Example  -> 실무에서 사용하기에는 매칭 조건이 너무 단순하고, LEFT 조인이 안됨

        - Projections
            - 엔티티 대신에 DTO 를 편리하게 조회할 때 사용
            - 전체 엔티티가 아니라 만약 회원 이름만 딱 조회하고 싶으면?
            - 조회할 엔티티의 필드를 getter 형식으로 지정하면 해당 필드만 선택해서 조회(Projection)
                - public interface UsernameOnly {
                  String getUsername();
                  }

                  public interface MemberRepository ... {
                  List<UsernameOnly> findProjectionsByUsername(String username);
                  }

                - 메서드 이름은 자유, 반환 타입으로 인지

            - 인터페이스 기반 Closed Projections
                  프로퍼티 형식(getter)의 인터페이스를 제공하면, 구현체는 스프링 데이터 JPA가 제공

            - 인터페이스 기반 Open Projections
              다음과 같이 스프링의 SpEL 문법도 지원
              public interface UsernameOnly {
              @Value("#{target.username + ' ' + target.age + ' ' + target.team.name}")
              String getUsername();
              }

              단! 이렇게 SpEL문법 을 사용하면, DB 에서 엔티티 필드를 다 조회해온 다음에 계산한다! 따라서 JPQL
              SELECT 절 최적화가 안된다.

            - 클래스 기반 Projection
                - 다음과 같이 인터페이스가 아닌 구체적인 DTO 형식도 가능
                - 생성자의 파라미터 이름으로 매칭

            - 동적 Projections
                - 다음과 같이 Generic type 을 주면, 동적으로 프로젝션 데이터 번경 가능

            - 중첩 구조 처리

            - 주의
              프로젝션 대상이 root 엔티티면, JPQL SELECT 절 최적화 가능
              프로젝션 대상이 ROOT 가 아니면
                LEFT OUTER JOIN 처리
                모든 필드를 SELECT 해서 엔티티로 조회한 다음에 계산

            - 정리
              프로젝션 대상이 root 엔티티면 유용하다.
              프로젝션 대상이 root 엔티티를 넘어가면 JPQL SELECT 최적화가 안된다!
              실무의 복잡한 쿼리를 해결하기에는 한계가 있다.
              실무에서는 단순할 때만 사용하고, 조금만 복잡해지면 QueryDSL 을 사용하자

        - 네이티브 쿼리
            - 가급적 네이티브 쿼리는 사용하지 않는게 좋음, 정말 어쩔 수 없을 때 사용
            - 최근에 나온 궁극의 방법 스프링 데이터 Projections 활용

            - 스프링 데이터 JPA 기반 네이티브 쿼리
                - 페이징 지원
                - 반환 타입
                  Object[]
                  Tuple
                  DTO(스프링 데이터 인터페이스 Projections 지원)
                - 제약
                  Sort 파라미터를 통한 정렬이 정상 동작하지 않을 수 있음(믿지 말고 직접 처리)
                  JPQL 처럼 애플리케이션 로딩 시점에 문법 확인 불가
                  동적 쿼리 불가

                - public interface MemberRepository extends JpaRepository<Member, Long> {
                  @Query(value = "select * from member where username = ?", nativeQuery =
                  true)
                  Member findByNativeQuery(String username);

            - Projections 활용
                - 예) 스프링 데이터 JPA 네이티브 쿼리 + 인터페이스 기반 Projections 활용
                  @Query(value = "SELECT m.member_id as id, m.username, t.name as teamName " +
                  "FROM member m left join team t",
                  countQuery = "SELECT count(*) from member",
                  nativeQuery = true)
                  Page<MemberProjection> findByNativeProjection(Pageable pageable);

            - 동적 네이티브 쿼리
                - 하이버네이트를 직접 활용
                  스프링 JdbcTemplate, myBatis, jooq 같은 외부 라이브러리 사용



















