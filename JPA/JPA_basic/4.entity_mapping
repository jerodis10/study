4.엔티티 매핑
    4.1 객체와 테이블 매핑
    4.2 데이터베이스 스키마 자동 생성
    4.3 필드와 칼럼 매핑
    4.4 기본 키 매핑
    4.5 실전 예제 - 1.요구사항 분석과 기본 매핑


    4.1 객체와 테이블 매핑
        - 엔티티 매핑 소개
            - 객체와 테이블 매핑: @Entity, @Table
            - 필드와 컬럼 매핑: @Column
            - 기본 키 매핑: @Id
            - 연관관계 매핑: @ManyToOne,@JoinColumn

        - @Entity
            - @Entity 가 붙은 클래스는 JPA 가 관리, 엔티티라 한다.
            - JPA 를 사용해서 테이블과 매핑할 클래스는 @Entity 필수
            - 주의
                - 기본 생성자 필수(파라미터가 없는 public 또는 protected 생성자)
                - final 클래스, enum, interface, inner 클래스 사용 x
                - 저장할 필드에 final 사용 x

            - 속성: name
                - JPA 에서 사용할 엔티티 이름을 지정
                - 기본값: 클래스 이름을 그대로 사용
                - 같은 클래스 이름이 없으면 가급적 기본값을 사용

        - @Table
            - 엔티티와 매핑할 테이블 지정

    4.2 데이터베이스 스키마 자동 생성
        - DDL 을 애플리케이션 실행 시점에 자동 생성
        - 테이블 중심 -> 객체 중심
        - 데이터베이스 방언을 활용해서 데이터베이스에 맞는 적절한 DDL 생성
        - 이렇게 생성된 DDL 은 개발 장비에서만 사용
        - 생성된 DDL 은 운영서버에서는 사용하지 않거나, 적절히 다듬은 후 사용

        - 속성
            create: 기존테이블 삭제 후 다시 생성 (DROP + CREATE)
            create-drop: create 와 같으나 종료시점에 테이블 DROP
            update: 변경분만 반영(운영 DB 에는 사용하면 안됨)
            validate: 엔티티와 테이블이 정상 매핑되었는지만 확인
            none: 사용하지 않음
        - 운영 장비에는 절대 create, create-drop, update 사용하면 안된다.
        - 개발 초기 단계는 create 또는 update
          테스트 서버는 update 또는 validate
          스테이징과 운영 서버는 validate 또는 none

        - DDL 생성 기능
            - 제약조건 추가: 회원 이름은 필수, 10자 초과X
              @Column(nullable = false, length = 10)
            - 유니크 제약조건 추가
              @Table(uniqueConstraints = {@UniqueConstraint( name = "NAME_AGE_UNIQUE", columnNames = {"NAME", "AGE"} )})
            - DDL 생성 기능은 DDL 을 자동 생성할 때만 사용되고 JPA 의 실행 로직에는 영향을 주지 않는다.

    4.3 필드와 칼럼 매핑
        - 매핑 어노테이션 정리
            @Column: 컬럼 매핑
            @Temporal: 날짜 타입 매핑
                - 날짜 타입(java.util.Date, java.util.Calendar)을 매핑할 때 사용
                  TemporalType.DATE: 날짜, 데이터베이스 date 타입과 매핑
                  TemporalType.TIME: 시간, 데이터베이스 time 타입과 매핑
                  TemporalType.TIMESTAMP: 날짜와 시간, 데이터베이스 timestamp 타입과 매핑
            @Enumerated: enum 타입 매핑
                - 주의! ORDINAL 사용X
                - EnumType.ORDINAL: enum 순서를 데이터베이스에 저장
                  EnumType.STRING: enum 이름을 데이터베이스에 저장
                - 기본값: EnumType.ORDINAL
            @Lob: BLOB, CLOB 매핑
                - @Lob 에는 지정할 수 있는 속성이 없다.
                - 매핑하는 필드 타입이 문자면 CLOB 매핑, 나머지는 BLOB 매핑
                    - CLOB: String, char[], java.sql.CLOB
                    - BLOB: byte[], java.sql. BLOB
            @Transient: 특정 필드를 컬럼에 매핑하지 않음(매핑 무시)
                - 필드 매핑X
                - 데이터베이스에 저장X, 조회X
                - 주로 메모리상에서만 임시로 어떤 값을 보관하고 싶을 때 사용
                - @Transient
                  private Integer temp;

    4.4 기본 키 매핑
        - @Id, @GeneratedValue
        - 직접 할당: @Id 만 사용
        - 자동 생성: @GeneratedValue
            - IDENTITY: 데이터베이스에 위임, MYSQL
                - 주로 MySQL, PostgreSQL, SQL Server, DB2에서 사용
                - (예: MySQL 의 AUTO_ INCREMENT)
                - JPA 는 보통 트랜잭션 커밋 시점에 INSERT SQL 실행
                - AUTO_ INCREMENT 는 데이터베이스에 INSERT SQL 을 실행 한 이후에 ID 값을 알 수 있음
                - IDENTITY 전략은 em.persist() 시점에 즉시 INSERT SQL 실행 하고 DB 에서 식별자를 조회

            - SEQUENCE: 데이터베이스 시퀀스 오브젝트 사용, ORACLE
                - @SequenceGenerator 필요
                - 오라클, PostgreSQL, DB2, H2 데이터베이스에서 사용

            - TABLE: 키 생성용 테이블 사용, 모든 DB 에서 사용
                - @TableGenerator 필요

            - AUTO: 방언에 따라 자동 지정, 기본값

    4.5 실전 예제 - 1.요구사항 분석과 기본 매핑
        - 데이터 중심 설계의 문제점
            - 현재 방식은 객체 설계를 테이블 설계에 맞춘 방식
            - 테이블의 외래키를 객체에 그대로 가져옴
            - 객체 그래프 탐색이 불가능
            - 참조가 없으므로 UML 도 잘못됨
