8.프록시와 연관관계 관리
    8.1 프록시
    8.2 즉시 로딩과 지연로딩
    8.3 지연로딩 활용
    8.4 영속성 전이: CASCADE
    8.5 고아 객체
    8.6 영속성 전이 + 고아 객체, 생명주기


    8.1 프록시
        - 프록시 기초
            - em.find() vs em.getReference()
            - em.find(): 데이터베이스를 통해서 실제 엔티티 객체 조회
            - em.getReference(): 데이터베이스 조회를 미루는 가짜(프록시) 엔티티 객체 조회

        - 프록시 특징
            - 실제 클래스를 상속 받아서 만들어짐
            - 실제 클래스와 겉 모양이 같다
            - 사용하는 입장에서는 진짜 객체인지 프록시 객체인지 구분하지 않고 사용하면 됨(이론상)
            - 프록시 객체는 실제 객체의 참조(target)를 보관
            - 프록시 객체를 호출하면 프록시 객체는 실제 객체의 메소드 호출

        - 프록시 객체의 초기화
            - Member member = em.getReference(Member.class, “id1”);
              member.getName();

            1.getName() - 처음에 target 에 값이 없음
            2.초기화 요청 - 영속성 컨텍스트에 초기화 요청
            3.DB 조회
            4.실제 Entity 생성
            5.target.getName() - 실제 Entity 와 target 이랑 연결시켜줌

        - 프록시의 특징
            - 프록시 객체는 처음 사용할 때 한 번만 초기화
            - 프록시 객체를 초기화 할 때, 프록시 객체가 실제 엔티티로 바뀌는 것은 아님,
              초기화되면 프록시 객체를 통해서 실제 엔티티에 접근 가능
            - 프록시 객체는 원본 엔티티를 상속받음, 따라서 타입 체크시 주의해야함 (== 비교 실패, 대신 instance of 사용)
            - 영속성 컨텍스트에 찾는 엔티티가 이미 있으면 em.getReference()를 호출해도 실제 엔티티 반환
                - 이미 영속성 컨텍스트에 올라가 있으므로 프록시를 거칠 필요없이 바로 가져오는게 성능 최적화상 낫다.
                - 한 컨텍스트 안에서 가져온 거고 pk도 같으면 jpa 는 == 를 항상 true 로 반환해줘야 한다.
                - 프록시로 한번 조회가 되면 그 뒤에 em.find 를 써도 프록시 객체로 반환해버린다.
                -> 객체든 프록시든 상관없이 개발할 수 있게 하기 위해서
            - 영속성 컨텍스트의 도움을 받을 수 없는 준영속 상태일 때, 프록시를 초기화하면 문제 발생

        - 프록시 확인
            - 프록시 인스턴스의 초기화 여부 확인
              PersistenceUnitUtil.isLoaded(Object entity)

            - 프록시 클래스 확인 방법
              entity.getClass().getName() 출력(..javasist.. or HibernateProxy…)

            - 프록시 강제 초기화
              org.hibernate.Hibernate.initialize(entity);

    8.2 즉시 로딩과 지연로딩
        - Member 를 조회할 때 Team 도 함께 조회해야 할까?
        - 지연 로딩 LAZY 을 사용해서 프록시로 조회
            - Member member = em.find(Member.class, 1L);

              Team team = member.getTeam();
              team.getName(); // 실제 team 을 사용하는 시점에 초기화(DB 조회)

        - Member 와 Team 을 자주 함께 사용한다면?
            - 즉시 로딩 EAGER 를 사용해서 함께 조회
            - JPA 구현체는 가능하면 조인을 사용해서 SQL 한번에 함께 조회

        - 프록시와 즉시로딩 주의
            - 가급적 지연 로딩만 사용(특히 실무에서)
            - 즉시 로딩을 적용하면 예상하지 못한 SQL 이 발생
            - 즉시 로딩은 JPQL 에서 N+1 문제를 일으킨다.
            - @ManyToOne, @OneToOne 은 기본이 즉시 로딩
              -> LAZY 로 설정
            - @OneToMany, @ManyToMany 는 기본이 지연 로딩

    8.3 지연로딩 활용
        - 모든 연관관계에 지연 로딩을 사용해라!
        - 실무에서 즉시 로딩을 사용하지 마라!
        - JPQL fetch 조인이나, 엔티티 그래프 기능을 사용해라!

    8.4 영속성 전이: CASCADE
        - 특정 엔티티를 영속 상태로 만들 때 연관된 엔티티도 함께 영속상태로 만들도 싶을 때
        - 예: 부모 엔티티를 저장할 때 자식 엔티티도 함께 저장.

        - 영속성 전이: CASCADE - 주의
            - 영속성 전이는 연관관계를 매핑하는 것과 아무 관련이 없음
            - 엔티티를 영속화할 때 연관된 엔티티도 함께 영속화하는 편리함을 제공할 뿐
            - 소유자가 하나 일 떄 cascade 써도 됨 (참조하는 곳이 하나 일 때)

        - CASCADE 의 종류
            - ALL: 모두 적용
            - PERSIST: 영속
            - REMOVE: 삭제
            - MERGE: 병합
            - REFRESH: REFRESH
            - DETACH: DETACH

            * 저장할 떄만 쓰고 싶으면 PERSIST
              -> 저장할 때만 라이프 사이클을 맞추고 나머지는 따로 가는 것.
              아니면 ALL
              -> 라이프 사이클을 다 맞추는 것

        - CASCADE 사용조건
            1.parent 와 child 의 라이프 사이클이 같을 때
             (거의 유사할 떄 - 등록/삭제시)
            2.단일 소유자 일 때

    8.5 고아 객체
        - 고아 객체 제거: 부모 엔티티와 연관관계가 끊어진 자식 엔티티를 자동으로 삭제
        - orphanRemoval = true

        - 주의
            - 참조가 제거된 엔티티는 다른 곳에서 참조하지 않는 고아 객체로 보고 삭제하는 기능
            - 참조하는 곳이 하나일 때 사용해야함!
            - 특정 엔티티가 개인 소유할 때 사용
            - @OneToOne, @OneToMany 만 가능

        - 이것은 CascadeType.REMOVE 처럼 동작한다.

    8.6 영속성 전이 + 고아 객체, 생명주기
        - CascadeType.ALL + orphanRemoval=true
        - 스스로 생명주기를 관리하는 엔티티는 em.persist()로 영속화, em.remove()로 제거
        - 두 옵션을 모두 활성화 하면 부모 엔티티를 통해서 자식의 생명 주기를 관리할 수 있음
        - 도메인 주도 설계(DDD)의 Aggregate Root 개념을 구현할 때 유용
