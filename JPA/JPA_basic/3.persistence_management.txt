3.영속성 관리
    - 영속성 컨텍스트
        - JPA 에서 가장 중요한 2가지
            - 객체와 관계형 데이터베이스 매핑하기
            - 영속성 컨텍스트
        - 엔티티를 영구 저장하는 환경
        - EntityManager.persist(entity);
        - 영속성 컨텍스트는 논리적인 개념
        - 엔티티 매니저를 통해서 영속성 컨텍스트에 접근
        - 엔티티 매니저와 영속성 컨텍스트가 N:1

    - 엔티티의 생명주기
        - 비영속 (new/transient): 영속성 컨텍스트와 전혀 관계가 없는 새로운 상태
        - 영속 (managed): 영속성 컨텍스트에 관리되는 상태
        - 준영속 (detached): 영속성 컨텍스트에 저장되었다가 분리된 상태
        - 삭제 (remove): 삭제된 상태

        - //객체를 생성한 상태(비영속)
          Member member = new Member();
          member.setId("member1");
          member.setUsername(“회원1”);
          EntityManager em = emf.createEntityManager();
          em.getTransaction().begin();

          //객체를 저장한 상태(영속)
          em.persist(member);

          //회원 엔티티를 영속성 컨텍스트에서 분리, 준영속 상태
          em.detach(member);

          //객체를 삭제한 상태(삭제)
          em.remove(member);

    - 영속성 컨텍스트의 이점
        - 1차 캐시
            - //1차 캐시에 저장됨
              em.persist(member);

              //1차 캐시에서 조회
              Member findMember = em.find(Member.class, "member1");

            1. find('member1') 1차 캐시에 없음
            2. DB 조회
            3. 1차 캐시에 저장
            4. 반환

        - 동일성(identity) 보장
            - 같은 트랜잭션 안에서 실행되는 것
            - Member a = em.find(Member.class, "member1");
              Member b = em.find(Member.class, "member1");
              System.out.println(a == b); //동일성 비교 true

        - 트랜잭션을 지원하는 쓰기 지연 (transactional write-behind)
            - EntityManager em = emf.createEntityManager();
              EntityTransaction transaction = em.getTransaction();
              //엔티티 매니저는 데이터 변경시 트랜잭션을 시작해야 한다.
              transaction.begin(); // [트랜잭션] 시작

              em.persist(memberA);
              em.persist(memberB);
              //여기까지 INSERT SQL 을 데이터베이스에 보내지 않는다.
              //INSERT SQL 생성해서 쓰기 지연 SQL 저장소에 넣어둔다.
              //1차 캐시에 넣어둔다.

              //커밋하는 순간 데이터베이스에 INSERT SQL 을 보낸다. (commit() -> flush -> commit)
              transaction.commit(); // [트랜잭션] 커밋

        - 변경 감지 (Dirty Checking)
            1.flush()
            2.엔티티와 스냅샷 비교
                - 값을 읽어온 최초 시점.
                - 최초로 영속성 컨텍스트에 들어온 시점 (1차 캐시)
            3.UPDATE SQL 생성
            4.flush
            5.commit

        - 지연 로딩 (Lazy Loading)

    - 플러시
        - 영속성 컨텍스트의 변경내용을 데이터베이스에 반영
        - 트랜잭션이 커밋되면 플러시가 자동으로 발생
        - 변경 감지
        - 수정된 엔티티를 쓰기 지연 SQL 저장소에 등록
        - 플러시가 발생한다고 해서 1차 캐시가 지워지거나 하지는 않음
        - 쓰기 지연 SQL 저장소의 쿼리를 데이터베이스에 전송

    - 영속성 컨텍스트를 플러시하는 방법
        - em.flush() - 직접 호출
        - 트랜잭션 커밋 - 플러시 자동 호출
        - JPQL 쿼리 실행 - 플러시 자동 호출

    - 플러시 모드 옵션
        - em.setFlushMode(FlushModeType.COMMIT)
        - FlushModeType.AUTO
          커밋이나 쿼리를 실행할 때 플러시 (기본값)
        - FlushModeType.COMMIT
          커밋할 때만 플러시

    - 플러시
        - 영속성 컨텍스트를 비우지 않음
        - 영속성 컨텍스트의 변경내용을 데이터베이스에 동기화
        - 트랜잭션이라는 작업 단위가 중요 -> 커밋 직전에만 동기화하면 됨
        - 영속성 컨텍스트랑 트랜잭션 주기를 맞춰서 설계해야 문제가 없다.

    - 준영속 상태
        - 영속 -> 준영속
        - 영속 상태의 엔티티가 영속성 컨텍스트에서 분리 (detached)
        - 영속성 컨텍스트가 제공하는 기능을 사용 못함

    - 준영속 상태로 만드는 방법
        - em.detach(entity)
          특정 엔티티만 준영속 상태로 전환
        - em.clear()
          영속성 컨텍스트를 완전히 초기화
        - em.close()
          영속성 컨텍스트를 종료