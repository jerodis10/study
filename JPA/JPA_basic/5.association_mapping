5.연관관계 매핑 기초
    - 목표
        - 객체와 테이블 연관관계의 차이를 이해
        - 객체의 참조와 테이블의 외래 키를 매핑

    5.1 연관관계가 필요한 이유
    5.2 단방향 연관관계
    5.3 양방향 연관관계와 연관관계의 주인


    5.1 연관관계가 필요한 이유
        * 객체지향 설계의 목표는 자율적인 객체들의 협력 공동체를 만드는 것이다.

        - 객체를 테이블에 맞추어 데이터 중심으로 모델링하면, 협력 관계를 만들 수 없다.
            - 테이블은 외래 키로 조인을 사용해서 연관된 테이블을 찾는다.
            - 객체는 참조를 사용해서 연관된 관계를 찾는다.
            - 테이블과 객체 사이에는 이런 큰 간격이 있다.

    5.2 단방향 연관관계
        - 객체 지향 모델링
            - 객체의 참조와 테이블의 외래 키를 매핑
              @ManyToOne
              @JoinColumn(name = "TEAM_ID")
              private Team team;

            - 연관관계 저장
              //팀 저장
              Team team = new Team();
              team.setName("TeamA");
              em.persist(team);

              //회원 저장
              Member member = new Member();
              member.setName("member1");
              member.setTeam(team); //단방향 연관관계 설정, 참조 저장
              em.persist(member);

            - 참조로 연관관계 조회 - 객체 그래프 탐색
              //조회
              Member findMember = em.find(Member.class, member.getId());

              //참조를 사용해서 연관관계 조회
              Team findTeam = findMember.getTeam();

            - 연관관계 수정
              // 새로운 팀B
              Team teamB = new Team();
              teamB.setName("TeamB");
              em.persist(teamB);

              // 회원1에 새로운 팀B 설정
              member.setTeam(teamB);

    5.3 양방향 연관관계와 연관관계의 주인
        - Team 엔티티는 컬렉션 추가
          @OneToMany(mappedBy = "team")
          List<Member> members = new ArrayList<Member>();

        - 반대 방향으로 객체 그래프 탐색
          // 조회
          Team findTeam = em.find(Team.class, team.getId());
          int memberSize = findTeam.getMembers().size(); // 역방향 조회

        - 연관관계의 주인과 mappedBy
            - 객체와 테이블이 관계를 맺는 차이
                - 객체 연관관계 = 2개
                    - 회원 -> 팀 연관관계 1개(단방향)
                    - 팀 -> 회원 연관관계 1개(단방향)
                - 테이블 연관관계 = 1개
                    - 회원 <-> 팀의 연관관계 1개(양방향)
            - 객체의 양방향 관계는 사실 양방향 관계가 아니라 서로 다른 단뱡향 관계 2개다.
            - 테이블은 외래 키 하나로 두 테이블의 연관관계를 관리
            - 둘 중 하나로 외래 키를 관리해야 한다.

            - 연관관계의 주인(Owner)
                - 양방향 매핑 규칙
                    - 객체의 두 관계중 하나를 연관관계의 주인으로 지정
                    - 연관관계의 주인만이 외래 키를 관리(등록, 수정)
                    - 주인이 아닌쪽은 읽기만 가능
                    - 주인은 mappedBy 속성 사용X
                    - 주인이 아니면 mappedBy 속성으로 주인 지정
                - 누구를 주인으로?
                    - 외래 키가 있는 있는 곳을 주인으로 정해라
                    - 여기서는 Member.team 이 연관관계의 주인
                - 양방향 매핑시 가장 많이 하는 실수
                    - 연관관계의 주인에 값을 입력하지 않음
                      역방향(주인이 아닌 방향)만 연관관계 설정
                      team.getMembers().add(member);
                    - 순수한 객체 관계를 고려하면 항상 양쪽다 값을 입력해야 한다.
                      team.getMembers().add(member);
                      //연관관계의 주인에 값 설정
                      member.setTeam(team);

                - 양방향 연관관계 주의
                    - 순수 객체 상태를 고려해서 항상 양쪽에 값을 설정하자
                    - 연관관계 편의 메소드를 생성하자
                        - 연관관계 편의메소드가 양쪽에 있으면 문제를 일으킬 수 있으니 둘 중 한 곳에만 만들어야 함. 비즈니스 로직마다 달라짐.
                          연관관계 주인인 곳에 먼저 고려.
                    - 양방향 매핑시에 무한 루프를 조심하자
                        - 예: toString(), lombok, JSON 생성 라이브러리

                - 컨트롤러에서 엔티티 자체를 api 스펙으로 반환하면 두 가지 문제 발생.
                  1. json 생성 무한루프 생길  수 있음.
                  2. 엔티티를 변경하는 순간 api 스펙이 바뀌어 버림.
                    => 따라서 엔티티는 DTO 로 변환을 해서 반환하는 것을 추천.

                - 양방향 매핑 정리
                    - 단방향 매핑만으로도 이미 연관관계 매핑은 완료
                    - 양방향 매핑은 반대 방향으로 조회(객체 그래프 탐색) 기능이 추가된 것 뿐
                    - JPQL 에서 역방향으로 탐색할 일이 많음
                    - 단방향 매핑을 잘 하고 양방향은 필요할 때 추가해도 됨 (테이블에 영향을 주지 않음)

                - 연관관계의 주인을 정하는 기준
                    - 비즈니스 로직을 기준으로 연관관계의 주인을 선택하면 안됨
                    - 연관관계의 주인은 외래 키의 위치를 기준으로 정해야함
