10.객체지향 쿼리 언어(JPQL)
    10.1 객체지향 쿼리 언어 소개
    10.2 기본 문법과 기능
    10.3 경로 표현식
    10.4 페치 조인
    10.5 다형성 쿼리
    10.6 엔티티 직접 사용
    10.7 Named 쿼리
    10.8 벌크 연산


    10.1 객체지향 쿼리 언어 소개
        - JPA 는 다양한 쿼리 방법을 지원
            - JPQL
                - 가장 단순한 조회 방법
                    - EntityManager.find()
                    - 객체 그래프 탐색(a.getB().getC())
                - JPA 를 사용하면 엔티티 객체를 중심으로 개발
                - 문제는 검색 쿼리
                - 검색을 할 때도 테이블이 아닌 엔티티 객체를 대상으로 검색
                - 모든 DB 데이터를 객체로 변환해서 검색하는 것은 불가능
                - 애플리케이션이 필요한 데이터만 DB 에서 불러오려면 결국 검색 조건이 포함된 SQL 이 필요
                - JPA 는 SQL 을 추상화한 JPQL 이라는 객체 지향 쿼리 언어 제공
                - SQL 과 문법 유사, SELECT, FROM, WHERE, GROUP BY, HAVING, JOIN 지원
                - JPQL 은 엔티티 객체를 대상으로 쿼리 (테이블이 아닌 객체를 대상으로 검색하는 객체 지향 쿼리)
                - SQL 은 데이터베이스 테이블을 대상으로 쿼리
                - SQL 을 추상화해서 특정 데이터베이스 SQL 에 의존X
                - JPQL 을 한마디로 정의하면 객체 지향 SQL

            - JPA Criteria
                - 문자가 아닌 자바코드로 JPQL 을 작성할 수 있음
                - JPQL 빌더 역할
                - JPA 공식 기능
                - 단점: 너무 복잡하고 실용성이 없다.
                - Criteria 대신에 QueryDSL 사용 권장
                - 자바코드로 짜기 때문에 컴파일 오류가 나므로 sql 문법 때문에 오류 날 일은 없다.

            - QueryDSL
                - 문자가 아닌 자바코드로 JPQL 을 작성할 수 있음
                - JPQL 빌더 역할
                - 컴파일 시점에 문법 오류를 찾을 수 있음
                - 동적쿼리 작성 편리함
                - 단순하고 쉬움
                - 실무 사용 권장

            - 네이티브 SQL
                - JPA 가 제공하는 SQL 을 직접 사용하는 기능
                - JPQL 로 해결할 수 없는 특정 데이터베이스에 의존적인 기능
                - 예) 오라클 CONNECT BY, 특정 DB만 사용하는 SQL 힌트

            - JDBC API 직접 사용, MyBatis, SpringJdbcTemplate 함께 사용
                - JPA 를 사용하면서 JDBC 커넥션을 직접 사용하거나, 스프링 JdbcTemplate, 마이바티스등을 함께 사용 가능
                - 단, 영속성 컨텍스트를 적절한 시점에 강제로 플러시 필요
                - 예) JPA 를 우회해서 SQL 을 실행하기 직전에 영속성 컨텍스트 수동 플러시

    10.2 기본 문법과 기능
        - 엔티티와 속성은 대소문자 구분O (Member, age)
        - JPQL 키워드는 대소문자 구분X (SELECT, FROM, where)
        - 엔티티 이름 사용, 테이블 이름이 아님(Member)
        - 별칭은 필수(m) (as는 생략가능)
        - 집합과 정렬
            - select
                  COUNT(m), //회원수
                  SUM(m.age), //나이 합
                  AVG(m.age), //평균 나이
                  MAX(m.age), //최대 나이
                  MIN(m.age) //최소 나이
              from Member m
            - GROUP BY, HAVING
            - ORDER BY

        - TypeQuery: 반환 타입(엔티티)이 명확할 때 사용
            - TypedQuery<Member> query = em.createQuery("SELECT m FROM Member m", Member.class);
        - Query: 반환 타입이 명확하지 않을 때 사용
            - Query query = em.createQuery("SELECT m.username, m.age from Member m");

        - 결과 조회 API
            - query.getResultList(): 결과가 하나 이상일 때, 리스트 반환
                - 결과가 없으면 빈 리스트 반환
            - query.getSingleResult(): 결과가 정확히 하나, 단일 객체 반환
                - 결과가 없으면: javax.persistence.NoResultException
                - 둘 이상이면: javax.persistence.NonUniqueResultException

        - 파라미터 바인딩 - 이름 기준, 위치 기준
            - SELECT m FROM Member m where m.username=:username
              query.setParameter("username", usernameParam);
            - SELECT m FROM Member m where m.username=?1
              query.setParameter(1, usernameParam);

        - 프로젝션
            - SELECT 절에 조회할 대상을 지정하는 것
            - 프로젝션 대상: 엔티티, 임베디드 타입, 스칼라 타입(숫자, 문자등 기본 데이터 타입)
            - SELECT m FROM Member m -> 엔티티 프로젝션
            - SELECT m.team FROM Member m -> 엔티티 프로젝션
            - SELECT m.address FROM Member m -> 임베디드 타입 프로젝션
            - select address from Address a
                -> 이렇게는 실행 x
                -> address 는 값 타입이므로 소속 엔티티를 정해줘야 함
            - SELECT m.username, m.age FROM Member m -> 스칼라 타입 프로젝션
            - DISTINCT 로 중복 제거

        - 프로젝션 - 여러 값 조회
            - SELECT m.username, m.age FROM Member m
            - 1. Query 타입으로 조회
            - 2. Object[] 타입으로 조회
            - 3. new 명령어로 조회
                - 단순 값을 DTO 로 바로 조회
                    - SELECT new jpabook.jpql.UserDTO(m.username, m.age) FROM Member m
                - 패키지 명을 포함한 전체 클래스 명 입력
                - 순서와 타입이 일치하는 생성자 필요

        - 페이징 API
            - JPA 는 페이징을 다음 두 API 로 추상화
            - setFirstResult(int startPosition) : 조회 시작 위치 (0부터 시작)
            - setMaxResults(int maxResult) : 조회할 데이터 수

        - 조인
            - 내부 조인: SELECT m FROM Member m [INNER] JOIN m.team t
            - 외부 조인: SELECT m FROM Member m LEFT [OUTER] JOIN m.team t
            - 세타 조인: select count(m) from Member m, Team t where m.username = t.name

        - 조인 - ON 절
            1. 조인 대상 필터링(JPA 2.1부터 지원)
                - JPQL: SELECT m, t FROM Member m LEFT JOIN m.team t on t.name = 'A'
                - SQL: SELECT m.*, t.* FROM Member m LEFT JOIN Team t ON m.TEAM_ID=t.id and t.name='A'

            2. 연관관계 없는 엔티티 외부 조인(하이버네이트 5.1부터)
                - JPQL: SELECT m, t FROM Member m LEFT JOIN Team t on m.username = t.name
                - SQL: SELECT m.*, t.* FROM Member m LEFT JOIN Team t ON m.username = t.name

        - 서브 쿼리
             - 서브쿼리 내에 메인 테이블을 서브쿼리 내로 끌고오면 성능 안좋음.
                - select m from Member m
                  where (select count(o) from Order o where m = o.member) > 0

        - 서브 쿼리 지원 함수
            - [NOT] EXISTS (subquery): 서브쿼리에 결과가 존재하면 참
                - {ALL | ANY | SOME} (subquery)
                - ALL 모두 만족하면 참
                - ANY, SOME: 같은 의미, 조건을 하나라도 만족하면 참
            - [NOT] IN (subquery): 서브쿼리의 결과 중 하나라도 같은 것이 있으면 참

        - 서브 쿼리 - 예제
            - select m from Member m
              where exists (select t from m.team t where t.name = ‘팀A')
            - select o from Order o
              where o.orderAmount > ALL (select p.stockAmount from Product p)
            - select m from Member m
              where m.team = ANY (select t from Team t)

        - JPA 서브 쿼리 한계
            - JPA 는 WHERE, HAVING 절에서만 서브 쿼리 사용 가능
            - SELECT 절도 가능(하이버네이트에서 지원)
            - FROM 절의 서브 쿼리는 현재 JPQL 에서 불가능
                - 조인으로 풀 수 있으면 풀어서 해결
                - 위 방법으로도 안되면 쿼리 두 번 날려서 해결 or api 내에서 해결

        - 조건식 - CASE 식
            - COALESCE: 하나씩 조회해서 null 이 아니면 반환
            - NULLIF: 두 값이 같으면 null 반환, 다르면 첫번째 값 반환
                - 사용자 이름이 ‘관리자’면 null 을 반환하고 나머지는 본인의 이름을 반환
                - select NULLIF(m.username, '관리자') from Member m

        - JPQL 기본 함수
            - CONCAT
            - SUBSTRING
            - TRIM
            - LOWER, UPPER
            - LENGTH
            - LOCATE
            - ABS, SQRT, MOD
            - SIZE, INDEX(JPA 용도)

        - 사용자 정의 함수 호출
            - 하이버네이트는 사용전 방언에 추가해야 한다.
            - 사용하는 DB 방언을 상속받고, 사용자 정의 함수를 등록한다.
            - select function('group_concat', i.name) from Item i

    10.3 경로 표현식
        - .(점)을 찍어 객체 그래프를 탐색하는 것

        - 상태 필드(state field): 단순히 값을 저장하기 위한 필드 (ex: m.username)
            - 경로 탐색의 끝, 탐색X

        - 연관 필드(association field): 연관관계를 위한 필드
            - 단일 값 연관 필드: @ManyToOne, @OneToOne, 대상이 엔티티(ex: m.team)
                - 묵시적 내부 조인(inner join) 발생, 탐색O
            - 컬렉션 값 연관 필드: @OneToMany, @ManyToMany, 대상이 컬렉션(ex: m.orders)
                - 묵시적 내부 조인 발생, 탐색X
                - FROM 절에서 명시적 조인을 통해 별칭을 얻으면 별칭을 통해 탐색 가능

            - 묵시적 내부조인 사용x 권장 -> 가급적 sql 과 형식 맞추기
            - 경로 탐색을 사용한 묵시적 조인 시 주의사항 -> 항상 내부 조인

    10.4 페치 조인
        - SQL 조인 종류X
        - JPQL 에서 성능 최적화를 위해 제공하는 기능
        - 연관된 엔티티나 컬렉션을 SQL 한 번에 함께 조회하는 기능
        - 페치 조인 ::= [ LEFT [OUTER] | INNER ] JOIN FETCH 조인경로

        - 엔티티 페치 조인
            - 회원을 조회하면서 연관된 팀도 함께 조회(SQL 한 번에)
            - SQL 을 보면 회원 뿐만 아니라 팀(T.*)도 함께 SELECT
            - [JPQL]
              select m from Member m join fetch m.team
            - [SQL]
              SELECT M.*, T.* FROM MEMBER M
              INNER JOIN TEAM T ON M.TEAM_ID=T.ID
            - 즉시 로딩이랑 비슷함.
            - 페치 조인은 쿼리로 내가 원하는 데로 어떤 객체 그래프를 한번에 조회할 건지 명시적으로 동적인 타이밍에 정할 수 있는 것.
            - 지연 로딩으로 세팅을 해도 fetch join 이 항상 우선

        - 페치 조인과 DISTINCT
            - JPQL 의 DISTINCT 2가지 기능 제공
                1. SQL 에 DISTINCT 를 추가
                2. 애플리케이션에서 엔티티 중복 제거

        - 페치 조인과 일반 조인의 차이
            - 일반 조인 실행시 연관된 엔티티를 함께 조회하지 않음
            - 단지 SELECT 절에 지정한 엔티티만 조회할 뿐
            - 페치 조인을 사용할 때만 연관된 엔티티도 함께 조회(즉시 로딩)
            - 페치 조인은 객체 그래프를 SQL 한번에 조회하는 개념
                - 연관관계를 찾아간다는 것 (객체 그래프 탐색)은 한번에 조회하겠다는 것 -> JPA 기본 설계 사상

        - 페치 조인의 특징과 한계
            - 페치 조인 대상에는 별칭을 줄 수 없다.
                - 하이버네이트는 가능, 가급적 사용X
                - 예외적으로 a -> b -> c 이런 식으로 fetch join 을 몇 단계로 가져갈 때 정도만 별칭 사용
            - 둘 이상의 컬렉션은 페치 조인 할 수 없다.
            - 컬렉션을 페치 조인하면 페이징 API(setFirstResult, setMaxResults)를 사용할 수 없다.
                - 일대일, 다대일 같은 단일 값 연관 필드들은 페치 조인해도 페이징 가능
                - 일대다 같은 컬렉셕은 하이버네이트에서 경고 로그를 남기고 메모리에서 페이징(매우 위험)
            - 연관된 엔티티들을 SQL 한 번으로 조회 - 성능 최적화
            - 엔티티에 직접 적용하는 글로벌 로딩 전략보다 우선함
                - @OneToMany(fetch = FetchType.LAZY) //글로벌 로딩 전략
            - 실무에서 글로벌 로딩 전략은 모두 지연 로딩
            - 최적화가 필요한 곳은 페치 조인 적용

        - 페치 조인 - 정리
            - 모든 것을 페치 조인으로 해결할 수 는 없음
            - 페치 조인은 객체 그래프를 유지할 때 사용하면 효과적
            - 여러 테이블을 조인해서 엔티티가 가진 모양이 아닌 전혀 다른
              결과를 내야 하면, 페치 조인 보다는 일반 조인을 사용하고 필요
              한 데이터들만 조회해서 DTO 로 반환하는 것이 효과적

            1.페치 조인을 써서 엔티티를 가져와서 그대로 쓴다.
            2. 페치 조인을 해서 그것을 애플리케이션에서 DTO 변환해서 반환.
            3.처음 JPQL 을 짤 때부터 new operation 으로 DTO 로 스위칭해서 가져온다.

    10.5 다형성 쿼리
        - TYPE
            - 조회 대상을 특정 자식으로 한정
                - 예) Item 중에 Book, Movie 를 조회해라
                - [JPQL]
                  select i from Item i
                  where type(i) IN (Book, Movie)
                - [SQL]
                  select i from i
                  where i.DTYPE in (‘B’, ‘M’)

        - TREAT(JPA 2.1)
            - 자바의 타입 캐스팅과 유사
            - 상속 구조에서 부모 타입을 특정 자식 타입으로 다룰 때 사용
            - FROM, WHERE, SELECT(하이버네이트 지원) 사용
            - 예) 부모인 Item 과 자식 Book 이 있다.
                - [JPQL]
                  select i from Item i
                  where treat(i as Book).auther = ‘kim’
                - [SQL]
                  select i.* from Item i
                  where i.DTYPE = ‘B’ and i.auther = ‘kim’

    10.6 엔티티 직접 사용
        - 엔티티 직접 사용 - 기본 키 값
            - JPQL 에서 엔티티를 직접 사용하면 SQL 에서 해당 엔티티의 기본 키 값을 사용
                - 엔티티 직접 사용 - 기본 키 값
                - 엔티티 직접 사용 - 외래 키 값

    10.7 Named 쿼리
        - 미리 정의해서 이름을 부여해두고 사용하는 JPQL
        - 정적 쿼리
        - 어노테이션, XML 에 정의
        - 애플리케이션 로딩 시점에 초기화 후 재사용
        - 애플리케이션 로딩 시점에 쿼리를 검증
        - XML 이 항상 우선권을 가진다.
        - 애플리케이션 운영 환경에 따라 다른 XML 을 배포할 수 있다.

    10.8 벌크 연산
        - 재고가 10개 미만인 모든 상품의 가격을 10% 상승하려면?
        - JPA 변경 감지 기능으로 실행하려면 너무 많은 SQL 실행
        - 쿼리 한 번으로 여러 테이블 로우 변경(엔티티)
        - executeUpdate()의 결과는 영향받은 엔티티 수 반환
        - UPDATE, DELETE 지원
        - INSERT(insert into .. select, 하이버네이트 지원)
        - 벌크 연산 주의
            - 벌크 연산은 영속성 컨텍스트를 무시하고 데이터베이스에 직접 쿼리
                1.벌크 연산을 먼저 실행
                2.벌크 연산 수행 후 영속성 컨텍스트 초기화