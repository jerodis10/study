- 힙 정렬(Heap Sort)에 대해 설명해주세요.
    - 정의
        - 삽입정렬을 보완한 알고리즘
        - 삽입 정렬이 어느 정도 정렬된 배열에 대해서는 대단히 빠른 것에 착안
            - 삽입 정렬의 최대 문제점: 요소들이 삽입될 때, 이웃한 위치로만 이동
            - 즉, 만약 삽입되어야 할 위치가 현재 위치에서 상당히 멀리 떨어진 곳이라면 많은 이동을 해야만 제자리로 갈 수 있다.
            - 삽입 정렬과 다르게 셸 정렬은 전체의 리스트를 한 번에 정렬하지 않는다.
        - 과정
            - 먼저 정렬해야 할 리스트를 일정한 기준에 따라 분류
            - 연속적이지 않은 여러 개의 부분 리스트를 생성
            - 각 부분 리스트를 삽입 정렬을 이용하여 정렬
            - 모든 부분 리스트가 정렬되면 다시 전체 리스트를 더 적은 개수의 부분 리스트로 만든 후에 알고리즘을 반복
            - 위의 과정을 부분 리스트의 개수가 1이 될 때까지 반복

    - 정점
        - 연속적이지 않은 부분 리스트에서 자료의 교환이 일어나면 더 큰 거리를 이동한다. 따라서 교환되는 요소들이 삽입 정렬보다는 최종 위치에 있을 가능성이 높아진다.
        - 부분 리스트는 어느 정도 정렬이 된 상태이기 때문에 부분 리스트의 개수가 1이 되게 되면 셸 정렬은 기본적으로 삽입 정렬을 수행하는 것이지만 삽입 정렬보다 더욱 빠르게 수행된다.
        - 알고리즘이 간단하여 프로그램으로 쉽게 구현할 수 있다.

    - 시간 복잡도
        - 평균: T(n) = O(n^1.5)
        - 최악의 경우: T(n) = O(n^2)


- HashMap에서 충돌이 발생한 경우 다양한 방법
    - Separate chaining : 추가적인 공간을 활용하여 해결하는 방식
    - Linked list 사용
    - Open addressing : 충돌 발생시 인접한 비어있는 공간에 저장
    - Linear pribing : 고정폭으로 이동하여 빈 공간을 찾음
    - Quadratic probing : 제곱수로 이동하여 빈 공간을 찾음
    - Double hashing : 또다른 hash function을 사용하여 빈 공간을 찾음


- 정렬 알고리즘
    - 정렬
        - 정렬이란? -> 데이터를 기준에 맞게 순서대로 배열하는 작업
        - 정렬을 하는 이유 -> 탐색에 용이하기 위해서

    - insertion Sort
    - Merge Sort
    - Quick Sort
    - java 에서의 Sort
        - Dual Pivot Quick Sort
            1. primitive 타입을 정렬할 때, Dual Pivot Quick Sort 를 사용
            2. 피봇을 하나만 쓰는 것보다 일반적으로 빠름
        - Tim Sort
            1. Object 타입을 정렬할 때, Tim Sort 를 사용
            2. 앞에서 봤던 Insertion Sort 와 Merge Sort 의 하이브리드한 형태
            3. Binary Insertion Sort 를 사용
            4. Merge Sort 와 같이 분할을 진행하다가 특정한 기준보다 작은 사이즈가 되면 분할을 멈춘 후, Binary Insertion Sort 를 이용
            5. 특정 병합 조건에 맞게 병합


- 배열과 연결리스트 차이는?
    배열은 인덱스를 가짐. 원하는 데이터를 한번에 접근하기 때문에 접근 속도 빠름.

    크기 변경이 불가능하며, 데이터 삽입 및 삭제 시 그 위치의 다음 위치부터 모든 데이터 위치를 변경해야 되는 단점 존재

    연결리스트는 인덱스 대신에 현재 위치의 이전/다음 위치를 기억함.

    크기는 가변적. 인덱스 접근이 아니기 때문에 연결되어 있는 링크를 쭉 따라가야 접근이 가능함. (따라서 배열보다 속도 느림)

    데이터 삽입 및 삭제는 논리적 주소만 바꿔주면 되기 때문에 매우 용이함

    데이터의 양이 많고 삽입/삭제가 없음. 데이터 검색을 많이 해야할 때 → Array
    데이터의 양이 적고 삽입/삭제 빈번함 → LinkedList


- Java HashMap 은 어떻게 동작하는가?
    https://d2.naver.com/helloworld/831311