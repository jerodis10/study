- 버블 정렬(Bubble Sort)에 대해 설명해주세요.
    - 서로 인접한 두 원소를 비교하여 정렬하는 알고리즘
    - 0번 인덱스부터 n-1번 인덱스까지 n번까지의 모든 인덱스를 비교하며 정렬합니다. 시간 복잡도는 O(n^2)입니다.


- 선택 정렬(Selection Sort)에 대해 설명해주세요.
    - 선택 정렬은 첫 번째 값을 두번째 부터 마지막 값까지 차례대로 비교하여 최솟값을 찾아 첫 번째에 놓고,
      두 번째 값을 세 번째 부터 마지막 값까지 비교하여 최솟값을 찾아 두 번째 위치에 놓는 과정을 반복하며 정렬하는 알고리즘
    - 시간복잡도는 O(n^2)


- 삽입 정렬(Injection Sort)에 대해 설명해주세요.
    - 삽입 정렬은 두 번째 값부터 시작해 그 앞에 존재하는 원소들과 비교하여 삽입할 위치를 찾아 삽입하는 정렬 알고리즘
    - 평균 시간복잡도는 O(n^2)이며, Best Case 의 경우 O(n)까지 높아질 수 있습니다.


- 힙 정렬(Heap Sort)에 대해 설명해주세요.
    - 힙 정렬은 주어진 데이터를 힙 자료구조로 만들어 최댓값 또는 최솟값부터 하나씩 꺼내서 정렬하는 알고리즘
    - 힙 정렬이 가장 유용한 경우는 전체를 정렬하는 것이 아니라 가장 큰 값 몇개만을 필요로 하는 경우
    - 시간 복잡도는 O(nlogn)


- 병합 정렬(Merge Sort)에 대해 설명해주세요.
    - 병합 정렬은 주어진 배열을 크기가 1인 배열로 분할하고 합병하면서 정렬을 진행하는 분할/정복 알고리즘
    - 시간 복잡도는 O(nlogn)


- 퀵 정렬(Quick Sort)에 대해 설명해주세요.
    - 퀵 정렬은 빠른 정렬 속도를 자랑하는 분할 정복 알고리즘 중 하나로 피봇을 설정하고 피봇보다 큰 값과 작은 값으로 분할하여 정렬
    - 병합정렬과 달리 리스트를 비균등하게 분할
    - 시간 복잡도는 O(nlogn)이며 worst case 경우 O(n^2)까지 나빠질 수 있습니다.







접근하기
    문제를 공격적으로 받아들이고 필요한 정보를 추가적으로 요구하여, 해당 문제에 대해 완벽하게 이해하는게 우선이다.
    해당 문제를 익숙한 용어로 재정의하거나 문제를 해결하기 위한 정보를 추출한다. 이 과정을 추상화라고 한다.
    추상화된 데이터를 기반으로 이 문제를 어떻게 해결할 지 계획을 세운다. 이 때 사용할 알고리즘과 자료구조를 고민한다.
    세운 계획에 대해 검증을 해본다. 수도 코드 작성도 해당될 수 있고 문제 출제자에게 의견을 물어볼 수도 있다.
    세운 계획으로 문제를 해결해본다. 해결이 안 된다면 앞선 과정을 되짚어본다.

생각할 때
    비슷한 문제를 생각해본다.
    단순한 방법으로 시작하여 점진적으로 개선해나간다.
    작은 값을 생각해본다.
    그림으로 그려본다.
    수식으로 표현해본다.
    순서를 강제해본다.
    뒤에서부터 생각해본다