- Design Pattern
    - SW 재사용성, 호환성, 유지 보수성을 보장.

    - 생성 패턴 (Creational) : 객체의 생성 방식 결정
    - 구조 패턴 (Structural) : 객체간의 관계를 조직
    - 행위 패턴 (Behavioral): 객체의 행위를 조직, 관리, 연합


- GOF 디자인 패턴  https://4z7l.github.io/2020/12/25/design_pattern_GoF.html
    - 23 가지의 디자인 패턴을 목적에 따라 3가지 유형으로 분류
        - 생성 패턴: 객체가 생성되는 과정의 유연성을 높이고 코드의 유지를 쉽게 하는 패턴
                   객체의 생성과 참조 과정을 캡슐화하여 객체가 생성되거나 변경되어도 프로그램 구조에 영향을 받지 않도록 하여 프로그램에 유연성을 더해준다.
            - 추상 팩토리 패턴, 빌더 패턴, 팩토리 메서드 패턴, 프로토타입 패턴, 싱글톤 패턴
        - 구조 패턴: 자료 구조나 인터페이스 등 프로그램의 구조를 설계하는데 활용하는 패턴. 클래스나 객체를 조합해 더 큰 구조를 만드는 패턴
            - 어댑터 패턴, 브리지 패턴, 컴포지트 패턴, 데코레이터 패턴, 파사드 패턴, 플라이웨이트 패턴, 프록시 패턴
        - 행위 패턴: 반복적으로 사용되는 객체들의 상호 작용을 패턴화. 객체나 클래스 사이의 알고리즘이나 책임 분배에 관련된 패턴
                   행위 패턴은 클래스나 객체들이 서로 상호작용하는 방법이나 어떤 태스크, 어떤 알고리즘을 어떤 객체에 할당하는 것이 좋을지를 정의하는 패턴
            - 책임 체인 패턴, 커맨드 패턴, 인터프리터 패턴, 중재자 패턴, 메멘토 패턴, 옵저버 패턴, 상태 패턴
              전략 패턴, 템플릿 메서드 패턴, 방문자 패턴

    -> 디자인 원칙을 떠올려보자. 변하는 것은 잘 변하지 않는 것과 분리해라. 즉, 변하는 녀석들을 캡슐화해라!


- 아키텍쳐 패턴 vs 디자인 패턴
      아키텍쳐 패턴은 디자인 패턴보다 상위 수준의 설계에 사용된다.
      아키텍쳐 패턴이 전체 시스템의 구조를 설계하기 위한 참조 모델이라면, 디자인 패턴은 서브시스템에 속하는 컴포넌트들끼리의 관계를 설계하기 위한 참조 모델이다.


- 전략 패턴이란?
    - 소프트웨어 디자인 패턴중 하나
    - 동일 계열의 알고리즘을 정의하고, 각 알고리즘을 캡슐화하며, 이 알고리즘들을 상호 교체가 가능하게 만든다.



