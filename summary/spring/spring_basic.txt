- 스프링
    - 스프링 버전

    - 스프링이란
        - 좋은 객체 지향 어플리케이션을 개발할 수 있도록 도와주는 프레임워크
        - 핵심 기술: 스프링 DI 컨테이너, AOP, 이벤트
        - 웹 기술: 스프링 MVC, 스프링 WebFlux
        - 데이터 접근 기술: 트랜잭션, JDBC, ORM 지원, XML 지원
        - 테스트: 스프링 기반 테스트 지원

    - 스프링과 스프링 부트 차이 (스프링 부트 이점)
        - 스프링을 편리하게 사용할 수 있도록 지원
        - Tomcat 같은 웹 서버를 내장해서 별도의 웹 서버를 설치하지 않아도 됨
        - 스타터를 통해 필요한 라이브러리들을 묶어서 패키지처럼 제공
        - @SpringBootApplication 으로 복잡한 환경설정 없이도 웹 어플리케이션을 만들고 실행.
          이 애노테이션으로 인해 자동설정 기능이 동작하여 수많은 빈들이 등록되고 동작.(@EnableAutoConfiguration)
        - https://wiper2019.tistory.com/207

    - 객체 지향 프로그래밍이란
        - 객체 지향 프로그래밍은 컴퓨터 프로그램을 명령어의 목록으로 보는 시각에서 벗어나 여러 개의 독립된 단위, 즉 "객체"들의 모임으로
          파악하고자 하는 것이다. 각각의 객체는 메시지를 주고받고, 데이터를 처리할 수 있다.
        - 객체 지향 프로그래밍은 프로그램을 유연하고 변경이 용이하게 만들기 때문에 대규모 소프트웨어 개발에 많이 사용된다.

    - 좋은 객체 지향 설계의 5가지 원칙 (SOLID)
        1.SRP: 단일 책임 원칙
            - 한 클래스는 하나의 책임만 가져야 한다.
            - 하나의 책임이라는 것은 모호하다.
                - 클 수 있고, 작을 수 있다.
                - 문맥과 상황에 따라 다르다.
            - 중요한 기준은 변경이다. 변경이 있을 때 파급 효과가 적으면 단일 책임 원칙을 잘 따른 것
                ex) UI 변경, 객체의 생성과 사용을 분리

        2.OCP: 개방-폐쇄 원칙
            - 소프트웨어 요소는 확장에는 열려 있으나 변경에는 닫혀 있어야 한다.
            - 다형성 활용

        3.LSP: 리스코프 치환 원칙
            - 프로그램의 객체는 프로그램의 정확성을 깨뜨리지 않으면서 하위 타입의 인스턴스로 바꿀 수 있어야 한다.
            - 다향성에서 하위 클래스는 인터페이스 규약을 다 지켜야 한다는것, 다향성을 지원하기 위한 원칙
            - 인터페이스를 구현한 구현체는 믿고 사용하려면, 이 원칙이 필요하다.
            - 단순히 컴파일에 성공하는 것을 넘어서는 이야기
            ex) 자동차 인터페이스의 엑셀은 앞으로 가라는 기능, 뒤로 가게 구현하면 LSP 위반, 느리더라도 앞으로 가야함.

        4.ISP: 인터페이스 분리 원칙
            - 특정 클라이언트를 위한 인터페이스 여러 개가 범용 인터페이스 하나보다 낫다.
            ex) 자동차 인터페이스 -> 운전 인터페이스, 정비 인터페이스로 분리
                사용자 클라이언트 -> 운전자 클라이언트, 정비사 클라이언트
            - 분리하면 정비 인터페이스 자체가 변해도 운전자 클라이언트에 영향을 주지 않음
            - 인터페이스가 명확해지고, 대체 가능성이 높아진다.

        5.DIP: 의존관계 역전 원칙
            - 프로그래머는 "추상화에 의존해야지, 구체화에 의존하면 안된다."
            - 구현 클래스에 의존하지 말고, 인터페이스에 의존하라는 뜻.
            - 클라이언트가 인터페이스에 의존해야 유연하게 구현체를 변경할 수 있다.
            - 구현체에 의존하게 되면 변경이 아주 어려워 진다.

        * 인터페이스를 통한 다형성, 스프링의 DI 를 통해 역할과 구현을 분리하고
          그로 인해 OCP , DIP 원칙을 지킬 수 있다.
        => 이상적으로는 모든 설계에 인터페이스를 부여하자.
        => 하지만 인터페이스를 도입하면 추상화라는 비용이 발생한다.
        => 기능을 확장할 가능성이 없다면, 구현 클래스를 직접 사용하고, 향후 꼭 필요한 리팩터링해서 인터페이스를 도입하는 것도 방법.

    - DI
        자바 객체들을 컨테이너 안에 넣어두고 의존관계를 연결해주고 주입해주는 기능

    - AOP
        - 관심사의 분리
        - 제어의 역전 IoC
            - 프로그램 제어 흐름을 직접 제어하는 것이 아니라 외부에서 관리하는 것

    - 스프링 빈
        - 스프링 컨테이너와 스프링 빈
            - BeanFactory 라는 스프링 컨테이너의 최상위 인터페이스가 존재.
            - 스프링 빈을 관리하고, 조회하는 역할을 담당
            - BeanFactory 기능을 모두 상속받아서 국제화, 환경변수, 이벤트 등 부가 기능을 제공하는 것이 ApplicationContext
            - 스프링 컨테이너는 다양한 형식의 설정 정보를 BeanDefinition 으로 추상화해서 사용.
            - BeanDefinition 를 통해 빈 메타 정보를 생성하고 이걸 기반으로 스프링 빈 생성.

        - 싱글톤 컨테이너
            - 싱글톤 패턴
                - 클래스의 인스턴스가 한 자바 서버 안에서 딱 1개만 생선되는 것을 보장하는 디자인 패턴.
                - 싱글톤 패턴의 문제점
                    - 싱글톤 패턴을 구현하는 코드 자체가 많이 들어감
                    - DIP, OCP 원칙을 위반할 가능성이 높음.
                    - 테스트하기 어렵다.
                    - 내부 속성을 변경하거나 초기화 하기 어렵다.
                    - private 생성자로 자식 클래스를 만들기 어렵다.

            - 싱글톤 컨테이너
                - 싱글톤 패턴의 문제점을 해결하면서, 객체 인스턴스를 싱글톤으로 관리

            - @Configuration 과 싱글톤
                - 스프링이 CGLIB 라는 바이트코드 조작 라이브러리를 사용해서 Config 클래스를 상속받은
                  임의의 클래스를 만들고, 그 다른 클래스를 스프링 빈으로 등록한 것.
                - 이 임의의 다른 클래스가 바로 싱글톤이 보장.
                - @Bean 이 붙은 메서드마다 이미 스프링 빈이 존재하면 빈을 반환하고, 스프링 빈이 없으면 생성해서
                  스프링 빈으로 등록하고 반환하는 코드가 동적으로 만들어진다.

        - 빈 등록
            - 자동 빈 등록 -> @ComponentScan
                - includeFilters, excludeFilters 옵션으로 필터 가능
                - 스프링 부트는 컴포넌트 스캔을 기본으로 제공하는데, 개인적으로는 옵션을 변경하면서 사용하기보다는 스프링의 기본 설정에
                  최대한 맞추어 사용하는 것을 권장
            - 수동 빈 등록 -> @Configuration

            - @Bean vs @Component
                - @Bean 은 메소드 레벨에서 선언하며, 반환되는 객체(인스턴스)를 개발자가 수동으로 빈으로 등록하는 애노테이션이다.
                - @Component 는 클래스 레벨에서 선언함으로써 스프링이 런타임시에 컴포넌트스캔을 하여
                  자동으로 빈을 찾고(detect) 등록하는 애노테이션이다.
                - 개발자가 컨트롤이 불가능한 외부 라이브러리를 빈으로 등록하고 싶을때 @Bean 을 사용하며,
                  개발자가 직접 컨트롤이 가능한 클래스의 경우 @Component 를 사용

                - @Configuration 을 따로 만든 이유는 CGLib 으로 프록시 패턴을 적용해 수동으로 등록하는 스프링 빈이 반드시
                  싱글톤으로 생성됨을 보장하기 위해서
                - @Component 를 이용해 자동으로 빈 등록을 한다면 스프링이 해당 클래스의 객체의 생성을 제어하게 되고(제어의 역전, IoC)
                  1개의 객체만 생성되도록 컨트롤할 수 있다. 하지만 위의 클래스를 @Bean 을 사용해 직접 빈으로 등록해준다고 하자.
                  그러면 우리는 다음과 같이 해당 빈 등록 메소드를 여러 번 호출할 수 있게 된다.

                - https://mangkyu.tistory.com/75   https://mangkyu.tistory.com/234

            - 탐색 위치와 기본 스캔 대상
                - @Controller: 스프링 MVC 컨트롤러로 인식
                    - @Controller 의 역할은 Model 객체를 만들어 데이터를 담고 View 를 반환하는 것.
                    - @RestController 는 단순히 객체만을 반환하고 객체 데이터는 JSON 또는 XML 형식으로 HTTP 응답에 담아 전송
                        - RESTful 웹 서비스의 컨트롤러인 @RestController 의 주요한 차이점은 HTTP Response Body 가 생성되는 방식
                - @Repository: 스프링 데이터 접근 계층으로 인식하고, 데이터 계층의 예외를 스프링 예외로 변환해준다.
                - @Configuration: 스프링 설정 정보로 인식하고, 스프링 빈이 싱글톤을 유지하도록 추가 처리를 한다.
                - @Service: 사실 @Service 는 특별한 처리를 하지 않는다. 대신 개발자들이 핵심 비즈니스 로직이 여기에 있겠구나 라고
                  비즈니스 계층을 인식하는데 도움이 된다.

            - 중복 등록과 충돌
                - 자동 빈 등록 vs 자동 빈 등록
                    - 이름이 같은 경우 스프링은 오류를 발생시킨다.
                - 수동 빈 등록 vs 자동 빈 등록
                    - 수동 빈이 자동 빈을 오버라이딩 해버린다.
                    - 하지만 보통 여러 설정들이 꼬여서 버그가 발생하는 경우가 많다.

            - 조회 빈이 2개 이상 - 문제
                - @Autowired
                    - 타입 매칭을 시도하고, 이때 여러 빈이 있으면 필드 이름, 파라미터 이름으로 빈 이름을 매칭
                - @Qualifier
                    - @Qualifier 끼리 매칭
                    - 빈 이름 매칭
                    - noSuchBeanDefinitionException 예외 발생
                - @Primary
                    - @Autowired 시에 여러 빈이 매칭되면 @Primary 가 우선권을 가진다.

            => 애플리케이션에 광범위하게 영향을 미치는 기술 지원 객체는 수동 빈으로 등록해서 딱! 설정 정보에 바로 나타나게 하는
               것이 유지보수 하기 좋다.

        - 빈 생명주기 콜백
            - 스프링 빈의 이벤트 라이프사이클
                스프링 컨테이너 생성 -> 스프링 빈 생성 -> 의존관계 주입 -> 초기화 콜백 -> 사용 -> 소멸전 콜백 -> 스프링 종료
                (생성자 주입의 경우 스프링 빈 생성시, 필드나 세터 주입의 경우 의존관계 주입시 스프링 빈이 들어옴.)

            * 객체의 생성과 초기화를 분리하자
                - 생성자는 필수 정보(파라미터)를 받고, 메모리를 할당해서 객체를 생성하는 책임을 가진다. 반면에 초기화는
                  이렇게 생성된 값들을 활용해서 외부 커넥션을 연결하는등 무거운 동작을 수행한다.
                  따라서 생성자 안에서 무거운 초기화 작업을 함께 하는 것 보다는 객체를 생성하는 부분과 초기화 하는 부분
                  을 명확하게 나누는 것이 유지보수 관점에서 좋다. 물론 초기화 작업이 내부 값들만 약간 변경하는 정도로 단
                  순한 경우에는 생성자에서 한번에 다 처리하는게 더 나을 수 있다.

            - 애노테이션 @PostConstruct, @PreDestroy
                - 스프링에 종속적인 기술이 아니라 JSR-250 라는 자바 표준이다. 따라서 스프링이 아닌 다른 컨테이너에서도 동작한다.
                - 유일한 단점은 외부 라이브러리에는 적용하지 못한다는 것이다. 외부 라이브러리를 초기화, 종료 해야 하면
                  @Bean 의 initMethod , destroyMethod 를 사용하자.

        - 빈 스코프
            - 싱글톤: 기본 스코프, 스프링 컨테이너의 시작과 종료까지 유지되는 가장 넓은 범위의 스코프
            - 프로토타입: 스프링 컨테이너는 프로토타입 빈의 생성과 의존관계 주입까지만 관여하고 더는 관리하지 않는 매우 짧은 범위의 스코프
            - 웹 관련 스코프
                - request: 웹 요청이 들어오고 나갈 때까지 유지되는 스코프
                - session: 웹 세션이 생성되고 종료될 때까지 유지되는 스코프
                - application: 웹의 서블릿 컨텍스와 같은 범위로 유지되는 스코프

            - 프로토타입 스코프
                - 스프링 컨테이너는 프로토타입 빈을 생성하고, 의존관계 주입, 초기화까지만 처리한다는 것이다. 클라이언트에 빈을 반환하고,
                  이후 스프링 컨테이너는 생성된 프로토타입 빈을 관리하지 않는다. 프로토타입 빈을 관리할 책임은 프로토타입 빈을 받은
                  클라이언트에 있다. 그래서 @PreDestroy 같은 종료 메서드가 호출되지 않는다.

                - 싱글톤 빈과 함께 사용시 문제점
                    - 싱글톤에서 프로토타입 빈을 사용하게 되면 싱글톤 빈은 생성 시점에만 의존관계가 주입을 받기 때문에,
                      프로토타입 빈이 새로 생성되기는 하지만, 싱글톤 빈과 함께 계속 유지되는 것이 문제다.
                    - 지정한 빈을 컨테이너 대신 찾아주는 DL 서비스를 제공하는 것이 바로 ObjectProvider.
                      ObjectProvider 을 통해서 항상 새로운 프로토타입 빈을 생성

- 스프링 시큐리티
    - 스프링 시큐리티는 스프링 기반의 애플리케이션의 보안(인증과 권한, 인가 등)을 담당하는 스프링 하위 프레임워크입니다.
      즉 인증(Authenticate, 누구인지?) 과 인가(Authorize, 어떤것을 할 수 있는지?)를 담당하는 프레임워크를 말합니다.
    - 스프링 시큐리티에서는 주로 서블릿 필터(filter)와 이들로 구성된 필터체인으로의 구성된 위임모델을 사용합니다. 그리고 보안과 관련해서
      체계적으로 많은 옵션을 제공해주기 때문에 개발자 입장에서는 일일이 보안관련 로직을 작성하지 않아도 된다는 장점이 있습니다.

    기본용어
    접근 주체(Principal) : 보호된 리소스에 접근하는 대상
    인증(Authentication) : 보호된 리소스에 접근한 대상에 대해  누구인지, 애플리케이션의 작업을 수행해도 되는 주체인지 확인하는 과정
                            (ex. Form 기반 로그인) => 즉, 누구인지?
    인가(Authorize) : 해당 리소스에 대해 접근 가능한 권한을 가지고 있는지 확인하는 과정(After Authentication, 인증 이후)
                        => 즉, 어떤 것을 할 수 있는지?
    권한 : 어떠한 리소스에 대한 접근 제한, 모든 리소스는 접근 제어 권한이 걸려있음.
          인가 과정에서 해당 리소스에 대한 제한된 최소한의 권한을 가졌는지 확인

    - 보안과 관련하여 체계적으로 많은 옵션을 제공하여 편리하게 사용할 수 있음
    - Filter 기반으로 동작하여 MVC 와 분리하여 관리 및 동작
    - 어노테이션을 통한 간단한 설정
    - Spring Security 는 기본적으로 세션 & 쿠키방식으로 인증
    - 인증관리자(Authentication Manager)와 접근 결정 관리자(Access Decision Manager)를 통해 사용자의 리소스 접근을 관리
    - 인증 관리자는 UsernamePasswordAuthenticationFilter, 접근 결정 관리자는 FilterSecurityInterceptor 가 수행

    - Spring Security 를 사용하지 않으면
        자체적으로 세션을 체크해야 한다.
      redirect 를 일일이 설정해주어야 한다.
        로그인 완료 시 다음 화면으로 넘어가기 등


    - 스프링 시큐리티 가이드에서는 8가지 이유에 대해 스프링 시큐리티의 특징을 적어놓았다.
         모든 URL 에 대해서 인증을 요구한다.
         로그인 폼을 생성한다.
         기초적인 폼에 대해서 사용자 이름과 비밀번호를 요구한다.
         사용자에 대한 로그아웃 기능도 있다.
         CSRF(Cross Site Request Forgery) 공격을 방어한다.
         CSRF 공격이란 ? 사용자가 자신의 의지와는 무관하게 공격자가 의도한 행위(수정, 삭제, 등록 등)를 특정 웹사이트에 요청하게 하는 공격을 말한다.
         출처: https://swk3169.tistory.com/24 [swk의 지식저장소]
         Session Fixsation을 방어한다.
         공격자가 자신의 세션 id를 다른 사용자에게 줌으로써 공격하는 방법.
         요청 헤드 보안
         HSTS 강화
         강제적으로 HTTPS로 접속하도록 만드는 기
         https://m.blog.naver.com/PostView.nhn?blogId=aepkoreanet&logNo=221575708943&proxyReferer=https:%2F%2Fwww.google.com%2F
         X-Content-TypeOptions
         캐시 컨트롤(정적 리소스 캐싱)
         X-XSS-Protection XSS 보안
         스크립트 공격 보안
         클릭재킹을 보안하기 위한 X-Frame-Options 통
         웹 사용자가 자신이 클릭하고 있다고 인지하는 것과 다른 어떤 것을 클릭하게 속이는 악의적인 기법으로써 잠재적으로 공격자는 비밀 정보를 유출시키거나 그들의 컴퓨터에 대한 제어를 획득할 수 있게 된다
         Servlet API 제공

    - 동작 순서
        1. Http Request 수신
            (요청이 들어오면, 인증과 권한을 위한 필터들을 통하게 된다.)
        2. username 과 password 를 요청에서 추출하여 인증토큰(AuthenticationToken) 만들기
        3. Filter 를 통해 AuthenticationToken 을 AuthenticationManager 에 위임하여 인증 메소드 호출
        4. ProviderManager 에 의해 제공된 AuthenticationProvider 의 목록으로 인증을 시도한다.
        5. UserDetails 를 이용해서 User 객체에 대한 정보를 검색한다.
        6. DB 에서 User 객체에 매핑된 정보를 가져와 UserDetailsService(LoginService)에 전달한다.
        7. 전달된 User 객체의 정보와 사용자가 요청한 인증 정보(username, password)를 확인
        8. 유저의 인증이 성공하면, 전체 인증정보를 리턴한다.
           인증에 실패하면 AuthenticationException 을 던진다.
        9. AuthenticationManager 는 완전한 인증(Fully Populated Authentication)객체를 Authentication Filter 에 반환한다.
        10. AuthenticationFilter 는 인증 객체를 SecurityContext 에 저장한다.


        1. 사용자가 Form으로 로그인 정보를 입력하고 Http프로토콜로 인증요청을 Server로 보냄
        2. AuthenticationFilter (UsernamePasswordAuthenticationFilter)가 HttpServletRequest에서 사용자가 보낸 아이디와 패스워드를 인터셉트 함
        아이디와 패스워드 유효성 검사 이후 HttpServletRequest에서 사용자아이디, 패스워드 인증을 담당할 AuthenticationManager 인터페이스(Providermanager)에게 인증용 객체(UsernamePasswordAuthenticationToken)를 위함
        3. AuthenticationFilter 에 인증용 객체(UsernamePasswordAuthenticationToken) 전달
        4. 인증할 AuthenticationProvider에게 Authentication 객체 (UsernamePasswordAuthenticationToken) 다시전달 받음
        5. DB에서 사용자 인증정보를 가져올 UserDetailService에 유니크한 식별자(email, hp, name, id)를 전달 후
        사용자 정보(사용자아이디, 암호화된 패스워드, 권한)를 UserDetails(인증용 객체와 도메인 객체를 분리하지 않기 위해서 실제 사용되는 도메인 객체 UserDetails 상속하기도 함) 객체로 전달 받음
        6. AuthenticationProvider는 UserDetails 객체를 전달 받은 이후 실제 사용자의 입력정보와 UserDetails 객체를 가지고 인증 시도
        7,8,9 요청한 내용들을 기반으로 Response전달함.
        10. 인증이 완료되면 사용자 정보를 가진 Authentication 객체를 SecurityContextHolder에 담은 이후 AuthenticationSuccessHandle를 실행
        (실패시 AuthenticationFailureHandler 실행)

- 스프링 배치
    - 일괄 처리를 위한 오픈 소스 프레임워크
    - Spring Batch 는 엔터프라이즈 시스템의 운영에 있어 대용량 일괄처리의 편의를 위해 설계된 가볍고 포괄적인 배치 프레임워크다.
      Spring 의 특성을 그대로 가져왔기 때문에 DI, AOP, 서비스 추상화 등 Spring 프레임워크의 3대 요소를 모두 사용할 수 있다.
    - Spring batch 는 Spring MVC 처럼 개발자들이 온전히 비즈니스 로직의 개발에만 집중할 수 있도록 합니다. 이와 연결되는 사항 중 하나로
      바로 확장성과 안정성을 볼 수 있습니다. 과거 메인 프레임 방식이나 배치를 커스텀으로 개발해서 처리 했던 방식은 배치 내 Job 들의
      병렬 처리 시 고려할 사항이 많았습니다. 결국 이로 인해 배치 프로그램의 확장성과 안정성이 떨어지는 결과를 초래했고 Spring batch 는
      개발자들이 더 이상 이러한 부분에서 고민하지 않도록 만들어 준 것입니다.

    - 스프링 배치 사용 이유
        - 대용량의 비즈니스 데이터를 복잡한 작업으로 처리해야하는 경우
        - 특정한 시점에 스케쥴러를 통해 자동화된 작업이 필요한 경우 (ex. 푸시알림, 월 별 리포트)
        - 대용량 데이터의 포맷을 변경, 유효성 검사 등의 작업을 트랜잭션 안에서 처리 후 기록해야하는 경우
          Spring Batch 는 로깅/추적, 트랜잭션 관리, 작업 처리 통계, 작업 재시작, 건너뛰기, 리소스 관리 등 대용량 레코드 처리에
          필수적인 재사용 가능한 기능을 제공한다. 또한 최적화 및 파티셔닝 기술을 통해 대용량 및 고성능 일괄 작업을
          가능하게 하는 고급 기술 서비스 및 기능을 제공한다.

        - 일정 주기로 실행해야 할 떄
          실시간 처리가 어려운 대량의 데이터를 처리해야 할 때
          -> 이런 작업을 하나의 어플리케이션에서 수행하면 성능 저하를 유발할 수 있으니 배치 어플리케이션을구현

        - 트랜잭션 타임 아웃 발생 시 실패한 작업부터 재시도
        - 사용자의 접속이 거의 없는 시간대에 주기적인 시도

    - 스프링 배치 아키텍처
        Application : Spring Batch 를 사용하여 개발자가 작성한 모든 배치 작업과 사용자 정의 코드
        Batch Core : 배치 작업을 시작하고 제어하는 데 필요한 핵심 런타임 클래스를 포함
        Batch Infrastructure : 개발자와 애플리케이션에서 사용하는 일반적인 Reader 와 Writer
                               그리고 RetryTemplate 과 같은 서비스를 포함

        스프링 배치는 계층 구조가 위와 같이 설계되어 있기 때문에 개발자는 Application 계층의 비즈니스 로직에 집중할 수 있고,
        배치의 동작과 관련된 것은 Batch Core 에 있는 클래스들을 이용하여 제어할 수 있다.

- TDD
    - Junit4와 Junit5의 차이점
        - Junit4는 junit 라이브러리만 정의하면 되지만 junit5는 3가지의 모듈을 정의해야 한다.
            - junit platform : 테스트를 실행해주는 런처를 제공(일종의 컨텍스트), TestEngine API 제공(실제 구현체는 별도)
            - junit jupiter : TestEngine API 구현체
            - junit vintage : Junit4와 3을 지원하는 TestEngine 구현체
        - Spring Boot 2.2.0 버전부터 JUnit5가 기본으로 채택
        - Junit4는 자바5이상, Junit5는 자바 8이상 사용 가능
        - 어노테이션
            @Before	@BeforeEach
            @After 	@AfterEach
            @BeforeClass	@BeforeAll
            @AfterClass	@AfterAll
            @Ignore	@Disabled
            @RunWith	@ExtendWith
        - junit5에서는 public 을 사용하지 않아도 된다

    - 좋은 테스트
        - 좋은 테스트와 커버리즈는 완전별개, 테스트코드를 이상하게 짜놓고 초록불을 보는건 의미가 없음
          코드가 수정되었을때 만약에 발생하는 오류를 빨리 캐치할 수 있는 코드가 좋은 테스트 코드
        - 단위, 통합, 인수 테스트 존재
        - TDD 는 좋은 테스트를 판단하는 척도는 아닌듯(개발자 취향인듯) > 순서와 상관없이 테스트코드를 짜기만 하면 된다고 생각함
        - 테스트코드만을 봐도 로직을 이해할 수 있도록 좋은 네이밍, 깔끔한 코드작성 등을 지켜야 함

    - 테스트 코드를 어떻게 작성하는지
        Spring Rest Docs 작성을 위해 Mock 객체와 Fixture 데이터를 이용하여 컨트롤러 테스트를 작성합니다.
        유효성 검증같은 경우 단순 @NotNull 처리가 아닌 특정 필드값의 조건에 따라 유효성 검증 유무를 조사하는 등 복잡한 유효성 검증에 대해서만 테스트 코드를 작성합니다.
        비즈니스 로직을 위한 단위테스트를 작성합니다.
        public 메소드만을 테스트하며 private 는 따로 테스트하지 않습니다.
        마지막으로 H2 DB를 사용하거나 필요시 TestContainers 라이브러리를 사용하여 실제 운영 DB 환경과 동일하게 맞춘 후에 인수테스트를 작성합니다.

- 디자인 패턴
    - 템플릿 메소드 패턴
        Gof 의 디자인 패턴 중 하나로써, 알고리즘 구조에서 일부 기능을 자식 클래스가 확장할 수 있또록 템플릿을 제공하는 패턴입니다.
        즉, 공통된 기능은 부모 클래스에서 정의하고 자식 클래스마다 다른 기능들을 오버라이딩 가능하게끔 추상메서드로 열어둡니다.
        장점으로는 코드를 재사용하여 중복 코드를 줄일 수 있고, 공통된 기능이 바뀐다 하더라도 한번만 수정하면 됩니다.
        단점으로는 상속을 씀으로써 리스코프 치환원칙에 위반될 수 있는 가능성이 있습니다. 왜냐하면 하위클래스에서 오버라이딩 하여 기능을
        바꿀수 있기 때문입니다. 템플릿 부분은 final 로 막을 수 있지만 구현 클래스는 막을 수 없습니다.

        ※ 리스코프 치환 원칙이란?
        상속 구조에서 상위클래스의 타입으로 사용하는 코드에서 해당 코드를 하위클래스로 바꾸더라도 코드가 의도한대로 동작을 해야 한다.

        GoF의 디자인 패턴은 아니지만 스프링에서 자주 사용되는 템플릿 콜백 패턴이란게 있습니다.
        해당 패턴은 상속 대신 위임을 사용하는 패턴입니다. 그래서
        콜백 인터페이스를 만들고 해당 인터페이스를 구현하는 자식클래스를 만들던가, 내부클래스를 쓰던가, 람다식을 사용해서 유연하고 간결하게 적용할 수 있습니다.
        다만 전략패턴과는 달리 콜백 패턴은 반드시 하나의 메소드만을 가집니다.
        자바8에서 제공하는 기본 FunctionInterface 를 사용해도되고, 도메인을 명확하게 나타내고 싶으면 직접 인터페이스를 작성해도 됩니다.

- MSA
    독립적인 배포가 가능하며, 특정 도메인의 서비스를 배포한다해도 전체 서비스의 중단이 없습니다.
    서비스를 polyglot(폴리그랏)하게 개발 및 운영할 수 있습니다. 가령 채팅관련된 서비스는 노드JS 와 몽고DB 를 적용할 수 있습니다.
    팀 별로 서비스를 개발하는 분산형 개발로 효율적인 개발과 팀에서 맡은 도메인에 대한 이해만 하면 되는, 명확하게 경계가 식별되었기 때문에 유지보수하기 쉽습니다(?)

    단점은
    잘못된 경계설정은 모놀리식 패턴을 사용하는 것보다 더 나쁩니다.
    서비스간 API 를 호출하므로 네트워크 통신 비용이 듭니다.
    서비스에 따른 독립된 DB를 사용하고 있어 데이터 정합성, 트랜잭션을 유지하는 것이 복잡합니다.
    또한 생성되는 로그도 추적 및 모니터링 해야하는 세팅도 하는 등 개발 및 관리가 어렵습니다.

- POST, GET 리다이렉트 문제

- 크롤링
    - DFS, BFS
        - DFS/BFS 구현 방식