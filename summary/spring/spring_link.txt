******* [Spring Boot] logback과 Sentry를 활용하여 에러 모니터링하기
    https://zorba91.tistory.com/311

***** 이벤트 기반 아키텍처 구축
    https://techblog.woowahan.com/7835/
    https://www.youtube.com/watch?v=b65zIH7sDug&t=1035s

* CQRS
    https://www.youtube.com/watch?v=fg5xbs59Lro

***** MSA
    https://www.youtube.com/watch?v=BnS6343GTkY

***** domain
    https://www.youtube.com/watch?v=kmUneexSxk0

DDD
    https://www.youtube.com/watch?v=6w7SQ_1aJ0A&list=PL42XJKPNDepYXyKefvicxlA2fz1aThVs5&index=37

백엔드 운영과 개발 기법
    https://www.youtube.com/watch?v=2hCbY_mpqSg&list=PL42XJKPNDepYXyKefvicxlA2fz1aThVs5&index=3

***** MVC vs WebFlux 차이점
    https://pearlluck.tistory.com/726

* @ModelAttribute
    https://minchul-son.tistory.com/546

* @ModelAttribute, @RequestParam
    https://zzang9ha.tistory.com/298

* PUT vs PATCH
    https://tecoble.techcourse.co.kr/post/2020-08-17-put-vs-patch/

***** IoC, DI
    https://velog.io/@mooh2jj/Spring-Ioc-DI

***** 객체지향을 위한 SOLID 원칙
    https://velog.io/@mooh2jj/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%EC%84%A4%EA%B3%84-5%EC%9B%90%EC%B9%99-SOLID%EB%A5%BC-%ED%8C%8C%ED%9B%BC%EC%B3%90%EB%B3%B4%EC%9E%90

****** 스프링 Immutable으로 Properties 설정하기
    https://cheese10yun.github.io/immutable-properties/

***** ConstraintValidator을 이용해서 효과적인 검증
    https://cheese10yun.github.io/ConstraintValidator/

***** Spring Actuator 기초 설정
    https://cheese10yun.github.io/spring-actuator/

***** Rest Docs vs Swagger
    https://cheese10yun.github.io/spring-rest-docs/

***** MSA 이해
    https://nozee.tistory.com/entry/1%EC%9E%A5
    https://nozee.tistory.com/entry/%EB%8F%84%EB%A9%94%EC%9D%B8-%EC%A3%BC%EB%8F%84-%EC%84%A4%EA%B3%84%EB%A1%9C-%EC%8B%9C%EC%9E%91%ED%95%98%EB%8A%94-%EB%A7%88%EC%9D%B4%ED%81%AC%EB%A1%9C%EC%84%9C%EB%B9%84%EC%8A%A4%EA%B0%9C%EB%B0%9C-3-%EB%A7%88%EC%9D%B4%ED%81%AC%EB%A1%9C%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98
    https://nozee.tistory.com/entry/2-MSA%EC%9D%98-%EC%9D%B4%ED%95%B4

* 읽기와 쓰기 분리: CQRS 패턴
서비스의 서능 향상을 위해 서비스 인스턴스를 스케일 아웃해서 여러 개로 실행한 경우 데이터 읽기/수정 작업으로 인한 리소스 교착상태가 발생할 수 있다.
이 문제를 해결하는 방법이 CQRS패턴인데 Command Query Reponsibility Segregation 즉 명령 조회 책임 분리를 의미한다. 기존의 일반적이었던 동일한 저장소에 데이터를 넣고 입력, 조회, 수정, 삭제를 모두 처리하는 방식에 도전하는 방식이다.
일반적인 비즈니스 모델에서는 입력, 수정, 삭제가 조회보다 적게 쓰이고 조회 요청이 훨씬 많이 사용된다. 그런데 서비스 내에 이러한 모든 기능을 넣어 두면 조회 요청 빈도가 증가함에 따라 다른 명령 기능도 함께 확장해야 하므로 효율적이지 않다.
따라서 저장소에 쓰기 모델과 읽기 모델을 분리하는 방식으로 변화시켜 쓰기 서비스와 조회 서비스를 분리할 수도 있고, 더 나아가 아예 물리적으로 쓰기 트랜잭션용 저장소와 조회용 저장소를 따로 준비할 수 있다.
API 조합과 CQRS
'주문 이력' 서비스는 제품 서비스가 제공하는 제품 정보, 주문 서비스의 주문 정보, 고객 서비스의 특정 고객 정보, 배송 서비스의 배송 정보가 모두 다 필요하다. 따라서 각 기능을 제공하는 마이크로서비스를 조합하는 상위 마이크로서비스를 만들어 조합된 기능을 제공할 수 있다.
그렇지만 이러한 구조는 상위 서비스가 하위 서비스에 의존하는 결과를 가져온다. 하위 서비스 중 하나라도 실패할 경우 상위 서비스에 영향을 준다.
다른 방법으로는 주문 이력 서비스를 제공하는 마이크로서비스가 독자적인 저장소를 갖도록 만든다. 원청 정보를 보여한 서비스에서 정보가 변경되는 순간 그 내역을 이벤트로 발생시켜 주문 이력서에 내용을 공유하여 준다.

***** 문자열 유효성 검증 유틸 메소드 StringUtils.hasText(String)
    https://creampuffy.tistory.com/120

****** POST vs PUT (Collection, Store)
    https://creampuffy.tistory.com/170

***** Spring 의존성 주입 방법 중 생성자 주입을 사용해야 하는 이유
    https://jackjeong.tistory.com/41
    https://creampuffy.tistory.com/156
    https://velog.io/@mooh2jj/%EC%83%9D%EC%84%B1%EC%9E%90-%EC%A3%BC%EC%9E%85%EC%9D%98-%EC%9E%A5%EC%A0%90-RequiredArgsConstructor-%EC%93%B0%EB%8A%94-%EC%9D%B4%EC%9C%A0

***** 외부 툴 변경에 휘둘리지 않는 서버 코드 작성기
    https://blog.gangnamunni.com/post/dependency-inversion-principle/

***** 트랜잭션은 도메인 모델이 아니다
    https://blog.gangnamunni.com/post/isolate-transaction-from-domain-model

***** Spring Rest Docs 적용
    https://leejonghyun89.tistory.com/7
    https://velog.io/@bagt/API-%EB%AC%B8%EC%84%9C%ED%99%94%EC%99%80-Spring-Rest-Docs


******* 이벤트 기반 프로그래밍
    https://tech.kakaopay.com/post/event-driven-architecture/

***** 효율적으로 로그 모니터링하기 - 로그 레벨 구분하기
    https://jojoldu.tistory.com/712

***** 예외 먹는 @TransactionalEventListener
https://lenditkr.github.io/spring/transactional-event-listener/index.html


****** [Server] Restful API란?
    https://mangkyu.tistory.com/46

* 디자인 패턴-Factory Method
    https://youngkyonyou.github.io/interview/2021/12/14/Interview-interview-01.html

* 빈후처리기
    https://velog.io/@kiwonkim/%EC%9D%91%EC%9A%A9-7.%EB%B9%88-%ED%9B%84%EC%B2%98%EB%A6%AC%EA%B8%B0

* Swagger 란 무엇이며 사용 방법
    https://appmaster.io/university/ko/tutorials/endpoints/swagger-ran-mueosimyeo-sayong-bangbeob

* @Transactional 이 동작하지 않을 때
    https://devgoat.tistory.com/28

* Spring AOP에서 Proxy란 (+ @Transactional)
    https://velog.io/@gwontaeyong/Spring-AOP%EC%97%90%EC%84%9C-Proxy%EB%9E%80

* - REQUIRES_NEW는 부모 트랜잭션에서 완전 독립적인 트랜잭션을 생성하는가 ?
    https://jobc.tistory.com/214
    https://woodcock.tistory.com/40
    https://kth990303.tistory.com/388

- 이벤트 발행으로 비즈니스 로직 분리하기
    https://tecoble.techcourse.co.kr/post/2020-09-30-event-publish/

- [Spring] XML 설정보다 Java 설정을 사용해야 하는 이유
    https://mangkyu.tistory.com/158

- [Spring] 스프링에서 이벤트의 발행과 구독 방법과 주의사항, 이벤트 사용의 장/단점과 사용 예시
    https://mangkyu.tistory.com/292

- Spring에서 Server-Sent-Events 구현하기
    https://tecoble.techcourse.co.kr/post/2022-10-11-server-sent-events/

- Filter vs Interceptor vs AOP
    https://baek-kim-dev.site/61

- [Spring] SpringBoot 소스 코드 분석하기, DispatcherServlet(디스패처 서블릿) 동작 과정
    https://mangkyu.tistory.com/216

- SpringBoot 존재하지 않는 API 요청의 응답 커스마이징하기
    https://tecoble.techcourse.co.kr/post/2021-11-24-spring-customize-unhandled-api/

- AOP에 대한 사실과 오해 그런데 트랜잭션을 사알짝 곁들인..
    https://tecoble.techcourse.co.kr/post/2022-11-07-transaction-aop-fact-and-misconception/

- [Spring] if-else를 사용하지 않는 유연한 팩토리 클래스 구현하기
    https://mangkyu.tistory.com/252

- [Spring] ControllerAdvice는 AOP로 구현되어 있을까? ControllerAdvice의 동작 과정 살펴보기
    https://mangkyu.tistory.com/246

- [Spring] 스프링 첫 요청이 처리되는데 오래 걸리는 이유(서블릿 초기화와 JIT 컴파일러)와 해결 방법(웜업, Warm-Up)
    https://mangkyu.tistory.com/232

- [Spring] SpringBoot 실행 후에 초기화 코드를 넣는 3가지 방법과 이벤트 리스너(CommandLineRunner, ApplicationRunner, EventListener)
    https://mangkyu.tistory.com/233

- [OOP] 의존성(Dependency)이란? 컴파일타임 의존성과 런타임 의존성의 차이 및 비교
    https://mangkyu.tistory.com/226

- [Spring] 도메인 주도 설계 및 개발과 도메인 계층(도메인 객체 중심 개발)
    https://mangkyu.tistory.com/160

- 편리한 객체 간 매핑을 위한 MapStruct 적용기 (feat. SENS)
    https://medium.com/naver-cloud-platform/%EA%B8%B0%EC%88%A0-%EC%BB%A8%ED%85%90%EC%B8%A0-%EB%AC%B8%EC%9E%90-%EC%95%8C%EB%A6%BC-%EB%B0%9C%EC%86%A1-%EC%84%9C%EB%B9%84%EC%8A%A4-sens%EC%9D%98-mapstruct-%EC%A0%81%EC%9A%A9%EA%B8%B0-8fd2bc2bc33b

- MapStruct 라이브러리로 객체 매핑을 간편하게!
    https://madplay.github.io/post/mapstruct-in-springboot

- MapStruct의 사용법 및 ModelMapper와의 비교
    https://dev-splin.github.io/spring/Spring-ModelMapper,MapStruct/

- MapStruct, Entity ↔ DTO 변환
    https://jforj.tistory.com/95

- Custom Mapper with MapStruct
    https://jp1020.tistory.com/entry/Custom-Mapper-with-MapStruct

- DTO 변환 시 우아한형제들은 어떻게 처리하시나요?
    https://www.inflearn.com/questions/15292/dto-%EB%B3%80%ED%99%98-%EC%8B%9C-%EC%9A%B0%EC%95%84%ED%95%9C%ED%98%95%EC%A0%9C%EB%93%A4%EC%9D%80-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%B2%98%EB%A6%AC%ED%95%98%EC%8B%9C%EB%82%98%EC%9A%94

- Intellij : 유용한 단축키
    https://dev-splin.github.io/intellij/Intellij-Intellij-shortcut/

******* Lombok의 사용법 및 주의점
    https://dev-splin.github.io/spring/Spring-Lombok/

- aop
    https://jojoldu.tistory.com/71

- 컬리 공통 암호화 모듈의 동시성 이슈 해결하기
    https://helloworld.kurly.com/blog/concurrency-issue-solving/

- JDK Dynamic Proxy와 CGLIB의 차이점은 무엇일까?
    https://gmoon92.github.io/spring/aop/2019/04/20/jdk-dynamic-proxy-and-cglib.html

- [Spring] 멀티쓰레드 환경에서 MDC를 사용해 요청 별로 식별가능한 로그 남기기
    https://mangkyu.tistory.com/266

- @Request Body에서는 Setter가 필요없다?
    https://jojoldu.tistory.com/407

- Spring + MyBatis에서 쿼리의 결과와 객체가 매핑이 되는 과정
    https://zzang9ha.tistory.com/420

- 자바에서 null을 안전히 다루는 방법
    https://www.youtube.com/watch?v=vX3yY_36Sk4