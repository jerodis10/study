3.메시지, 국제화
    3.1 메시지, 국제화 소개
        - 메시지
            - 다양한 메시지를 한 곳에서 관리하도록 하는 기능을 메시지 기능이라 한다. (messages.properties)
        - 국제화
            - messages.properties 를 각 나라별로 별도로 관리 (messages_en.properties, messages_ko.properties)

    3.2 스프링 메시지 소스 설정
        - 직접 등록
            - 메시지 관리 기능을 사용하려면 스프링이 제공하는 MessageSource 를 스프링 빈으로 등록하면 되는데,
              MessageSource 는 인터페이스이다. 따라서 구현체인 ResourceBundleMessageSource 를 스프링 빈으로
              등록하면 된다.

        - 스프링 부트
            - 스프링 부트를 사용하면 스프링 부트가 MessageSource 를 자동으로 스프링 빈으로 등록한다.

    3.3 스프링 메시지 소스 사용
        - 국제화 파일 선택
            - locale 정보를 기반으로 국제화 파일을 선택한다.
              Locale 이 en_US 의 경우 messages_en_US messages_en messages 순서로 찾는다.
              Locale 에 맞추어 구체적인 것이 있으면 구체적인 것을 찾고, 없으면 디폴트를 찾는다.

    3.4 웹 어플리케이션 국제화 적용하기
        - 웹 브라우저의 언어 설정 값을 변경하면 요청시 Accept-Language 의 값이 변경된다.
        - 스프링도 Locale 정보를 알아야 언어를 선택할 수 있는데, 스프링은 언어 선택시 기본으로 Accept-Language 헤더의 값을 사용한다.
        - LocaleResolver
          스프링은 Locale 선택 방식을 변경할 수 있도록 LocaleResolver 라는 인터페이스를 제공하는데,
          스프링 부트는 기본으로 Accept-Language 를 활용하는 AcceptHeaderLocaleResolver 를 사용한다.

4.Validation
    4.1 BindingResult
        - 필드에 오류가 있으면 FieldError 객체를 생성해서 bindingResult 에 담아두면 된다.
        - 특정 필드를 넘어서는 오류가 있으면 ObjectError 객체를 생성해서 bindingResult 에 담아두면 된다.
        - 스프링이 제공하는 검증 오류를 보관하는 객체이다. 검증 오류가 발생하면 여기에 보관하면 된다.
          BindingResult 가 있으면 @ModelAttribute 에 데이터 바인딩 시 오류가 발생해도 컨트롤러가 호출된다!
        - BindingResult 는 검증할 대상 바로 다음에 와야한다. 순서가 중요하다.

    4.2 FieldError, ObjectError
        - 타입 오류로 바인딩에 실패하면 스프링은 FieldError 를 생성하면서 사용자가 입력한 값을 넣어둔다.
          그리고 해당 오류를 BindingResult 에 담아서 컨트롤러를 호출한다.

    4.3 오류 코드와 메시지 처리1
        - FieldError , ObjectError 의 생성자는 errorCode , arguments 를 제공한다. 이것은 오류 발생시 오류
          코드로 메시지를 찾기 위해 사용된다.

        - errors 메시지 파일 생성
          messages.properties 를 사용해도 되지만, 오류 메시지를 구분하기 쉽게 errors.properties 라는
          별도의 파일로 관리해보자.

    4.4 오류 코드와 메시지 처리2
        - BindingResult 가 제공하는 rejectValue() , reject() 를 사용하면 FieldError , ObjectError 를
          직접 생성하지 않고, 깔끔하게 검증 오류를 다룰 수 있다.

    4.5 오류 코드와 메시지 처리3
        - 가장 좋은 방법은 범용성으로 사용하다가, 세밀하게
          작성해야 하는 경우에는 세밀한 내용이 적용되도록 메시지에 단계를 두는 방법이다.
        - 스프링은 MessageCodesResolver 라는 것으로 이러한 기능을 지원한다.

    4.8 오류 코드와 메시지 처리4
        - 정리
            1. rejectValue() 호출
            2. MessageCodesResolver 를 사용해서 검증 오류 코드로 메시지 코드들을 생성
            3. new FieldError() 를 생성하면서 메시지 코드들을 보관
            4. th:errors 에서 메시지 코드들로 메시지를 순서대로 메시지에서 찾고, 노출

        - 검증 오류 코드는 다음과 같이 2가지로 나눌 수 있다.
          개발자가 직접 설정한 오류 코드 rejectValue() 를 직접 호출
          스프링이 직접 검증 오류에 추가한 경우(주로 타입 정보가 맞지 않음)

    4.9 Validator 분리
        - validator 를 직접 호출하는 부분이 사라지고, 대신에 검증 대상 앞에 @Validated 가 붙었다.
        - 동작 방식
          @Validated 는 검증기를 실행하라는 애노테이션이다.
          이 애노테이션이 붙으면 앞서 WebDataBinder 에 등록한 검증기를 찾아서 실행한다. 그런데 여러 검증기를
          등록한다면 그 중에 어떤 검증기가 실행되어야 할지 구분이 필요하다. 이때 supports() 가 사용된다.
          여기서는 supports(Item.class) 호출되고, 결과가 true 이므로 ItemValidator 의 validate() 가 호출된다.

        - @Validated 는 스프링 전용 검증 애노테이션이고, @Valid 는 자바 표준 검증 애노테이션이다.

5.Bean Validation
    - 이런 검증 로직을 모든 프로젝트에 적용할 수 있게 공통화하고, 표준화 한 것이 바로 Bean Validation 이다.
      Bean Validation 을 잘 활용하면, 애노테이션 하나로 검증 로직을 매우 편리하게 적용할 수 있다.
    - Bean Validation 을 구현한 기술중에 일반적으로 사용하는 구현체는 하이버네이트 Validator 이다.

    - 스프링 부트가 spring-boot-starter-validation 라이브러리를 넣으면 자동으로 Bean Validator 를
      인지하고 스프링에 통합한다.
    - 스프링 부트는 자동으로 글로벌 Validator 로 등록한다.
    - 이렇게 글로벌 Validator 가 적용되어 있기 때문에, @Valid , @Validated 만 적용하면 된다.
      검증 오류가 발생하면, FieldError , ObjectError 를 생성해서 BindingResult 에 담아준다.
    - 다음과 같이 직접 글로벌 Validator 를 직접 등록하면 스프링 부트는 Bean Validator 를 글로벌
      Validator 로 등록하지 않는다. 따라서 애노테이션 기반의 빈 검증기가 동작하지 않는다.

    - 검증 순서
        1. @ModelAttribute 각각의 필드에 타입 변환 시도
            - 성공하면 다음으로
            - 실패하면 typeMismatch 로 FieldError 추가
        2. Validator 적용

    - 바인딩에 성공한 필드만 Bean Validation 적용 BeanValidator 는 바인딩에 실패한 필드는 BeanValidation 을 적용하지 않는다.

    - 방법 2가지
        - BeanValidation 의 groups 기능을 사용한다.
        - Item 을 직접 사용하지 않고, ItemSaveForm, ItemUpdateForm 같은 폼 전송을 위한 별도의 모델 객체를 만들어서 사용한다.

    - @ModelAttribute vs @RequestBody
      HTTP 요청 파리미터를 처리하는 @ModelAttribute 는 각각의 필드 단위로 세밀하게 적용된다. 그래서
      특정 필드에 타입이 맞지 않는 오류가 발생해도 나머지 필드는 정상 처리할 수 있었다.
      HttpMessageConverter 는 @ModelAttribute 와 다르게 각각의 필드 단위로 적용되는 것이 아니라,
      전체 객체 단위로 적용된다.
      따라서 메시지 컨버터의 작동이 성공해서 Item 객체를 만들어야 @Valid , @Validated 가 적용된다.

6.로그인 처리1 - 쿠키, 세션
    - 도메인 = 화면, UI, 기술 인프라 등등의 영역은 제외한 시스템이 구현해야 하는 핵심 비즈니스 업무 영역을 말함
      향후 web 을 다른 기술로 바꾸어도 도메인은 그대로 유지할 수 있어야 한다.
      이렇게 하려면 web 은 domain 을 알고있지만 domain 은 web 을 모르도록 설계해야 한다. 이것을 web 은
      domain 을 의존하지만, domain 은 web 을 의존하지 않는다고 표현한다. 예를 들어 web 패키지를 모두
      삭제해도 domain 에는 전혀 영향이 없도록 의존관계를 설계하는 것이 중요하다. 반대로 이야기하면
      domain 은 web 을 참조하면 안된다.

    6.1 로그인 처리하기 - 쿠키 사용
        - 쿠키에는 영속 쿠키와 세션 쿠키가 있다.
          영속 쿠키: 만료 날짜를 입력하면 해당 날짜까지 유지
          세션 쿠키: 만료 날짜를 생략하면 브라우저 종료시 까지만 유지

        - 브라우저 종료시 로그아웃이 되길 기대하므로, 우리에게 필요한 것은 세션 쿠키이다.
        - @CookieValue 를 사용하면 편리하게 쿠키를 조회할 수 있다.

    6.2 쿠키와 보안 문제
        - 쿠키 값은 임의로 변경할 수 있다.
        - 쿠키에 중요한 값을 노출하지 않고, 사용자 별로 예측 불가능한 임의의 토큰(랜덤 값)을 노출하고, 서버에서
          토큰과 사용자 id를 매핑해서 인식한다. 그리고 서버에서 토큰을 관리한다.
        - 해커가 토큰을 털어가도 시간이 지나면 사용할 수 없도록 서버에서 해당 토큰의 만료시간을 짧게(예: 30분)
          유지한다. 또는 해킹이 의심되는 경우 서버에서 해당 토큰을 강제로 제거하면 된다.

    6.3 로그인 처리하기 - 세션 동작 방식
        - 생성된 세션 ID와 세션에 보관할 값( memberA )을 서버의 세션 저장소에 보관한다.
        - 서버는 클라이언트에 mySessionId 라는 이름으로 세션 ID 만 쿠키에 담아서 전달한다.
          클라이언트는 쿠키 저장소에 mySessionId 쿠키를 보관한다.

    6.4 로그인 처리하기 - 서블릿 HTTP 세션1
        - 서블릿을 통해 HttpSession 을 생성하면 다음과 같은 JSESSIONID 쿠키 생성

    6.5 로그인 처리하기 - 서블릿 HTTP 세션2
        - 스프링은 세션을 더 편리하게 사용할 수 있도록 @SessionAttribute 을 지원한다.

    6.6 세션 정보와 타임아웃 설정
        - 세션은 사용자가 로그아웃을 직접 호출해서 session.invalidate() 가 호출 되는 경우에 삭제된다.
          그런데 대부분의 사용자는 로그아웃을 선택하지 않고, 그냥 웹 브라우저를 종료한다. 문제는 HTTP 가 비
          연결성(ConnectionLess)이므로 서버 입장에서는 해당 사용자가 웹 브라우저를 종료한 것인지 아닌지를
          인식할 수 없다. 따라서 서버에서 세션 데이터를 언제 삭제해야 하는지 판단하기가 어렵다.
          사용자가 서버에 최근에 요청한 시간을 기준으로 30분 정도 세션 유지.
          LastAccessedTime 이후로 timeout 시간이 지나면, WAS 가 내부에서 해당 세션을 제거한다.

        - 실무에서 주의할 점은 세션에는 최소한의 데이터만 보관해야 한다는 점이다. 보관한 데이터 용량 * 사용자
          수로 세션의 메모리 사용량이 급격하게 늘어나서 장애로 이어질 수 있다. 추가로 세션의 시간을 너무 길게
          가져가면 메모리 사용이 계속 누적 될 수 있으므로 적당한 시간을 선택하는 것이 필요하다. 기본이 30
          분이라는 것을 기준으로 고민하면 된다.

7.로그인 처리2 - 필터, 인터셉터
    7.1 서블릿 필터 - 소개
        - 공통 관심사는 스프링의 AOP 로도 해결할 수 있지만, 웹과 관련된 공통 관심사는 지금부터 설명할
          서블릿 필터 또는 스프링 인터셉터를 사용하는 것이 좋다. 웹과 관련된 공통 관심사를 처리할 때는 HTTP 의
          헤더나 URL 의 정보들이 필요한데, 서블릿 필터나 스프링 인터셉터는 HttpServletRequest 를 제공한다.

        - 필터 흐름
          HTTP 요청 -> WAS -> 필터 -> 서블릿 -> 컨트롤러

        - 필터 제한
          HTTP 요청 -> WAS -> 필터 -> 서블릿 -> 컨트롤러 //로그인 사용자
          HTTP 요청 -> WAS -> 필터(적절하지 않은 요청이라 판단, 서블릿 호출X) //비 로그인 사용자

        - 필터 체인
          HTTP 요청 -> WAS -> 필터1 -> 필터2 -> 필터3 -> 서블릿 -> 컨트롤러

        - 필터 인터페이스를 구현하고 등록하면 서블릿 컨테이너가 필터를 싱글톤 객체로 생성하고, 관리한다.
          init(): 필터 초기화 메서드, 서블릿 컨테이너가 생성될 때 호출된다.
          doFilter(): 고객의 요청이 올 때 마다 해당 메서드가 호출된다. 필터의 로직을 구현하면 된다.
          destroy(): 필터 종료 메서드, 서블릿 컨테이너가 종료될 때 호출된다.

    7.2 서블릿 필터 - 요청 로그
        - chain.doFilter(request, response);
          이 부분이 가장 중요하다. 다음 필터가 있으면 필터를 호출하고, 필터가 없으면 서블릿을 호출한다.
          만약 이 로직을 호출하지 않으면 다음 단계로 진행되지 않는다.

        - 필터를 등록하는 방법은 여러가지가 있지만, 스프링 부트를 사용한다면 FilterRegistrationBean 을
          사용해서 등록하면 된다.
            - setFilter(new LogFilter()) : 등록할 필터를 지정한다.
            - setOrder(1) : 필터는 체인으로 동작한다. 따라서 순서가 필요하다. 낮을 수록 먼저 동작한다.
            - addUrlPatterns("/*") : 필터를 적용할 URL 패턴을 지정한다. 한번에 여러 패턴을 지정할 수 있다.

        - @ServletComponentScan @WebFilter(filterName = "logFilter", urlPatterns = "/*") 로
          필터 등록이 가능하지만 필터 순서 조절이 안된다. 따라서 FilterRegistrationBean 을 사용하자.

    7.3 서블릿 필터 - 인증 체크
        - isLoginCheckPath(requestURI)
          화이트 리스트를 제외한 모든 경우에 인증 체크 로직을 적용한다.

    7.4 스프링 인터셉터 - 소개
        - 서블릿 필터가 서블릿이 제공하는 기술이라면, 스프링 인터셉터는 스프링 MVC 가 제공하는 기술이다.
           웹과 관련된 공통 관심 사항을 처리하지만, 적용되는 순서와 범위, 그리고 사용방법이 다르다.

        - 스프링 인터셉터 흐름
          HTTP 요청 -> WAS -> 필터 -> 서블릿 -> 스프링 인터셉터 -> 컨트롤러

        - 스프링 인터셉터는 스프링 MVC 가 제공하는 기능이기 때문에 결국 디스패처 서블릿 이후에 등장하게 된다.
          스프링 인터셉터에도 URL 패턴을 적용할 수 있는데, 서블릿 URL 패턴과는 다르고, 매우 정밀하게 설정할 수 있다.

        - 스프링 인터셉터 제한
          HTTP 요청 -> WAS -> 필터 -> 서블릿 -> 스프링 인터셉터 -> 컨트롤러 //로그인 사용자
          HTTP 요청 -> WAS -> 필터 -> 서블릿 -> 스프링 인터셉터(적절하지 않은 요청이라 판단, 컨트롤러 호출 X) // 비 로그인 사용자

        - 스프링 인터셉터 체인
          HTTP 요청 -> WAS -> 필터 -> 서블릿 -> 인터셉터1 -> 인터셉터2 -> 컨트롤러

        - 스프링의 인터셉터를 사용하려면 HandlerInterceptor 인터페이스를 구현하면 된다.

        - 서블릿 필터의 경우 단순하게 doFilter() 하나만 제공된다. 인터셉터는 컨트롤러 호출 전( preHandle ),
          호출 후( postHandle ), 요청 완료 이후( afterCompletion )와 같이 단계적으로 잘 세분화 되어 있다.

        - 서블릿 필터의 경우 단순히 request , response 만 제공했지만, 인터셉터는 어떤 컨트롤러( handler )가
          호출되는지 호출 정보도 받을 수 있다. 그리고 어떤 modelAndView 가 반환되는지 응답 정보도 받을 수 있다.

        - 정상 흐름
            - preHandle : 컨트롤러 호출 전에 호출된다. (더 정확히는 핸들러 어댑터 호출 전에 호출된다.)
                - preHandle 의 응답값이 true 이면 다음으로 진행하고, false 이면 더는 진행하지 않는다. false
                  인 경우 나머지 인터셉터는 물론이고, 핸들러 어댑터도 호출되지 않는다. 그림에서 1번에서 끝이 나버린다.
            - postHandle : 컨트롤러 호출 후에 호출된다. (더 정확히는 핸들러 어댑터 호출 후에 호출된다.)
            - afterCompletion : 뷰가 렌더링 된 이후에 호출된다.

        - 스프링 인터셉터 예외 상황
            - preHandle : 컨트롤러 호출 전에 호출된다.
            - postHandle : 컨트롤러에서 예외가 발생하면 postHandle 은 호출되지 않는다.
            - afterCompletion : afterCompletion 은 항상 호출된다. 이 경우 예외( ex )를 파라미터로 받아서 어떤
              예외가 발생했는지 로그로 출력할 수 있다.

        => 인터셉터는 스프링 MVC 구조에 특화된 필터 기능을 제공한다고 이해하면 된다. 스프링 MVC 를 사용하고,
           특별히 필터를 꼭 사용해야 하는 상황이 아니라면 인터셉터를 사용하는 것이 더 편리하다.

    7.5 스프링 인터셉터 - 요청 로그
        - request.setAttribute(LOG_ID, uuid)
          서블릿 필터의 경우 지역변수로 해결이 가능하지만, 스프링 인터셉터는 호출 시점이 완전히 분리되어
          있다. 따라서 preHandle 에서 지정한 값을 postHandle , afterCompletion 에서 함께 사용하려면
          어딘가에 담아두어야 한다. LogInterceptor 도 싱글톤 처럼 사용되기 때문에 맴버변수를 사용하면
          위험하다. 따라서 request 에 담아두었다. 이 값은 afterCompletion 에서
          request.getAttribute(LOG_ID) 로 찾아서 사용한다.
        - return true
          true 면 정상 호출이다. 다음 인터셉터나 컨트롤러가 호출된다.

        - WebMvcConfigurer -> 인터셉터 등록

        - 필터와 비교해보면 인터셉터는 addPathPatterns , excludePathPatterns 로 매우 정밀하게 URL
          패턴을 지정할 수 있다.

    7.6 스프링 인터셉터 - 인증 체크
        - 인증이라는 것은 컨트롤러 호출 전에만 호출되면 된다. 따라서 preHandle 만 구현하면 된다.

    7.7 ArgumentResolver 활용
        - MVC1편 6. 스프링 MVC - 기본 기능 요청 매핑 헨들러 어뎁터 구조에서 ArgumentResolver 를 학습했다.
          이번 시간에는 해당 기능을 사용해서 로그인 회원을 조금 편리하게 찾아보자.

        - @Login 애노테이션이 있으면 직접 만든 ArgumentResolver 가 동작해서 자동으로 세션에 있는 로그인
          회원을 찾아주고, 만약 세션에 없다면 null 을 반환하도록 개발해보자.

        - supportsParameter() : @Login 애노테이션이 있으면서 Member 타입이면 해당 ArgumentResolver 가 사용된다.
        - resolveArgument() : 컨트롤러 호출 직전에 호출 되어서 필요한 파라미터 정보를 생성해준다. 여기서는
          세션에 있는 로그인 회원 정보인 member 객체를 찾아서 반환해준다. 이후 스프링 MVC 는 컨트롤러의
          메서드를 호출하면서 여기에서 반환된 member 객체를 파라미터에 전달해준다.

        - 실행해보면, 결과는 동일하지만, 더 편리하게 로그인 회원 정보를 조회할 수 있다. 이렇게
          ArgumentResolver 를 활용하면 공통 작업이 필요할 때 컨트롤러를 더욱 편리하게 사용할 수 있다.

8.예외 처리와 오류 페이지
    8.1 서블릿 예외 처리 - 시작
        - 스프링이 아닌 순수 서블릿 컨테이너는 예외를 어떻게 처리하는지 알아보자.

        - 서블릿은 다음 2가지 방식으로 예외 처리를 지원한다.
            - Exception (예외)
            - response.sendError(HTTP 상태 코드, 오류 메시지)

        - Exception(예외)
            - 자바 직접 실행
                - 자바의 메인 메서드를 직접 실행하는 경우 main 이라는 이름의 쓰레드가 실행된다.
                  실행 도중에 예외를 잡지 못하고 처음 실행한 main() 메서드를 넘어서 예외가 던져지면, 예외 정보를
                  남기고 해당 쓰레드는 종료된다.
            - 웹 애플리케이션
                - 웹 애플리케이션은 사용자 요청별로 별도의 쓰레드가 할당되고, 서블릿 컨테이너 안에서 실행된다.
                  애플리케이션에서 예외가 발생했는데, 어디선가 try ~ catch 로 예외를 잡아서 처리하면 아무런 문제가
                  없다. 그런데 만약에 애플리케이션에서 예외를 잡지 못하고, 서블릿 밖으로 까지 예외가 전달되면 어떻게 동작할까?
                - WAS(여기까지 전파) <- 필터 <- 서블릿 <- 인터셉터 <- 컨트롤러(예외발생)
                - 결국 톰캣 같은 WAS 까지 예외가 전달된다. WAS 는 예외가 올라오면 어떻게 처리해야 할까?

        - response.sendError(HTTP 상태 코드, 오류 메시지)
            - 오류가 발생했을 때 HttpServletResponse 가 제공하는 sendError 라는 메서드를 사용해도 된다.
              이것을 호출한다고 당장 예외가 발생하는 것은 아니지만, 서블릿 컨테이너에게 오류가 발생했다는 점을 전달할 수 있다.
              이 메서드를 사용하면 HTTP 상태 코드와 오류 메시지도 추가할 수 있다.
            - response.sendError(HTTP 상태 코드)
              response.sendError(HTTP 상태 코드, 오류 메시지)
            - response.sendError() 를 호출하면 response 내부에는 오류가 발생했다는 상태를 저장해둔다.
              그리고 서블릿 컨테이너는 고객에게 응답 전에 response 에 sendError() 가 호출되었는지 확인한다.
              그리고 호출되었다면 설정한 오류 코드에 맞추어 기본 오류 페이지를 보여준다.

    8.2 서블릿 예외 처리 - 오류 화면 제공
        - 서블릿은 Exception (예외)가 발생해서 서블릿 밖으로 전달되거나 또는 response.sendError() 가 호출
          되었을 때 각각의 상황에 맞춘 오류 처리 기능을 제공한다.
          이 기능을 사용하면 친절한 오류 처리 화면을 준비해서 고객에게 보여줄 수 있다.

    8.3 서블릿 예외 처리 - 오류 페이지 작동 원리
        1. 예외가 발생해서 WAS 까지 전파된다.
        2. WAS 는 오류 페이지 경로를 찾아서 내부에서 오류 페이지를 호출한다. 이때 오류 페이지 경로로 필터,
        서블릿, 인터셉터, 컨트롤러가 모두 다시 호출된다.

    8.4 서블릿 예외 처리 - 필터
        - 오류가 발생하면 오류 페이지를 출력하기 위해 WAS 내부에서 다시 한번 호출이 발생한다.
          결국 클라이언트로 부터 발생한 정상 요청인지, 아니면 오류 페이지를 출력하기 위한 내부 요청인지 구분할
          수 있어야 한다. 서블릿은 이런 문제를 해결하기 위해 DispatcherType 이라는 추가 정보를 제공한다.

    8.5 서블릿 예외 처리 - 인터셉터
        - 인터셉터는 서블릿이 제공하는 기능이 아니라 스프링이 제공하는 기능이다. 따라서 DispatcherType 과 무관하게 항상 호출된다.

    8.6 스프링 부트 - 오류 페이지1
        - 지금까지 예외 처리 페이지를 만들기 위해서 다음과 같은 복잡한 과정을 거쳤다.
          WebServerCustomizer 를 만들고
          예외 종류에 따라서 ErrorPage 를 추가하고
          예외 처리용 컨트롤러 ErrorPageController 를 만듬

        - 스프링 부트는 이런 과정을 모두 기본으로 제공한다.
            - ErrorPage 를 자동으로 등록한다. 이때 /error 라는 경로로 기본 오류 페이지를 설정한다.
                - new ErrorPage("/error") , 상태코드와 예외를 설정하지 않으면 기본 오류 페이지로 사용된다.
                - 서블릿 밖으로 예외가 발생하거나, response.sendError(...) 가 호출되면 모든 오류는 /error 를
                  호출하게 된다.
            - BasicErrorController 라는 스프링 컨트롤러를 자동으로 등록한다.
                - ErrorPage 에서 등록한 /error 를 매핑해서 처리하는 컨트롤러다.
            - ErrorMvcAutoConfiguration 이라는 클래스가 오류 페이지를 자동으로 등록하는 역할을 한다.

        - BasicErrorController 는 기본적인 로직이 모두 개발되어 있다.
          개발자는 오류 페이지 화면만 BasicErrorController 가 제공하는 룰과 우선순위에 따라서 등록하면
          된다. 정적 HTML 이면 정적 리소스, 뷰 템플릿을 사용해서 동적으로 오류 화면을 만들고 싶으면 뷰 템플릿
          경로에 오류 페이지 파일을 만들어서 넣어두기만 하면 된다.

        - 뷰 선택 우선순위
          BasicErrorController 의 처리 순서

          1. 뷰 템플릿
            - resources/templates/error/500.html
              resources/templates/error/5xx.html
          2. 정적 리소스( static , public )
            - resources/static/error/400.html
              resources/static/error/404.html
              resources/static/error/4xx.html
          3. 적용 대상이 없을 때 뷰 이름( error )
            - resources/templates/error.html

    8.7 스프링 부트 - 오류 페이지2
        - 확장 포인트
          에러 공통 처리 컨트롤러의 기능을 변경하고 싶으면 ErrorController 인터페이스를 상속 받아서
          구현하거나 BasicErrorController 상속 받아서 기능을 추가하면 된다.

9.API 예외 처리
    9.1 API 예외 처리 - 시작
        - API 의 경우에는 생각할 내용이 더 많다. 오류 페이지는 단순히 고객에게 오류 화면을 보여주고
          끝이지만, API 는 각 오류 상황에 맞는 오류 응답 스펙을 정하고, JSON 으로 데이터를 내려주어야 한다.

    9.2 API 예외 처리 - 스프링 부트 기본 오류 처리
        - /error 동일한 경로를 처리하는 errorHtml() , error() 두 메서드를 확인할 수 있다.
        - errorHtml() : produces = MediaType.TEXT_HTML_VALUE : 클라이언트 요청의 Accept 해더 값이
          text/html 인 경우에는 errorHtml() 을 호출해서 view 를 제공한다.
        - error() : 그외 경우에 호출되고 ResponseEntity 로 HTTP Body 에 JSON 데이터를 반환한다.

    9.3 API 예외 처리 - HandlerExceptionResolver
        - 목표
          예외가 발생해서 서블릿을 넘어 WAS 까지 예외가 전달되면 HTTP 상태코드가 500으로 처리된다.
          발생하는 예외에 따라서 400, 404 등등 다른 상태코드도 처리하고 싶다.
          오류 메시지, 형식등을 API 마다 다르게 처리하고 싶다.

        - HandlerExceptionResolver
          스프링 MVC 는 컨트롤러(핸들러) 밖으로 예외가 던져진 경우 예외를 해결하고, 동작을 새로 정의할 수 있는
          방법을 제공한다. 컨트롤러 밖으로 던져진 예외를 해결하고, 동작 방식을 변경하고 싶으면
          HandlerExceptionResolver 를 사용하면 된다. 줄여서 ExceptionResolver 라 한다.

        - ExceptionResolver 를 사용하면 컨트롤러에서 예외가 발생해도 ExceptionResolver 에서 예외를 처리해버린다.
          따라서 예외가 발생해도 서블릿 컨테이너까지 예외가 전달되지 않고, 스프링 MVC 에서 예외 처리는 끝이 난다.
          결과적으로 WAS 입장에서는 정상 처리가 된 것이다. 이렇게 예외를 이곳에서 모두 처리할 수 있다는 것이 핵심이다.

        - 스프링 부트가 기본으로 제공하는 ExceptionResolver 는 다음과 같다.
          HandlerExceptionResolverComposite 에 다음 순서로 등록
          1. ExceptionHandlerExceptionResolver
          2. ResponseStatusExceptionResolver
          3. DefaultHandlerExceptionResolver 우선 순위가 가장 낮다.

        - ExceptionHandlerExceptionResolver
          @ExceptionHandler 을 처리한다. API 예외 처리는 대부분 이 기능으로 해결한다. 조금 뒤에 자세히
          설명한다.

        - ResponseStatusExceptionResolver
          HTTP 상태 코드를 지정해준다.
          예) @ResponseStatus(value = HttpStatus.NOT_FOUND)

        - DefaultHandlerExceptionResolver
          스프링 내부 기본 예외를 처리한다.

    9.4 API 예외 처리 - @ExceptionHandler
        - 회원을 처리하는 컨트롤러에서 발생하는 RuntimeException 예외와 상품을 관리하는 컨트롤러에서 발생하는 동일한
          RuntimeException 예외를 서로 다른 방식으로 처리하고 싶다면 어떻게 해야할까?

        - @ExceptionHandler
          스프링은 API 예외 처리 문제를 해결하기 위해 @ExceptionHandler 라는 애노테이션을 사용하는 매우
          편리한 예외 처리 기능을 제공하는데, 이것이 바로 ExceptionHandlerExceptionResolver 이다.
          스프링은 ExceptionHandlerExceptionResolver 를 기본으로 제공하고, 기본으로 제공하는
          ExceptionResolver 중에 우선순위도 가장 높다. 실무에서 API 예외 처리는 대부분 이 기능을 사용한다.

        - @ExceptionHandler 애노테이션을 선언하고, 해당 컨트롤러에서 처리하고 싶은 예외를 지정해주면 된다.
          해당 컨트롤러에서 예외가 발생하면 이 메서드가 호출된다. 참고로 지정한 예외 또는 그 예외의 자식
          클래스는 모두 잡을 수 있다.

        - @ExceptionHandler 에 지정한 부모 클래스는 자식 클래스까지 처리할 수 있다. 따라서 자식예외가 발생하면 부모예외처리() ,
          자식예외처리() 둘다 호출 대상이 된다. 그런데 둘 중 더 자세한 것이 우선권을 가지므로 자식예외처리() 가 호출된다. 물론 부모예외가
          호출되면 부모예외처리() 만 호출 대상이 되므로 부모예외처리() 가 호출된다.

        - @ExceptionHandler 에는 마치 스프링의 컨트롤러의 파라미터 응답처럼 다양한 파라미터와 응답을 지정할 수 있다.

    9.5 API 예외 처리 - @ControllerAdvice
        - @ExceptionHandler 를 사용해서 예외를 깔끔하게 처리할 수 있게 되었지만, 정상 코드와 예외 처리
          코드가 하나의 컨트롤러에 섞여 있다. @ControllerAdvice 또는 @RestControllerAdvice 를 사용하면 둘을 분리할 수 있다.

        - @ControllerAdvice 는 대상으로 지정한 여러 컨트롤러에 @ExceptionHandler , @InitBinder 기능을
          부여해주는 역할을 한다.

        - @ControllerAdvice 에 대상을 지정하지 않으면 모든 컨트롤러에 적용된다. (글로벌 적용)

10.스프링 타입 컨버터
    10.1 스프링 타입 컨버터 소개
        - HTTP 요청 파라미터는 모두 문자로 처리된다. 따라서 요청 파라미터를 자바에서 다른 타입으로 변환해서
          사용하고 싶으면 다음과 같이 숫자 타입으로 변환하는 과정을 거쳐야 한다.

        - 스프링의 타입 변환 적용 예
            - 스프링 MVC 요청 파라미터
                - @RequestParam , @ModelAttribute , @PathVariable
            - @Value 등으로 YML 정보 읽기
            - XML 에 넣은 스프링 빈 정보를 변환
            - 뷰를 렌더링 할 때

        - 만약 개발자가 새로운 타입을 만들어서 변환하고 싶으면 어떻게 하면 될까?
          스프링은 확장 가능한 컨버터 인터페이스를 제공한다.
          개발자는 스프링에 추가적인 타입 변환이 필요하면 이 컨버터 인터페이스를 구현해서 등록하면 된다.
          이 컨버터 인터페이스는 모든 타입에 적용할 수 있다. 필요하면 X Y 타입으로 변환하는 컨버터
          인터페이스를 만들고, 또 Y X 타입으로 변환하는 컨버터 인터페이스를 만들어서 등록하면 된다.

    10.2 타입 컨버터 - Converter
        - 타입 컨버터 인터페이스가 단순해서 이해하기 어렵지 않을 것이다.
          그런데 이렇게 타입 컨버터를 하나하나 직접 사용하면, 개발자가 직접 컨버팅 하는 것과 큰 차이가 없다.
          타입 컨버터를 등록하고 관리하면서 편리하게 변환 기능을 제공하는 역할을 하는 무언가가 필요하다.

    10.3 컨버전 서비스 - ConversionService
        - 이렇게 타입 컨버터를 하나하나 직접 찾아서 타입 변환에 사용하는 것은 매우 불편하다. 그래서 스프링은
          개별 컨버터를 모아두고 그것들을 묶어서 편리하게 사용할 수 있는 기능을 제공하는데, 이것이 바로 컨버전
          서비스( ConversionService )이다.

        - DefaultConversionService 는 다음 두 인터페이스를 구현했다.
          ConversionService : 컨버터 사용에 초점
          ConverterRegistry : 컨버터 등록에 초점

    10.4 스프링에 Converter 적용하기
        - 처리 과정
          @RequestParam 은 @RequestParam 을 처리하는 ArgumentResolver 인
          RequestParamMethodArgumentResolver 에서 ConversionService 를 사용해서 타입을 변환한다.

    10.5 포맷터 - Formatter
        - Converter 는 입력과 출력 타입에 제한이 없는, 범용 타입 변환 기능을 제공한다.

        - 이번에는 일반적인 웹 애플리케이션 환경을 생각해보자. 불린 타입을 숫자로 바꾸는 것 같은 범용 기능 보다는 개발자 입장에서는
          문자를 다른 타입으로 변환하거나, 다른 타입을 문자로 변환하는 상황이 대부분이다.

        - 이렇게 객체를 특정한 포멧에 맞추어 문자로 출력하거나 또는 그 반대의 역할을 하는 것에 특화된 기능이
          바로 포맷터( Formatter )이다. 포맷터는 컨버터의 특별한 버전으로 이해하면 된다.

        - FormattingConversionService 는 ConversionService 관련 기능을 상속받기 때문에 결과적으로
          컨버터도 포맷터도 모두 등록할 수 있다. 그리고 사용할 때는 ConversionService 가 제공하는 convert 를 사용하면 된다.
          추가로 스프링 부트는 DefaultFormattingConversionService 를 상속 받은 WebConversionService 를 내부에서 사용한다.

    10.6 포맷터 적용하기
        - 우선순위는 컨버터가 우선하므로 포맷터가 적용되지 않고, 컨버터가 적용된다.

    10.9 스프링이 제공하는 기본 포맷터
        - 스프링은 자바에서 기본으로 제공하는 타입들에 대해 수 많은 포맷터를 기본으로 제공한다.
        - 그런데 포맷터는 기본 형식이 지정되어 있기 때문에, 객체의 각 필드마다 다른 형식으로 포맷을 지정하기는 어렵다.

        - 스프링은 이런 문제를 해결하기 위해 애노테이션 기반으로 원하는 형식을 지정해서 사용할 수 있는 매우
          유용한 포맷터 두 가지를 기본으로 제공한다.
          @NumberFormat : 숫자 관련 형식 지정 포맷터 사용, NumberFormatAnnotationFormatterFactory
          @DateTimeFormat : 날짜 관련 형식 지정 포맷터 사용, Jsr310DateTimeFormatAnnotationFormatterFactory

        - 주의!
          메시지 컨버터( HttpMessageConverter )에는 컨버전 서비스가 적용되지 않는다.
          특히 객체를 JSON 으로 변환할 때 메시지 컨버터를 사용하면서 이 부분을 많이 오해하는데,
          HttpMessageConverter 의 역할은 HTTP 메시지 바디의 내용을 객체로 변환하거나 객체를 HTTP 메시지
          바디에 입력하는 것이다. 예를 들어서 JSON 을 객체로 변환하는 메시지 컨버터는 내부에서 Jackson 같은
          라이브러리를 사용한다. 객체를 JSON 으로 변환한다면 그 결과는 이 라이브러리에 달린 것이다. 따라서
          JSON 결과로 만들어지는 숫자나 날짜 포맷을 변경하고 싶으면 해당 라이브러리가 제공하는 설정을 통해서
          포맷을 지정해야 한다. 결과적으로 이것은 컨버전 서비스와 전혀 관계가 없다.