***** 기술 면접 관련 요약 *****
    https://gyoogle.dev/blog/computer-science/data-base/Transaction.html

***** 기술 면접 관련 정보 *****
망나니개발자
https://mangkyu.tistory.com/242
    - 도메인 주도 설계 및 개발과 도메인 계층(도메인 객체 중심 개발)
        https://mangkyu.tistory.com/160

***** cs 관련 질문 *****
    https://onejunu.tistory.com/category/CS

***** 면접 질문 *****
    https://youngkyonyou.github.io/categories.html#Interview-ref

***** cs 스터디 *****
    https://steady-coding.tistory.com/category/%EC%8A%A4%ED%84%B0%EB%94%94/CS%20%EC%8A%A4%ED%84%B0%EB%94%94

***** java 스터디 *****
    https://steady-coding.tistory.com/category/%EC%8A%A4%ED%84%B0%EB%94%94/Java%20%EC%8A%A4%ED%84%B0%EB%94%94

***** jpa 스터디 *****
    https://steady-coding.tistory.com/category/%EC%8A%A4%ED%84%B0%EB%94%94/JPA%20%EC%8A%A4%ED%84%B0%EB%94%94?page=2

***** 오브젝트 스터디 *****
    https://steady-coding.tistory.com/category/%EC%8A%A4%ED%84%B0%EB%94%94/%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%20%EC%8A%A4%ED%84%B0%EB%94%94

***** 이펙티브 자바 스터디 *****
    https://steady-coding.tistory.com/category/%EC%8A%A4%ED%84%B0%EB%94%94/%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%20%EC%9E%90%EB%B0%94%20%EC%8A%A4%ED%84%B0%EB%94%94

***** 디자인 패턴 *****
    https://steady-coding.tistory.com/category/%EA%B0%9C%EB%B0%9C%20%EC%9D%B4%EC%95%BC%EA%B8%B0/%EB%94%94%EC%9E%90%EC%9D%B8%20%ED%8C%A8%ED%84%B4
    http://www.yes24.com/Product/Goods/9179120

***** 코딩 팩토리 *****
    https://coding-factory.tistory.com/category/Language/Java?page=3

***** inpa dev *****
    https://inpa.tistory.com/

** if-else 를 사용하지 않는 유연한 팩토리 클래스 구현하기
    https://mangkyu.tistory.com/252

** 스프링이 제공하는 다양한 유틸성 클래스들(StringUtils, PatternMatchUtils, ReflectionUtils 등)
    https://mangkyu.tistory.com/238

- 과제 전형
    - rest api
    - 디자인 패턴
    - jpa
    - 익셉션 (에러 처리)
    - 테스트 코드
    - 주석, 로그
    - 유효성 검증 로직 (@Valid 와 @Validated)
    - aop 적용 - ex) logTracer
    - 서버에 따른 log 설정 분기
    - interceptor 적용 - ex) 로그인
    - 동시성 이슈 고려
    	- application
    	- db
    	- redis

    - 도메인 주도 설계?
    - 데이터 삽입 방법 고려
    	ex) test Container
    	    테스트 데이터 삽입 버튼?
    - 테스트 커버리지?
    - springSecurity 도입 고려

    -> 지원하려는 팀 기술스택 고려

    -> 게시판, 파일 첨부 기능


***** CustomResponse 활용???


    https://www.wanted.co.kr/events/22_12_s01_b01

    API 가 처리해야 하는 로직
    API 요청 포맷 및 응답 포맷
    오류 처리 방식

    이해하기 쉬운 코드인가?
    일관성 있게 작성된 코드인가?
    효율성이 좋은 코드인가?
    적절한 자료구조 및 디자인 패턴을 사용했는가?
    테스트를 작성했는가? 테스트에서 에지 케이스(edge case)까지 커버했는가?

    코딩 과제에서는 필수 요구사항을 정확히 이해하고 구현하는 것이 가장 우선입니다.
    기능을 정확하게 구현했는지 확인할 수 있는 가장 좋은 방법은 바로 테스트 코드를 통한 검증입니다.
    코드와 테스트를 다 작성한 뒤에는 다시 한번 코드를 읽어보며 더 개선할 부분은 없는지 점검하고, 코드의 가독성과 효율성에 집중해서 리팩토링 해 보세요.
    README 작성하기
        프로젝트 구성 - 전체 구조를 어떻게 설계했는지 설명하기 (필요에 따라 그래프나 다이아그램 활용)
        기능 목록 - 요구사항을 다시 한 번 요약하고, 각 기능을 어떻게 구현했는지 설명하기
        사용한 기술 스택 및 라이브러리 - 어떤 언어와 버전을 사용했는지 (예제: Java 11), 외부 라이브러리를 사용했다면 어떤 기준으로 선택해 사용했는지 명시하기
        코드 실행 방법 - 면접관이 직접 코드를 실행해 볼 수 있도록 실행 방법 안내하기



** @Valid 와 @Validated 를 이용한 유효성 검증의 동작 원리 및 사용법 예시
    https://mangkyu.tistory.com/174

    @Validated 를 사용하면 컨트롤러, 서비스, 레포지토리 등 계층에 무관하게 스프링 빈이라면 유효성 검증을 진행할 수 있다.
    대신 클래스에는 유효성 검증 AOP 가 적용되도록 @Validated 를, 검증을 진행할 메소드에는 @Valid 를 선언해주어야 한다.



3. 등가 비교 가능
- 값 끼리는 동일성, 동등성 비교가 가능하다
동일성(Identity) 비교: 참조값 비교, == 비교 (JAVA 기본 primitive 타입)
동등성(Equivalance) 비교: 내부 값 비교, equals() (이외 나머지)
(동등싱 버교를 하기 위해서는 equals 메소드를 별도로 오버라이딩 해야한다.)

++ 토막 상식 ++
왜 IDE에서는 equals() 메소드를 오버리이딩 할 때 hashCode() 메소드도 같이 만들어줄까?
- hash값을 사용하는 컬렉션(HashMap, HashSet 등)은 객체가 동일한지를 판별할 때 hashCode() 메소드를 먼저 사용하고, 같은 경우에만 equals() 메소드롤 사용하기 때문이다.
- 따라서 hashCode() 메소드가 정의가 안되어있으면 equals() 메소드가 true를 반환한다 해도 그 이전에 hashCode() 메소드에서 false가 나버리기 때문에 두 객체를 서로 다른 객체로 인식하게 된다
(따로 hashCode 메소드를 정의하지 않으면 Object에 정의된 hashCode(), 객체의 고유한 주소 값을 변환 후 리턴함)
* equals()로 비교한 두 객체가 동일하다면 hashCode() 값도 같아야 한다


** Intellij http 를 통해 api 를 테스트
    https://sihyung92.oopy.io/etc/intellij/2

***** @ControllerAdvice 을 이용한 Exception 처리
    https://bamdule.tistory.com/92

***** Spring 의 다양한 예외 처리 방법(ExceptionHandler, ControllerAdvice 등) 완벽하게 이해하기
    https://mangkyu.tistory.com/204

***** @RestControllerAdvice 를 이용한 Spring 예외 처리 방법
    https://mangkyu.tistory.com/205

** REST API 를 설계할 때 명심해야 할 모범 사례
    https://www.freecodecamp.org/korean/news/rest-api-mobeom-sarye-rest-endeupointeu-seolgye-yesi/

** RESTful API 설계 가이드
    https://sanghaklee.tistory.com/57

** REST / REST API 개념과 적용 + 코드 예제 (SpringBoot 기반)
    https://creamilk88.tistory.com/184

** Ajax 통신을 활용한 json 데이터 불러오기(get 방식)
    https://programmings.tistory.com/12

** ajax html
    https://yejip.com/web/2020-12-14-ajax1/

** @PathVariable 사용하는 이유
    https://okky.kr/questions/826596

** 활성 프로파일(Profile)의 관리를 위한 @Profile 과 @ActiveProfiles
    https://mangkyu.tistory.com/178

* DDD
    https://velog.io/@dnflekf2748/DDDDomain-Driven-Design

* DDD 학습 자료 모음
    https://java-boy.tistory.com/91

* DDD - #2 아키텍처
    https://stylishc.tistory.com/144

* DTO 와 Domain Model 을 분리해야 하는 이유
    https://umbum.dev/1206?category=1062058

* DTO <-> Entity 간 변환, 어느 Layer에서 하는게 좋을까?
    https://velog.io/@jsb100800/Spring-boot-DTO-Entity-%EA%B0%84-%EB%B3%80%ED%99%98-%EC%96%B4%EB%8A%90-Layer%EC%97%90%EC%84%9C-%ED%95%98%EB%8A%94%EA%B2%8C-%EC%A2%8B%EC%9D%84%EA%B9%8C

* 디렉터리 패키지 구조의 선택
    https://velog.io/@jsb100800/Spring-boot-directory-package

* 빌더 패턴
    https://johngrib.github.io/wiki/pattern/builder/

    @Builder 를 클래스에 달아주면 @AllArgsConstructor 도 같이 달아주는 것과 같기 때문에 바람직하지 않다.
    가급적 직접 만든 생성자에 달아주는 것이 낫다. 나는 회사에서 코딩할 때에는 절대로 @Builder 를 클래스에 달아주지 않는다.