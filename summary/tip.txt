***** 기술 면접 관련 요약 *****
    https://gyoogle.dev/blog/computer-science/data-base/Transaction.html

***** 기술 면접 관련 정보 *****
망나니개발자
https://mangkyu.tistory.com/242
    - 도메인 주도 설계 및 개발과 도메인 계층(도메인 객체 중심 개발)
        https://mangkyu.tistory.com/160

***** cs 스터디 *****
    https://steady-coding.tistory.com/category/%EC%8A%A4%ED%84%B0%EB%94%94/CS%20%EC%8A%A4%ED%84%B0%EB%94%94

***** java 스터디 *****
    https://steady-coding.tistory.com/category/%EC%8A%A4%ED%84%B0%EB%94%94/Java%20%EC%8A%A4%ED%84%B0%EB%94%94

***** jpa 스터디 *****
    https://steady-coding.tistory.com/category/%EC%8A%A4%ED%84%B0%EB%94%94/JPA%20%EC%8A%A4%ED%84%B0%EB%94%94?page=2

***** 오브젝트 스터디 *****
    https://steady-coding.tistory.com/category/%EC%8A%A4%ED%84%B0%EB%94%94/%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%20%EC%8A%A4%ED%84%B0%EB%94%94

***** 이펙티브 자바 스터디 *****
    https://steady-coding.tistory.com/category/%EC%8A%A4%ED%84%B0%EB%94%94/%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%20%EC%9E%90%EB%B0%94%20%EC%8A%A4%ED%84%B0%EB%94%94

***** 디자인 패턴 *****
    https://steady-coding.tistory.com/category/%EA%B0%9C%EB%B0%9C%20%EC%9D%B4%EC%95%BC%EA%B8%B0/%EB%94%94%EC%9E%90%EC%9D%B8%20%ED%8C%A8%ED%84%B4

***** 코딩 팩토리 *****
    https://coding-factory.tistory.com/category/Language/Java?page=3

** if-else 를 사용하지 않는 유연한 팩토리 클래스 구현하기
    https://mangkyu.tistory.com/252

** 스프링이 제공하는 다양한 유틸성 클래스들(StringUtils, PatternMatchUtils, ReflectionUtils 등)
    https://mangkyu.tistory.com/238

- 과제 전형
    - rest api
    - 디자인 패턴
    - jpa
    - 익셉션 (에러 처리)
    - 테스트 코드
    - 주석, 로그
    - 유효성 검증 로직 (@Valid 와 @Validated)
    - aop 적용 - ex) logTracer
    - 서버에 따른 log 설정 분기
    - interceptor 적용 - ex) 로그인
    - 동시성 이슈 고려
    	- application
    	- db
    	- redis

    - 도메인 주도 설계?
    - 데이터 삽입 방법 고려
    	ex) test Container
    	    테스트 데이터 삽입 버튼?
    - 테스트 커버리지?
    - springSecurity 도입 고려

    -> 지원하려는 팀 기술스택 고려

    -> 게시판, 파일 첨부 기능



    https://www.wanted.co.kr/events/22_12_s01_b01

    API 가 처리해야 하는 로직
    API 요청 포맷 및 응답 포맷
    오류 처리 방식

    이해하기 쉬운 코드인가?
    일관성 있게 작성된 코드인가?
    효율성이 좋은 코드인가?
    적절한 자료구조 및 디자인 패턴을 사용했는가?
    테스트를 작성했는가? 테스트에서 에지 케이스(edge case)까지 커버했는가?

    코딩 과제에서는 필수 요구사항을 정확히 이해하고 구현하는 것이 가장 우선입니다.
    기능을 정확하게 구현했는지 확인할 수 있는 가장 좋은 방법은 바로 테스트 코드를 통한 검증입니다.
    코드와 테스트를 다 작성한 뒤에는 다시 한번 코드를 읽어보며 더 개선할 부분은 없는지 점검하고, 코드의 가독성과 효율성에 집중해서 리팩토링 해 보세요.
    README 작성하기
        프로젝트 구성 - 전체 구조를 어떻게 설계했는지 설명하기 (필요에 따라 그래프나 다이아그램 활용)
        기능 목록 - 요구사항을 다시 한 번 요약하고, 각 기능을 어떻게 구현했는지 설명하기
        사용한 기술 스택 및 라이브러리 - 어떤 언어와 버전을 사용했는지 (예제: Java 11), 외부 라이브러리를 사용했다면 어떤 기준으로 선택해 사용했는지 명시하기
        코드 실행 방법 - 면접관이 직접 코드를 실행해 볼 수 있도록 실행 방법 안내하기

