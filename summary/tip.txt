********** 면접 tip
    https://www.jumpit.co.kr/job-interview/301

******* db 면접 질문
    https://blog.naver.com/steady_uk/223065359951

******* 면접 tip
    https://velog.io/@rmswjdtn/%EC%B7%A8%EC%97%85-%EB%B0%B1%EC%97%94%EB%93%9C-%EC%8B%A0%EC%9E%85-14%EB%B2%88%EC%9D%98-%EB%A9%B4%EC%A0%91-%EA%B7%B8%EB%A6%AC%EA%B3%A0-%EC%B7%A8%EB%BD%80-4-%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91

***** 기술 면접 관련 요약 *****
    https://gyoogle.dev/blog/computer-science/data-base/Transaction.html

***** 기술 면접 관련 정보 *****
망나니개발자
https://mangkyu.tistory.com/242
    - 도메인 주도 설계 및 개발과 도메인 계층(도메인 객체 중심 개발)
        https://mangkyu.tistory.com/160

****** 개발자 면접 질문
    https://snow-line.tistory.com/category/%EB%A9%B4%EC%A0%91%20-%20%EC%9E%90%EB%B0%94

******* 쉬운코드
    https://www.youtube.com/@ez

***** cs 관련 질문 *****
    https://onejunu.tistory.com/category/CS

***** 면접 질문 *****
    https://youngkyonyou.github.io/categories.html#Interview-ref

***** 토스 개발자 기술 블로그
    https://perfectacle.github.io/

***** cs 스터디 *****
    https://steady-coding.tistory.com/category/%EC%8A%A4%ED%84%B0%EB%94%94/CS%20%EC%8A%A4%ED%84%B0%EB%94%94

***** java 스터디 *****
    https://steady-coding.tistory.com/category/%EC%8A%A4%ED%84%B0%EB%94%94/Java%20%EC%8A%A4%ED%84%B0%EB%94%94

***** jpa 스터디 *****
    https://steady-coding.tistory.com/category/%EC%8A%A4%ED%84%B0%EB%94%94/JPA%20%EC%8A%A4%ED%84%B0%EB%94%94?page=2

***** 오브젝트 스터디 *****
    https://steady-coding.tistory.com/category/%EC%8A%A4%ED%84%B0%EB%94%94/%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%20%EC%8A%A4%ED%84%B0%EB%94%94

***** 이펙티브 자바 스터디 *****
    https://steady-coding.tistory.com/category/%EC%8A%A4%ED%84%B0%EB%94%94/%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%20%EC%9E%90%EB%B0%94%20%EC%8A%A4%ED%84%B0%EB%94%94

***** 디자인 패턴 *****
    https://steady-coding.tistory.com/category/%EA%B0%9C%EB%B0%9C%20%EC%9D%B4%EC%95%BC%EA%B8%B0/%EB%94%94%EC%9E%90%EC%9D%B8%20%ED%8C%A8%ED%84%B4
    http://www.yes24.com/Product/Goods/9179120

***** 코딩 팩토리 *****
    https://coding-factory.tistory.com/category/Language/Java?page=3

***** inpa dev *****
    https://inpa.tistory.com/

** Goodgid 기술 블로그
    https://goodgid.github.io/category/#DB

** 코딩 공부 일지 **
    https://cocoon1787.tistory.com/746

** 후디 블로그 **
    https://hudi.blog/do-not-use-system-out-println-for-logging/

** 다람쥐 블로그 **
    https://itchipmunk.tistory.com/437

** 라인 기술 블로그
    https://engineering.linecorp.com/ko/blog

***** 개발 커뮤니티
    https://www.surfit.io/

***** Innovative Thinking IT
    https://jobc.tistory.com/

***** 면접 준비하며 공부하는 Spring
    https://dreamingdreamer.tistory.com/125

****** 면접 질문
    https://notspoon.tistory.com/49
    https://notspoon.tistory.com/40
    https://notspoon.tistory.com/33

********* 기술 면접 질문
    https://dev-coco.tistory.com/163?category=1056309

****** 면접 후기
    https://notspoon.tistory.com/32


***** 멀티모듈 관련
    https://techblog.woowahan.com/10600/
    https://explored.tistory.com/18
    https://velog.io/@sangwoo0727/Gradle%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%A9%80%ED%8B%B0-%EB%AA%A8%EB%93%88
    https://gwonsungjun.github.io/articles/2019-04/gradle_multi_module
    https://kwonnam.pe.kr/wiki/gradle/multiproject

***** 대용량 트래픽을 처리 할 수 있는 Server Architecture Designs

** Spring Boot Data Jpa 프로젝트에 Querydsl 적용하기
    https://jojoldu.tistory.com/372

** JPA repository
    https://techblog.woowahan.com/8357/

** 우아한형제들 파일럿 프로젝트
    https://techblog.woowahan.com/7828/

** Spring REST Docs에 날개를..
    https://techblog.woowahan.com/2678/


***** 이벤트 기반 아키텍처 구성
    https://techblog.woowahan.com/7835/
    https://www.youtube.com/watch?v=BnS6343GTkY

** modern java
    https://codingsquirrel.tistory.com/158

** reactive-streams
    https://www.getoutsidedoor.com/2020/11/23/reactive-streams-%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C/

** top-20-libraries for java developer
    https://javarevisited.blogspot.com/2018/01/top-20-libraries-and-apis-for-java-programmers.html#axzz7x1cuE8oG

** • 대용량 트래픽 처리에 대한 이해 및 서비스 경험이 있는 분
   • 전체 SDLC(소프트웨어 생명주기)에 대한 경험이 있는 분
   • 애자일 스프린트, MVP 단위 개발 프로세스에서의 개발 경험이 있는 분


** if-else 를 사용하지 않는 유연한 팩토리 클래스 구현하기
    https://mangkyu.tistory.com/252

** 스프링이 제공하는 다양한 유틸성 클래스들(StringUtils, PatternMatchUtils, ReflectionUtils 등)
    https://mangkyu.tistory.com/238

* 디폴트 코드 스타일 변경
    https://iamtaehoon.tistory.com/191

* 유용한 플러그인
    https://code-boki.tistory.com/4


[ Continuous Integration ]

단지 Jenkins, GitHub Actions 등 CI 지원도구를 사용하는 것과 CI는 달라요. Martin Fowler가 소개한 다음 CI 검증 검사를 만족하는 환경을 가꿔가고 있어요.

 - 모든 개발자는 `main` 브랜치에 최소 매일 한 번 커밋한다.
 - 모든 커밋은 자동화된 빌드와 테스트를 실행한다.
 - 빌드와 테스트가 실패하면 10분 내에 고쳐진다.

이런 환경에서 개발하면 그 가치가 더 자주, 더 빠르게 사용자에게 전달될 수 있고, 개발자는 안정감 위에서 코딩할 수 있게 돼요.


[ 테스트 자동화 ]
테스트 자동화는 Continuous Integration, Continuous Deployment, DevOps 등의 필요 조건이에요. 테스트가 높은 수준으로 자동화되어있지
않는 프로세스는 이런 이름으로 부를 수 없습니다. 개발자의 많은 작업이 도구에 의해 검증되어 가치 전달에 두려움을 갖지 않도록 자동화된 테스트 케이스를 늘리고,
테스트 주도 개발(test-driven development)을 적용하고, 시스템과 프로세스를 개선하고 있어요.

[ 짝 프로그래밍(Pair Programming), 단체 프로그래밍(Mob Programming), 코드 리뷰 ]
코딩은 협업입니다. 모든 강남언니 팀 개발자는 혼자만의 판단으로 main 브랜치에 커밋할 수 없도록 권한이 제한되어 있어요.
모든 코드는 짝 프로그래밍을 통해 작성되거나 동료의 리뷰를 거친 승인을 받아야만 pull request를 통해 main 브랜치에 추가될 수 있어요.
때론 같은 비즈니스 요구사항을 다루는 서버, 웹 프론트엔드, 모바일 개발자가 함께 모여 코드를 쓰기도 해요.

[ 도메인 주도 설계(Domain-Driven Design) ]
강남언니 팀도 미용의료 산업도 빠르게 변화하고 확장되고 있어요. 이런 변화에 대한 시스템의 적응력은 노력 없이 주어지지 않아요.
시스템이 비즈니스 환경에 적응하지 못하면 서비스도 조직도 비전도 물거품이 됩니다. 유연한 아키텍처를 확보하기 위해 여러가지 설계 기법을 학습하고 적용해야 해요.

강남언니 팀은 도메인 주도 설계를 서버 시스템 확장에 기반이 되는 기법으로 정착시키고 있어요. 전술 기법에만 매몰되면 작은 엔지니어링 재미는 느낄지언정
개발자의 시야가 좁아지고 도메인 주도 설계의 가치를 취하지 못합니다. 그래서 우리는 전술적 패턴 뿐 아니라 유비쿼터스 언어와 전략적 설계에도 집중해
도메인의 문제를 효율적으로 풀어내고 아키텍처 지속성을 확보하려 노력해요.

[ 이벤트 기반 아키텍처(Event-Driven Architecture) ]
Microservices 패턴이 유행하고 있지만 단지 모듈 관계에 HTTP 요청을 적용하는 것만으론 해결되는 문제보다 유발되는 문제가 더 많아질 수 있어요.
강남언니 팀 개발자는 도메인 주도 설계에 기반해 시스템 내 경계를 설정하고 분리된 요소들이 비동기 이벤트를 사용해 유연하게 통합되도록 아키텍처를 설계해요.



- 과제 전형
    - rest api
    - 디자인 패턴
    - jpa
    - 익셉션 (에러 처리)
    - 테스트 코드
    - 주석, 로그
    - 유효성 검증 로직 (@Valid 와 @Validated)
    - aop 적용 - ex) logTracer
    - 서버에 따른 log 설정 분기
    - interceptor 적용 - ex) 로그인
    - 동시성 이슈 고려
    	- application
    	- db
    	- redis

    - 도메인 주도 설계?
    - 데이터 삽입 방법 고려
    	ex) test Container
    	    테스트 데이터 삽입 버튼?
    - 테스트 커버리지?
    - springSecurity 도입 고려

    -> 지원하려는 팀 기술스택 고려

    -> 게시판, 파일 첨부 기능


    https://www.wanted.co.kr/events/22_12_s01_b01

    API 가 처리해야 하는 로직
    API 요청 포맷 및 응답 포맷
    오류 처리 방식

    이해하기 쉬운 코드인가?
    일관성 있게 작성된 코드인가?
    효율성이 좋은 코드인가?
    적절한 자료구조 및 디자인 패턴을 사용했는가?
    테스트를 작성했는가? 테스트에서 에지 케이스(edge case)까지 커버했는가?

    코딩 과제에서는 필수 요구사항을 정확히 이해하고 구현하는 것이 가장 우선입니다.
    기능을 정확하게 구현했는지 확인할 수 있는 가장 좋은 방법은 바로 테스트 코드를 통한 검증입니다.
    코드와 테스트를 다 작성한 뒤에는 다시 한번 코드를 읽어보며 더 개선할 부분은 없는지 점검하고, 코드의 가독성과 효율성에 집중해서 리팩토링 해 보세요.
    README 작성하기
        프로젝트 구성 - 전체 구조를 어떻게 설계했는지 설명하기 (필요에 따라 그래프나 다이아그램 활용)
        기능 목록 - 요구사항을 다시 한 번 요약하고, 각 기능을 어떻게 구현했는지 설명하기
        사용한 기술 스택 및 라이브러리 - 어떤 언어와 버전을 사용했는지 (예제: Java 11), 외부 라이브러리를 사용했다면 어떤 기준으로 선택해 사용했는지 명시하기
        코드 실행 방법 - 면접관이 직접 코드를 실행해 볼 수 있도록 실행 방법 안내하기



** @Valid 와 @Validated 를 이용한 유효성 검증의 동작 원리 및 사용법 예시
    https://mangkyu.tistory.com/174

    @Validated 를 사용하면 컨트롤러, 서비스, 레포지토리 등 계층에 무관하게 스프링 빈이라면 유효성 검증을 진행할 수 있다.
    대신 클래스에는 유효성 검증 AOP 가 적용되도록 @Validated 를, 검증을 진행할 메소드에는 @Valid 를 선언해주어야 한다.



3. 등가 비교 가능
- 값 끼리는 동일성, 동등성 비교가 가능하다
동일성(Identity) 비교: 참조값 비교, == 비교 (JAVA 기본 primitive 타입)
동등성(Equivalance) 비교: 내부 값 비교, equals() (이외 나머지)
(동등싱 버교를 하기 위해서는 equals 메소드를 별도로 오버라이딩 해야한다.)

++ 토막 상식 ++
왜 IDE에서는 equals() 메소드를 오버리이딩 할 때 hashCode() 메소드도 같이 만들어줄까?
- hash값을 사용하는 컬렉션(HashMap, HashSet 등)은 객체가 동일한지를 판별할 때 hashCode() 메소드를 먼저 사용하고, 같은 경우에만 equals() 메소드롤 사용하기 때문이다.
- 따라서 hashCode() 메소드가 정의가 안되어있으면 equals() 메소드가 true를 반환한다 해도 그 이전에 hashCode() 메소드에서 false가 나버리기 때문에 두 객체를 서로 다른 객체로 인식하게 된다
(따로 hashCode 메소드를 정의하지 않으면 Object에 정의된 hashCode(), 객체의 고유한 주소 값을 변환 후 리턴함)
* equals()로 비교한 두 객체가 동일하다면 hashCode() 값도 같아야 한다


** Intellij http 를 통해 api 를 테스트
    https://sihyung92.oopy.io/etc/intellij/2

***** @ControllerAdvice 을 이용한 Exception 처리
    https://bamdule.tistory.com/92

***** Spring 의 다양한 예외 처리 방법(ExceptionHandler, ControllerAdvice 등) 완벽하게 이해하기
    https://mangkyu.tistory.com/204

***** @RestControllerAdvice 를 이용한 Spring 예외 처리 방법
    https://mangkyu.tistory.com/205

** REST API 를 설계할 때 명심해야 할 모범 사례
    https://www.freecodecamp.org/korean/news/rest-api-mobeom-sarye-rest-endeupointeu-seolgye-yesi/

** RESTful API 설계 가이드
    https://sanghaklee.tistory.com/57

** REST / REST API 개념과 적용 + 코드 예제 (SpringBoot 기반)
    https://creamilk88.tistory.com/184

** Ajax 통신을 활용한 json 데이터 불러오기(get 방식)
    https://programmings.tistory.com/12

** ajax html
    https://yejip.com/web/2020-12-14-ajax1/

** @PathVariable 사용하는 이유
    https://okky.kr/questions/826596

** 활성 프로파일(Profile)의 관리를 위한 @Profile 과 @ActiveProfiles
    https://mangkyu.tistory.com/178

* DDD
    https://velog.io/@dnflekf2748/DDDDomain-Driven-Design

* DDD 학습 자료 모음
    https://java-boy.tistory.com/91

* DDD - #2 아키텍처
    https://stylishc.tistory.com/144

* DTO 와 Domain Model 을 분리해야 하는 이유
    https://umbum.dev/1206?category=1062058

* DTO <-> Entity 간 변환, 어느 Layer에서 하는게 좋을까?
    https://velog.io/@jsb100800/Spring-boot-DTO-Entity-%EA%B0%84-%EB%B3%80%ED%99%98-%EC%96%B4%EB%8A%90-Layer%EC%97%90%EC%84%9C-%ED%95%98%EB%8A%94%EA%B2%8C-%EC%A2%8B%EC%9D%84%EA%B9%8C

* 디렉터리 패키지 구조의 선택
    https://velog.io/@jsb100800/Spring-boot-directory-package

* 빌더 패턴
    https://johngrib.github.io/wiki/pattern/builder/

    @Builder 를 클래스에 달아주면 @AllArgsConstructor 도 같이 달아주는 것과 같기 때문에 바람직하지 않다.
    가급적 직접 만든 생성자에 달아주는 것이 낫다. 나는 회사에서 코딩할 때에는 절대로 @Builder 를 클래스에 달아주지 않는다.

- Spring Boot + Thymeleaf + Bootstrap 5 + gradle
    https://helloworld-japan.tistory.com/17

* Querydsl-활용법 (2020 우아한테크콘서트 수십억건에서 Querydsl 사용하기)
    https://velog.io/@youngerjesus/%EC%9A%B0%EC%95%84%ED%95%9C-%ED%98%95%EC%A0%9C%EB%93%A4%EC%9D%98-Querydsl-%ED%99%9C%EC%9A%A9%EB%B2%95

* sql 최적화
    https://d2.naver.com/helloworld/1155

* mysql 커버링 인덱스
    https://gywn.net/2012/04/mysql-covering-index/https://gywn.net/2012/04/mysql-covering-index/

* Querydsl Select 필드로 Entity 사용시 주의 사항
    https://jojoldu.tistory.com/518

* JPA 도입 — OneToOne 관계에서의 LazyLoading
    https://yongkyu-jang.medium.com/jpa-%EB%8F%84%EC%9E%85-onetoone-%EA%B4%80%EA%B3%84%EC%97%90%EC%84%9C%EC%9D%98-lazyloading-%EC%9D%B4%EC%8A%88-1-6d19edf5f4d3

* JPAQueryFactory
    https://devfunny.tistory.com/845

** [대규모 시스템 설계] 처리율 제한 장치
    https://keepbang.tistory.com/40

** 멀티모듈 의존성
    core의 의존성을 compile로 선언한 이유
    위에서 core 의존성을 추가할 때 compile을 사용했는데 그 이유는 implementation은 직접 의존하는 모듈(core)외에서는 사용할 수 없기 때문이다.
    즉 core의 spring-boot-starter를 implementation으로 선언할 경우 api에서는 spring-boot-starter를 가져오지 않는다.

    7.0버전 이상부터는 api 키워드를 사용할 수 있다. api는 compile이랑 비슷한 키워드라 생각하면 된다.
    만약 gradle 버전을 올리고 싶다면 root 프로젝트 위치에서 해당 명령어를 통해 gradle 버전을 변경할 수 있다.

    api를 사용하기 위해서는 root build.gradle의 subprojects의 다음을 수정해준다.
    apply plugin:’java’ → apply plugin:’java-library’
    그리고 다음처럼 의존성을 추가하면 된다.

    bootJar, jar
    core 모듈의 경우 main 메서드 없이 라이브러리 역할을 하는 모듈이므로 BootJar이 아닌 jar파일로 생성되고 다른 프로젝트에 첨부될 것입니다.
    따라서 bootJar은 false, jar은 true로 설정합니다.
    implementation vs api
    api는 compile이 deprecated되고 대체된 방식입니다.
    implementation은 하위 의존에 대한 접근을 제한하고 api는 공개합니다.

    C Module에서 implementation을 사용해서 B를 사용했기 때문에 B에서 제공하는 기능만 사용 가능하고 B 모듈에서 가져온 다른 의존성에 대해서는 접근할 수 없습니다.
    C -> B -> A 에서 B까지만 접근할 수 있다는 의미입니다.
    그래서 보통 개발할 때 domain 모듈 계층을 최종으로 조합하여 사용하는 어플리케이션 모듈 계층에서는 implementation을 사용하고, 그 외 계층에서는 api 방식을 사용하여 개발합니다.


    https://cjw-awdsd.tistory.com/55
    https://livenow14.tistory.com/79
    https://backtony.github.io/spring/2022-06-02-spring-module-1/

** 도메인 주도 설계 구현과 핵심 개념 익히기
    http://www.yes24.com/Product/Goods/27750871

***** Event Driven Architecture란?
    https://medium.com/dtevangelist/event-driven-microservice-%EB%9E%80-54b4eaf7cc4a

** 스프링 이벤트 기능을 사용할 때의 고려할 점
    https://findstar.pe.kr/2022/09/17/points-to-consider-when-using-the-Spring-Events-feature/

** [Spring] 스프링 이벤트를 활용하여 서비스 간의 의존성 제거하기
    https://wisdom-and-record.tistory.com/133

** 도메인 지식 탐구를 위한 이벤트 스토밍 Event Storming
    https://www.youtube.com/watch?v=hUcpv5fdCIk

** Spring Event 정리
    https://steady-coding.tistory.com/633

** 모던 자바8
    https://www.moreagile.net/2015/12/modernjava4.html

** 이벤트 드리븐 적재적소에 사용하기
    https://tech.kakaopay.com/post/event-driven-architecture/

** 우아한 형제들 기술 블로그 이벤트 드리븐 관련 (파일럿 프로젝트)
    https://techblog.woowahan.com/7835/
    https://techblog.woowahan.com/10600/

** 우아한 세미나 멀티모듈
    https://hyeon9mak.github.io/woowahan-multi-module/

** 스프링 이벤트 3 - 이벤트 부가 기능 적용
    https://ivvve.github.io/2019/06/04/java/Spring/event-listener-3/

** Async 를 이용하여 eventListener 사용하기
    https://leeheefull.tistory.com/25

** Transaction 을 주의하여 async 사용하기
    https://leeheefull.tistory.com/15

** spring @Async 사용하기
    https://king-veloper.tistory.com/15

** Async-Annotation비동기-메소드-사용하기
    https://velog.io/@gillog/Spring-Async-Annotation%EB%B9%84%EB%8F%99%EA%B8%B0-%EB%A9%94%EC%86%8C%EB%93%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0

** 비동기, 이벤트를 곁들인
    https://tecoble.techcourse.co.kr/post/2021-07-31-email-async-event/

** Spring Event + Async + AOP 적용해보기
    https://supawer0728.github.io/2018/03/24/spring-event/

***** 비관적 락 테스트 코드
    https://isntyet.github.io/jpa/JPA-%EB%B9%84%EA%B4%80%EC%A0%81-%EC%9E%A0%EA%B8%88(Pessimistic-Lock)/

** JPA 락 종류에 따른 테스트 코드
    https://ojt90902.tistory.com/723#rp

** 'Spring 6의 새로운 HTTP Interface와 3 가지 REST Clients 라이브 코딩
    https://sslblog.tistory.com/213
    https://www.youtube.com/watch?v=Kb37Q5GCyZs

** 스프링 이벤트
    https://jobc.tistory.com/200

***** 외부 라이브러리를 사용하는 것
    멀티모듈 과제를 진행하면서 외부 라이브러리를 사용했는데요. 외부 라이브러리를 선택할 때 여러 가지 기준에 대해서 피드백 받은 부분도 함께 공유해 드리려고 합니다.

    잘 아시다시피 외부 라이브러리는 직접 작성한 것이 아니기에 프로젝트에 도입할 때 고려해야 할 부분이 많습니다. 스타 많으면 장땡..

    제어권의 유무 직접 작성한 코드를 사용하는 것이 아니기에 외부 라이브러리를 수정하거나/수정 요청하는 등의 작업이 가능해야 합니다. 직접적으로 코드를 제어할 수 있거나 수정요청 시 빠르게 반영되는 것이 중요합니다.
    공식지원 유무 스프링 진영 정확하게는 스프링 부트 환경에서 공식적으로 지원하는 라이브러리인지도 중요한 기준이 될 수 있습니다. 프레임워크 차원에서 외부 라이브러리의 의존성을 관리하고 지원하기 때문에 조금 더 안정성이 올라갈 수 있습니다.
    커스텀 지원 외부 라이브러리를 사용하다 보면 불편한 부분들에 대해서 혹은 사용자의 입맛에 맞게 확장할 수 있는 형태인지도 중요합니다. 이러한 확장 포인트가 잘 열려있으며 사용하는 데 어려움이 없는 것도 중요합니다.
    안정성 많은 사람이 사용하고 검증한 라이브러리인지 등 안정적으로 운영 중인지에 대한 요인들을 검토합니다.
    마지막 수정/커밋 위에서 제시한 기준을 충족하기 위해서는 사용자가 요구하는 방향으로 지속해서 유지 보수되어야 하기 때문에 마지막 커밋은 중요합니다.
    외부 라이브러리를 사용한다는 것은 외부에 의존성을 가진다는 의미이기에 선택이 조심스러운데요!
    위와 같은 기준 + 본인의 상황에 적절한 기준을 추가해서 추가/삭제하시면 좋을 것 같습니다.

** 스프링 이벤트 테스트
    https://mandykr.tistory.com/80

***** 스프링 비동기 처리
    http://dveamer.github.io/java/SpringAsync.html

***** 예외 먹는 @TransactionalEventListener
    https://lenditkr.github.io/spring/transactional-event-listener/index.html

***** 엔티티 히스토리를 편리하게 관리해주는 스프링 데이터 Envers
    https://www.youtube.com/watch?v=fGPaj-rlN5w

***** JPA TIP
    https://github.com/Youngerjesus/Querydsl/blob/4551f6b70f4254292384a99b43cb72277fbdf284/src/main/java/com/study/querydsl/repository/WoowahwanMemberRepository.java#L45

    - @Where(clause = "deleted = 0")

    - @Table(name = "order_table", indexes = {
              @Index(name = "idx_owner", columnList = "owner_id"),
              @Index(name = "idx_occurrenceDate", columnList = "occurrenceDate")
      })

***** test tip
    롤백되는 기능은 편리하지만, 만약 트랜잭션이 보장되지 않았을 경우 실패하는 테스트를 작성했을 때 오히려 성공하는 경우가 많아서 사용하지 않는다고 하셨습니다.
    그래서 다음과 같이 @SpringBootTest와 함께 @After절에서 모든 데이터를 직접 삭제하는 방식으로 테스트를 작성한다고 가이드해 주셨습니다.

****** spring security 관련 파일럿 프로젝트  + 엔티티 객체 참조와 ID 참조
    https://techblog.woowahan.com/7828/

***** query dsl 만으로 repository 구성
    https://techblog.woowahan.com/8357/
    https://batory.tistory.com/496

******* [QueryDSL] queryDSL 프로젝트 적용 후기 및 트러블슈팅
    https://kth990303.tistory.com/378

***** [Spring Data JPA] findByXXXId 는 불필요한 join을 유발한다
    https://velog.io/@ohzzi/Data-Jpa-findByXXXId-%EB%8A%94-%EB%B6%88%ED%95%84%EC%9A%94%ED%95%9C-join%EC%9D%84-%EC%9C%A0%EB%B0%9C%ED%95%9C%EB%8B%A4

****** subprojects 말고 configure로 원하는 모듈만 따로 설정해 보자!
    https://techblog.woowahan.com/8357/


- 회원 (MEMBER)
    - 가입 (POST)
        - spring security + jwt

    - 로그인 (보류)

- 방 (ROOM)
    - 등록 (POST)
    - 수정 (PATCH)
    - 삭제 (DELETE)      -> C, U, D - @PathVariable 적용
    - 조회 (GET)
        - 내방 하나만 필터링 해서 조회    ex) /room/{member_id}/{room_number}
        - 내방 목록 조회               ex) /room/{member_id}
        - 전체방 조회                  ex) /room


* 조회 paging 기능 구현                ex) ?page=1&size=10
    -> 내방 목록 조회, 전체방 조회 경우 적용
    -> 1<= page, size <= 100

    * Querydsl 에서 커버링 인덱스 사용하기
    * 페이징 성능 개선을 위해 No Offset 사용하기
    * 동적쿼리는 BooleanExpression 사용하기



* api 문서 작성 (spring rest docs)

* def queryDslProjects = [project(':hashtagmap-core'), project(':hashtagmap-web'), project(':hashtagmap-admin'), project(':hashtagmap-batch')]
    적용하기

* 모듈간 의존성 고려하기

* @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")   -> base entity 에 적용

* paymentDate 는 결제일시를 나타내기 위해 타입을 LocalDateTime으로 했는데요. paymentDate 라는 네이밍으로는 타입과 일치하지 않아 맞추는 것이 좋다고 합니다. LocalDateTime 이면 paymentDateTime, LocalDate 이면 paymentDate 이렇게 하면 필드명만 보고도 타입을 유추할 수 있습니다.

* LocalDateTime 데이터를 웹에서 보여줄 때 yyyy-MM-dd HH:mm:ss 형태로 보여주고 싶어서 JsonFormat 을 사용했는데요. 하지만 Entity를 건드리기보다 이 Entity의 ResponseDto 에서 JsonFormat을 사용하여 데이터를 조작해야합니다.
  Entity는 우리가 지켜야할 고유의 영역입니다. 만약 이 Entity를 쓰는 API가 신규로 추가되고 그 API에서는 yyyyMMdd HH:mm:ss 로 포맷이 필요하면 어떻게 해야할까요? Entity를 변경하기 보다는 이 Entity를 사용하는 DTO를 사용하여 최대한 변경에 대응하기 쉽도록 합니다.

* deleted 라는 필드는 삭제여부를 나타내고, "Y", "N"으로 데이터를 두었었습니다. 하지만 이런 플래그를 사용할 때는 String 을 사용하지 않습니다. 다른 문자도 들어갈 수 있기때문에 boolean 타입을 사용해야 합니다.

* 결제정보인 Payment Entity와, 업주정보인 Owner Entity 는 Sales Entity와 연관관계를 맺고 있는데요. 위의 코드 와 같이 중간 중간에 위치하고 있어 가독성이 떨어집니다. 실제로 확인할 컬럼을 보기가 어려운데요. 연관관계는 하단으로 내려서 가독성을 좋게 하는 것이 좋습니다.

* @JoinColumn(name="owner_id", referencedColumnName = "id")
      private Owner owner;

=> https://techblog.woowahan.com/2614/

* Spring Profile을 이용하여 H2와 MySQL를 선택해서 사용
  MySQL(운영), H2(테스트)

******* spring security 예외처리
    https://bcp0109.tistory.com/303

****** spring security jwt 인증 예시
    https://ws-pace.tistory.com/82

***** Spring Boot OncePerRequestFilter shouldNotFilter Junit
    https://stackoverflow.com/questions/52902524/spring-boot-onceperrequestfilter-shouldnotfilter-junit

*** jwt filter 예외처리
    https://sup2is.github.io/2020/03/05/spring-security-login-with-jwt.html

    https://velog.io/@sussa3007/Spring-Spring-Security-JWT-%EC%9E%90%EA%B2%A9-%EC%A6%9D%EB%AA%85-%EB%B0%8F-%EA%B6%8C%ED%95%9C-%EA%B2%80%EC%A6%9D-%EA%B5%AC%ED%98%8403
    try {
                Map<String, Object> claims = verifyJws(request);
                setAuthenticationToContext(claims);
            } catch (SignatureException se) {
              request.setAttribute("exception", se);
            } catch (ExpiredJwtException ee) {
              request.setAttribute("exception", ee);
            } catch (Exception e) {
              request.setAttribute("exception", e);
            }


// Jwt 토큰 유효성 검사
    public static boolean validateToken(String token) {
        try {
            Jwts.parser().setSigningKey(JWT_SECRET).parseClaimsJws(token);
            return true;
        } catch (SignatureException ex) {
            log.error("Invalid JWT signature");
        } catch (MalformedJwtException ex) {
            log.error("Invalid JWT token");
        } catch (ExpiredJwtException ex) {
            log.error("Expired JWT token");
        } catch (UnsupportedJwtException ex) {
            log.error("Unsupported JWT token");
        } catch (IllegalArgumentException ex) {
            log.error("JWT claims string is empty.");
        }
        return false;
    }

****** 이력관리 테스트 코드
https://github.com/young891221/blog/blob/master/Hibernate/Spring%20Boot%20%2B%20Envers%EB%A1%9C%20%EC%97%94%ED%8B%B0%ED%8B%B0%20%EC%9D%B4%EB%A0%A5%EA%B4%80%EB%A6%AC%ED%95%98%EA%B8%B0.md


******* 가상 면접 사례로 배우는 대규모 시스템 설계 기초 책

* [HTTP] HTTP 메서드에 관해 아는대로 설명해주세요
    https://velog.io/@haron/HTTP-%EB%A9%94%EC%84%9C%EB%93%9C%EC%97%90-%EB%8C%80%ED%95%B4-%EC%95%84%EB%8A%94%EB%8C%80%EB%A1%9C-%EB%A7%90%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94


** 인텔리제이 tip
    https://blog.jetbrains.com/ko/idea/2021/09/10-places-you-don-t-need-to-use-the-mouse-in-intellij-idea/


****** @RestControllerAdvice를 이용한 Spring 예외 처리 방법
    https://mangkyu.tistory.com/205

@Getter
@Builder
@RequiredArgsConstructor
public class ErrorResponse {

    private final String code;
    private final String message;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    private final List<ValidationError> errors;

    @Getter
    @Builder
    @RequiredArgsConstructor
    public static class ValidationError {

        private final String field;
        private final String message;

        public static ValidationError of(final FieldError fieldError) {
            return ValidationError.builder()
                    .field(fieldError.getField())
                    .message(fieldError.getDefaultMessage())
                    .build();
        }
    }
}


* 면접 tip (공백기간 길 때)
    https://www.jobplanet.co.kr/contents/news-2442

****** ApplicationEventPublisher 기반으로 강결합 및 트랜잭션 문제 해결
    https://cheese10yun.github.io/event-transaction/
    https://cheese10yun.github.io/application-event/

* 인텔리제이 단축키
    https://ktae23.tistory.com/188

