- 프로세스 & 스레드
    - 프로세스 & 스레드 개념
        - 프로세스 : 운영체제로부터 자원을 할당받은 작업의 단위
        - 스레드 : 프로세스가 할당받은 자원을 이용하는 실행 흐름의 단위

        * 프로그램
            - 윈도우의 *.exe 파일 같은 컴퓨터에서 실행할 수 있는 파일. 단, 아직 파일을 실행하지 않은 상태이기 때문에 정적 프로그램 줄여서 프로그램
            - 프로그램은 쉽게 말해서 그냥 코드 덩어리

        - 프로세스
            - 프로그램이 그냥 코드 덩어리이면, 프로세스는 프로그램을 실행시켜 정적인 프로그램이 동적으로 변하여 프로그램이 돌아가고 있는 상태.
              즉, 컴퓨터에서 작업 중인 프로그램을 의미.

            - 모든 프로그램은 운영체제가 실행되기 위한 메모리 공간을 할당해 줘야 실행될 수 있다. 그래서 프로그램을 실행하는 순간 파일은 컴퓨터 메모리에 올라가게 되고,
              운영체제로부터 시스템 자원(CPU)을 할당받아 프로그램 코드를 실행시켜 우리가 서비스를 이용할 수 있게 되는 것.

        - 스레드
            - 프로세스의 한계
                - 멀티 작업을 위해 동일한 프로그램을 여러 개의 프로세스로 만들게 되면, 그만큼 메모리를 차지하고 CPU 에서 할당받은 자원이 중복되게 될 것이다.
                  스레드는 이러한 프로세스 특성의 한계를 해결하기 위해 탄생.

            - 스레드의 개념
                - 하나의 프로세스 내에서 동시에 진행되는 작업 갈래, 흐름의 단위를 말한다.


    - 프로세스 & 스레드의 메모리
        - 프로세스의 자원 구조
            - 코드 영역
                - 프로그래머가 작성한 프로그램 함수들의 코드가 CPU 가 해석가능한 기계어 형태로 저장되어 있다.
            - 데이터 영역
                - 코드가 실행되면서 사용하는 전역 변수나 각종 데이터들이 모여있다.
            - 스택 영역
                - 지역 변수와 같은 호출한 함수가 종료되면 되돌아올 임시적인 자료를 저장하는 독립적인 공간.
            - 힙 영역
                - 생성자, 인스턴스와 같은 동적으로 할당되는 데이터들을 위해 존재하는 공간. 사용자에 의해 메모리 공간이 동적으로 할당되고 해제된다.

        - 스레드의 자원 공유
            - 스레드가 여러개 있으면 우리가 파일을 다운 받으며 동시에 웹 서핑을 할 수 있게 해준다. 스레드끼리 프로세스의 자원을 공유하면서
              프로세스 실행 흐름의 일부가 되기 때문에 동시 작업이 가능한 것이다.
            - 스레드는 stack 만 할당받아 복사하고 code, data, heap 은 프로세스 내의 다른 스레드들과 공유된다.
            - 이렇게 구성한 이유는 하나의 프로세스를 다수의 실행 단위인 스레드로 구분하여 자원을 공유하고, 자원 생성과 관리의 중복성을
              최소화하여 수행 능력을 올리기 위해서이다.

        - 프로세스의 자원 공유
            - 기본적으로 각 프로세스는 메모리에 별도의 주소 공간에서 실행되기 때문에, 한 프로세스는 다른 프로세스의 변수나 자료구조에 접근할 수 없다.
            - IPC, LPC 를 사용하면 가능하지만 프로세스 자원 공유는 단순히 CPU 레지스터 교체 뿐만이 아니라 RAM 과 CPU 사이의 캐시 메모리까지
              초기화되기 때문에 자원 부담이 크다는 단점이 있다. 그래서 다중 작업이 필요한 경우 스레드를 이용하는 것이 훨씬 효율적이라,
              현대 컴퓨터 운영체제에서는 다중 프로세싱을 지원하고 있지만 다중 스레딩을 기본으로 하고 있다.

    - 프로세스 & 스레드의 동시 실행 원리
        - 우리가 음악을 들으면서, 웹 서핑을 하고, 메신저의 메시지를 확인할 수 있는 이유는 컴퓨터가 내부적으로 프로세스와 스레드를 동시에
          처리하는 멀티 태스킹 기술 때문이다.

        - 멀티 코어와 스레드
            - 코어는 말그대로 CPU 코어 유닛이다. 즉, 명령어를 메모리에서 뽑아 해석하고 실행하는 반도체 유닛을 말한다.
              4 코어가 물리적 코어 갯수면, 8 스레드는 논리적 코어 갯수를 말한다. 이 경우 물리적 코어 하난가 스레드 두 개 이상을 동시에 실행 가능하다는 의미.
            - 여기서의 CPU 의 스레드는 프로세스의 스레드완느 조금 다른 개념이다. 엄밀히 말하면 CPU 의 스레드는 하드웨어적 스레드이고
              프로그램의 스레드는 소프트웨어적 스레드로 구분한다.

        - CPU 의 작업 처리 방식
            - 병렬성
                - 명령어를 메모리에서 뽑아 해석하고 실행하는 반도체 유닛인 여러 개의 코어에 맞춰 여러 개의 프로세스, 스레드를 돌려
                  병렬로 작업들을 동시 수행하는 것을 말한다.

            - 동시성
                - 프로세스들을 계속 번갈아가면서 조금씩 처리함으로써 마치 프로그램이 동시에 실행되는 것처럼 보이는 것이다.
                  이 때 작업들을 번갈아가면서 실행할 때 작업들을 아주 잘게 나누어 조금씩만 작업을 수행하고 다음 작업으로 넘어가는 식으로 동작한다.
                  이렇게 작업들을 번갈아 바꾸는 것을 Context Switching 이라고 부른다.

            - 동시성이 필요한 이유
                1. 하드웨어적 한계
                    - 탑재할 수 있는 코어에는 한계가 있기에 수십수백개의 프로세스를 돌리기 위해선 결국 동시성이 필요하다.
                2. 논리적인 효율
                    - 만약 오래 걸리는 작업을 먼저 실행할 경우 그 작업이 다 끝날 때까지 기다려야 하므로 비효율적이다.
                      이를 극복하기 위해 작업을 아주 잘게 나눠 번갈아 가면서 처리하는 동시성 개념을 채택

    - 프로세스 & 스레드의 생명주기
        - 프로세스 스케줄링
            - 운영제체제에서 CPU 를 사용할 수 있는 프로세스를 선택하고, CPU 를 할당하는 작업.
            - 프로세스의 우선순위, 작업량 등을 고려하여 효율적으로 배치하여 CPU 를 효율적으로 사용하며 시스템 전반적인 성능을 향상시킨다.
              그래서 스케줄링은 멀티 태스킹 작업을 만들어내는 데에 있어서 핵심적인 부분
            - 알고리즘 ex) FCFS, SJF...

        - 프로세스 상태
            - 프로세스가 실행되는 동안 변경되는 고유 상태를 의미
                생성 (new)	프로세스가 생성되고 아직 준비가 되지 않은 상태
                준비 (ready)	프로세스가 실행을 위해 기다리는 상태
                            CPU를 할당받을 수 있는 상태이며, 언제든지 실행될 준비가 되어있다.
                실행 (running)	프로세스가 CPU를 할당받아 실행되는 상태
                대기 (waiting)	프로세스가 특정 이벤트(입출력 요청 등)가 발생하여 대기하는 상태
                                CPU를 할당받지 못하며, 이벤트가 발생하여 다시 READY 상태로 전환될 때까지 대기한다.
                종료 (terminated)	프로세스가 실행을 완료하고 종료된 상태
                                    더 이상 실행될 수 없으며, 메모리에서 제거되게 된다.

            - 프로세스 상태 전이
                - 프로세스가 실행되는 동안 상태가 OS 에 의해 변경되는 것을 말한다.
                - 예를 들어, READY 상태에 있는 여러 프로세스 중에서 어떤 프로세스를 RUNNING 상태로 바꿀지,
                  TERMINATED 상태에 있는 프로세스를 제거하고 READY 상태에 있는 다른 프로세스를 선택할지 스케쥴링 알고리즘에 의해 동작된다.

        - 프로세스 컨텍스트 스위칭
            - CPU 가 한 프로세스에서 다른 프로세스로 전환할 때 발생하는 일련의 과정.
            - CPU 는 한 번에 하나의 프로세스만 실행할 수 있으므로, 여러 개의 프로세스를 번갈아가며 실행하여 CPU 활용률을 높이기 위해 컨텍스트 스위칭이 필요한 것.
            - 동작 중인 프로세스가 대기를 하면서 해당 프로세스의 상태(Context)를 보관하고, 대기하고 있던 다음 순서의 프로세스가 동작하면서 이전에 보관했던 프로세스의 상태를 복구하는 작업.
              이러한 컨텍스트 스위칭이 일어날 때 다음번 프로세스는 스케줄러가 결정하게 된다.

            - PCB (Process Control Block)
                - PCB(프로세스 제어 블록)는 운영체제에서 프로세스를 관리하기 위해 해당 프로세스의 상태 정보를 담고 있는 자료구조.
                  프로세스 스케줄링을 위해 프로세스에 관한 모든 정보를 저장하는 임시 저장소.
                - 프로세스가 생성되면 메모리에 해당 프로세스의 PCB가 함께 생성, 종료시 삭제

            - Context Switching Overhead
                - 이러한 컨텍스트 스위칭 과정은 사용자로금 빠른 반응성과 동시성을 제공하지만,
                  실행되는 프로세스의 변경 과정에서 프로세스의 상태, 레지스터 값 등이 저장되고 불러오는 등의 작업이 수행하기 때문에 시스템에 많은 부담을 주게된다.
                    - PCB 저장 및 복원 비용
                    - CPU 캐시 메모리 무효화에 따른 비용
                    - 프로세스 스케줄링 비용
                    -> 컨텍스트 스위칭 과정에서 PCB를 저장하고 복원하는데 비용이 발생하며, 프로세스 자체가 교체되는 것이니 CPU의 캐시 메모리에 저장된 데이터가 무효화가 된다.
                      이 과정에서는 메모리 접근 시간이 늘어나고, 성능 저하가 발생할 수 있다. 또한 CPU 스케줄링 알고리즘에 따라 프로세스를 선택하는 비용도 만만치 않다.

        - 스레드 스케줄링
            - 운영체제에서 다중 스레드를 관리하며, CPU를 사용할 수 있는 스레드를 선택하고, CPU를 할당하는 작업

        - 스레드 상태
            NEW	스레드가 생성되고 아직 호출되지 않은 상태
            RUNNABLE	스레드가 실행되기 위해 기다리는 상태
                        CPU를 할당받을 수 있는 상태이며, 언제든지 실행될 준비가 되어있다.
            BLOCKED	스레드가 특정 이벤트(입출력 요청 등)가 발생하여 대기하는 상태
                    CPU를 할당받지 못하며, 이벤트가 발생하여 다시 RUNNABLE 상태로 전환될 때까지 대기한다.
            TERMINATED	스레드가 실행을 완료하고 종료된 상태
                        더 이상 실행될 수 없으며, 메모리에서 제거된다.

        - 스레드 컨텍스트 스위칭
            - 멀티 스레딩 환경에서 스레드 간의 실행을 전환하는 기술

            - TCB (Thread Control Block)
                - PCB 처럼, TCB(스레드 제어 블록)는 각 스레드마다 운영 체제에서 유지하는 스레드에 대한 정보를 담고 있는 자료구조
                - TCB는 PCB 안에 들어있다.
                - 스레드 간의 자원 공유와 동기화도 TCB를 사용하여 관리된다.

        - 프로세스 컨텍스트 스위칭 vs 스레드 컨텍스트 스위칭
            1. TCB가 PCB보다 가볍다
                - 프로세스 내의 스레드들은 text, data, heap 영역 메모리를 공유하기 때문에 TCB에는 stack 및 간단한 register 포인터 정보만을
                  저장하기 때문에 PCB보다 TCB가 가벼워 더 빨리 읽고 쓸수 있다.
            2. 캐시 메모리 초기화 여부
                - 프로세스 컨텍스트 스위칭이 일어날 경우, 다른 프로세스의 실행으로 인해 CPU가 새로운 명령어와 데이터를 로드해야 하기 때문에
                  CPU 캐시 메모리를 초기화 하여야 한다. 이것이 프로세스 컨텍스트 스위칭에 부담이 되는 요소이다.
                - 스레드 컨텍스트 스위칭일 경우, 프로세스 내 스레드 간에 스택과 레지스터 값 등 일부 컨텍스트 정보만 변경되므로 CPU 캐시 메모리는 초기화되지 않는다.
            3. 자원 동기화 문제
                - 스레드 컨텍스트 스위칭이 발생해 다른 스레드가 heap 영역의 공유 데이터에 접근할때, 이전 스레드가 이미 공유 자원을 사용하고 있는 경우 동기화 문제가 발생할 수 있다.
                  이것을 스레드 간에 경쟁 조건 (race condition)이라고 한다.
                - 프로세스는 기본적으로 독립된 공간이지만, IPC와 같은 공유 자원을 사용하는 경우에 똑같이 경쟁 조건이 발생 할 수가 있다.
                  따라서 이들을 해결하기 위해선 각 상황에 적절한 공유 자원에 대한 동기화 메커니즘이 필요해진다.

    - Multi Process 와 Multi Thread
        - 멀티 프로세스와 멀티 스레드는 한 어플리케이션에 대한 처리방식
        - 단순히 프로그램을 여러개 띄워놓는 것이 멀티 프로세스가 아니라 이 둘은 언제 어느때에 어떤 방식으로 처리하느냐에 따라 다른 것으로 이해해야 한다.

        - Multi Process
            - 정의
                - 운영체제에서 하나의 응용 프로그램에 대해 동시에 여러 개의 프로세스를 실행할 수 있게 하는 기술
                - 보통 하나의 프로그램 실행에 대해 하나의 프로세스가 메모리에 생성되지만, 부가적인 기능을 위해 여러개의 프로세스를 생성하는 것
                - 멀티 프로세스는 하나의 프로그램에서 여러 개의 프로세스를 실행하는 것을 의미하고, 멀티 프로세서는 여러 개의 CPU 코어가 하나의 시스템에서 동시에 실행되는 것을 의미한다.

            - 특징
                - 멀티 프로세스 내부를 보면, 하나의 부모 프로세스가 여러 개의 자식 프로세스를 생성함으로서 다중 프로세스를 구성하는 구조
                - 부모 프로세스와 자식 프로세스는 각각 고유한 PID(Process ID)를 가지고 있다. 이를 통해 부모 프로세스와의 통신이 가능하다.
                - 다만, 통신이 가능할 뿐이지, 부모 프로세스와 자식 프로세스는 엄연히 서로 다른 프로세스로 독립적으로 실행되며, 독립적인 메모리 공간을 가지고 있어 서로 다른 작업을 수행한다.
                  대표적인 예로 웹 브라우저의 상단 탭(Tab) 이나 새 창

            - 장점
                1. 프로그램 안전성
                    - 각 프로세스가 독립적인 메모리 공간을 가지므로, 한 프로세스가 비정상적으로 종료되어도 다른 프로세스에 영향을 주지 않는다.

                2. 프로그램 병렬성
                    - 멀티 프로세스와 여러개의 CPU 코어를 활용하여 둘의 시너지를 합쳐, 다중 CPU 시스템에서 각 프로세스를 병렬적으로 실행하여 성능을 향상 시킬 수 있다.

                3. 시스템 확장성
                    - 각 프로세스가 독립적이므로, 새로운 기능이나 모듈을 추가하거나 수정할때 다른 프로세스에 영향을 주지 않는다. 그래서 시스템의 규모를 쉽게 확장할 수 있다.
                    - 대규모 웹 서비스에서는 수많은 요청을 동시에 처리하기 위해 여러대의 서버를 두고 로드 밸런서(Load Balancer)와
                      같은 장비를 사용하여 클라이언트 요청 트래픽을 분산 시킨다. 이때 여러대의 서버는 컴퓨터를 여러개를 말하는 것일 수도 있고,
                      하나의 성능 좋은 컴퓨터에 여러개의 서버 프로세스를 두는 것을 말하기도 한다. 멀티 프로세스의 상황은 후자이다.
                    - 서버 클러스터(cluster) -> 하나의 컴퓨터에 여러개의 서버 프로세스를 띄움으로써 요청을 분산시키는 것

            - 단점
                1. Context Switching Overhead
                    - 프로세스를 컨텍스트 스위칭 하면, CPU는 다음 프로세스의 정보를 불러오기 위해 메모리를 검색하고, CPU 캐시 메모리를 초기화하며,
                      프로세스 상태를 저장하고, 불러올 데이터를 준비해야 하기 때문에, 이로 인한 빈번한 Context Switching 작업으로 인해 비용 오버헤드가 발생할 수 있게 된다.
                    - 따라서, 멀티 프로세스 환경에서는 Context Switching Overhead를 최소화하는 방법이 중요하다.
                    - 이를 위해서 프로세스 수를 적정하게 유지하거나, I/O 바운드 작업이 많은 프로세스와 CPU 바운드 작업이 많은 프로세스를 분리하여 관리하고,
                      CPU 캐시를 효율적으로 활용하는 등의 방법을 고려

                2. 자원 공유 비효율성
                    - 만일 각 프로세스간에 자원 공유가 필요할 경우 프로세스 사이의 어렵고 복잡한 통신 기법인 IPC(Inter-Process Commnuication)을 사용하여야 한다.
                      IPC란 운영체제 상에서 실행 중인 프로세스 간에 정보를 주고받는 메커니즘
                    - 파이프나 소켓과 같은 IPC 기법은 데이터를 복사하거나 버퍼링하는 과정에서 성능 저하가 발생할 수 있기 때문이다. 또한 코드의 복잡도를 증가시킨다.

        - Multi Thread
            - 정의
                - 스레드는 하나의 프로세스 내에 있는 실행 흐름이다. 그리고 멀티 스레드는 하나의 프로세스 안에 여러개의 스레드가 있는 것을 말한다.
                  따라서 하나의 프로그램에서 두가지 이상의 동작을 동시에 처리하도록 하는 행위가 가능해진다.

            - 특징
                - 윈도우, 리눅스 등 많은 운영체제들이 멀티 프로세싱을 지원하고 있지만 멀티 스레딩을 기본으로 하고 있다.

            - 장점
                1. 스레드는 프로세스보다 가벼움
                    - 일단 스레드는 프로세스 보다 용량이 가볍다. 그도 그럴게 스레드는 프로세스 내에서 생성되기 때문에 스레드의 실행 환경을 설정하는 작업이 매우 간단하여 생성 및 종료가 빠르다.
                    - 한 스레드는 프로세스와 달리, 코드, 데이터, 스택 영역을 제외한 나머지 자원을 서로 공유하기 때문에 기본적으로 내장되어 있는 데이터 용량이 프로세스보다 당연히 작다.
                    - 스레드를 생성하고 제거할 때, 프로세스 내부의 자원만을 관리하면 되기 때문에 프로세스 생성, 제거 보다 훨씬 빠른 것이다.

                2. 자원의 효율성
                    - 하나의 프로세스 내에서 여러 개의 스레드를 생성되기 때문에, heap 영역과 같은 공유 메모리에 대해 스레드 간에 자원을 공유가 가능
                    - 프로세스 간 통신 (IPC)을 사용하지 않고도 데이터를 공유할 수 있기 때문에, 자원의 효율적인 활용이 가능해 시스템 자원 소모가 줄어든다.

                3. Context Switching 비용 감소
                    - 스위칭할 때 스레드 간에 공유하는 자원을 제외한 스레드 정보(stack, register)만을 교체하면 되므로 프로세스 컨텍스트 스위칭 비용보다 상대적으로 낮은 것

                4. 응답 시간
                    - 멀티 스레드는 스레드 간의 통신이나 자원 공유가 더욱 용이하며, 프로세스 보다 가벼워 컨텍스트 스위칭 오버헤드도 작다.
                      따라서 멀티 프로세스 보다 응답 시간이 빠르다.
                    - 여러 개의 스레드가 하나의 프로세스 내에서 요청을 처리할 수 있으므로, 오버헤드가 감소해 더욱 빠른 응답 시간을 보장할 수 있는 것

            - 단점
                1. 안정성 문제
                    - 하나의 스레드에서 문제가 발생하면 다른 스레드들도 영향을 받아 전체 프로그램이 종료될 수 있다.
                    - 물론 이는 프로그래머의 역량에 따라 극복할 수 가 있다.
                        - 스레드에 에러가 발생할 경우 이에 대한 적절한 예외 처리를 잘 해놓는다던지
                        - 에러 발생 시 새로운 스레드를 생성하거나
                        - 스레드 풀(Thread Pool)에서 잔여 스레드를 가져오던지
                        하여 프로그램 종료를 방지할 수 있다.
                        다만, 이때 새로운 스레드 생성이나 놀고 있는 스레드 처리에 추가 비용이 발생하게 된다.

                2. 동기화로 인한 성능 저하
                    - 여러 개의 스레드가 공유 자원에 동시에 접근할 수 있기 때문에, 동기화 문제가 발생할 수 있다.
                    - 그러나 동기화 작업은 여러 스레드 접근을 제한하는 것이기 때문에 병목 현상이 일어나 성능이 저하될 가능성이 높다는 단점이 있다.
                    - 이를 해결하기 위해 임계 영역(Critical Section)에 대하여 뮤텍스(mutex), 또는 세마포어(Semaphore) 방식을 활용.

                    임계 영역(Critical Section)
                        - 멀티 스레드 프로그래밍에서 임계 영역은 공유 자원을 접근하는 코드 영역을 말한다. 대표적으로 전역 변수나 heap 메모리 영역을 들 수 있겠다.

                    뮤텍스(Mutex)
                        - 공유 자원에 대한 접근을 제어하기 위한 상호 배제 기법 중 하나로, 임계 영역에 진입하기 전에 락(lock)을 획득하고,
                          임계 영역을 빠져나올 때 락을 해제하여 다른 스레드들이 접근할 수 있도록 한다. 한마디로 오직 1개의 스레드만이 공유 자원에 접근할 수 있도록 제어하는 기법이다.

                    세마포어(Semaphore)
                        - 세마포어는 동시에 접근 가능한 스레드의 개수를 지정할 수 있다. 세마포어 값이 1이면 뮤텍스와 동일한 역할을 하며,
                          값이 2 이상이면 동시에 접근 가능한 스레드의 수를 제어할 수 있다. 스레드가 임계 영역에 진입하기 전에 세마포어 값을 확인하고,
                          값이 허용된 범위 내에 있을 때만 락을 획득할 수 있는 형식이다. 한마디로 뮤텍스 상위 호환 이라고 보면 된다.

                3. 데드락 (교착 상태)
                    - Deadlock 이란, 다수의 프로세스나 스레드가 서로 자원을 점유하고, 다른 프로세스나 스레드가 점유한 자원을 기다리는 상황에서 발생하는 교착 상태
                    - 이처럼 다수의 쓰레드가 같은 lock을 동시에, 다른 명령에 의해 획득하려 할 때 서로 절대 불가능한 일을 계속적으로 기다리는 상황을 이야기 한다.

                    - 이를 방지하기 위한 상호배제(Mutual Exclusion), 점유와 대기(Hold and Wait), 비선점(No Preemption), 순환 대기(Circular Wait) 등의 알고리즘을 통해 극복해야 한다.
                    - 다만, 데드락은 멀티 스레드만의 단점이라기 보다는 멀티 프로세스와 스레드 모델의 공통된 문제점이라고 말하는 것이 옳다.
                      왜냐하면 프로세스 끼리는 기본적으로 독립적인 메모리 공간이지만 IPC를 통해 공유 자원을 사용할 수 있기 때문에 멀티 스레드와 똑같이 교착 상태에 빠질 수 있기 때문이다.

                4. 그래도 Context Switching Overhead

                5. 디버깅이 어려움
                    - 멀티 스레드를 사용하면, 여러 개의 스레드가 동시에 실행되기 때문에, 각 스레드의 동작을 추적하기 어려울 수 있다.
                    - 따라서 스레드 간의 상호작용과 동기화 기법을 잘 이해하고, 디버깅 도구를 적극적으로 활용해야 한다.


