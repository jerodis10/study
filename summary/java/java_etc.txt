- Serializable 은 무엇일까요?  https://www.slideshare.net/sunnykwak90/java-serialization-46382579
    - 직렬화 기술 이해
        - 직렬화란 무엇인가?
            - 직렬화는 객체의 상태 혹은 데이터 구조를 기록할 수 있는 포맷
              (예를 들면 파일 또는 메모리 버퍼, 네트워크 연결 링크를 통해 전송될 수 있는 형태) 으로 변환.
        - 직렬화는 왜 중요한가?
            - 거의 모든 소프트웨어는 네트워크를 통해 데이터를 주고 받으며, 프로그램을 구현하는데 필요한 기반 기술 중에서 빼놓을 수 없게 됨.
            - 직렬화는 네트워크 의존성이 높은 소프트웨어일 경우, 전체 성능을 좌우할 수도 있는 중요한 기술이다.
        - 직렬화 적용 분야
            - 파일 저장소 (File storage)
                - 프로그램 실행 중에 생성된 데이터를 영구 저장소(파일 시스템) 등에 저장한 후, 이후에 프로그램이 다시 실행되었을 때 저장된
                  데이터를 메모리 상에 객체 형태로 복구해 사용한다.
            - 네트워크 통신
                - 네트워크 상에 떨어져 있는 프로그램 간에 데이터를 주고 받기 위해 데이터를 직렬화한 후, 패킷에 담아 전송
            - 데이터베이스
                - 복잡한 형태의 객체를 데이터베이스에 저장할 때 직렬화된 문자열 형태로 테이블의 칼럼에 저장하기도 한다.
            - 웹 환경
                - 웹 서버에서 브라우저(클라이언트)로 구조화된 데이터를 전송할 때 직렬화한 후 JSON 형식 등 전달하는 방식이 점차 많이 사용됨
        - 직렬화 기법 선택 시 고려할 점
            - 단순성(simple)
                - 사용하기가 복잡하지 않아야 한다.
            - 경량(compact)
                - 프레임워크(혹은 라이브러리)의 규모가 작아야 한다.
            - 유연성(flexible)
                - 다양한 데이터 타입을 직렬화할 수 있어야 한다.
            - 버전지원(versioning)
                - 객체의 데이터 구조는 설계 및 개발, 나아가 유지보수 단계에서 변화될 수 있다.
            - 속도(fast)
                - 처리 속도가 빠르면 빠를수록 좋다.
            - 확장성(scalable)
                - 복잡하거나, 거대한 형태의 데이터를 직렬화할 수 있어야 한다.
        - 직렬화 데이터 형식
            - Binary
                - 메모리에 저장된 데이터를 최소한의 가공 혹은 가공 없이 바이트의 연속된 형태로 저장하는 방식
            - JSON(JavaScript Object Notation)
                - 텍스트 형식이므로 사람과 기계 모두 읽기 가능하다. 다양한 프로그래밍 언어에서 읽고 쓸 수 있기 때문에 널리 사용됨
            - XML(Extensible Markup Language)
                - 텍스트 형식이며, JSON 에 비해 복잡하다. JSON 에 대해 가지는 장점은 스키마를 적용할 수 있고 무결성 검사가 가능하다.
            - YAML(YAML Ain't Markup Language)
                - XML 에 비해 사람이 읽고 쓰기 쉽도록 고안된 마크업 언어이다. 문법이 상대적으로 단순하고, 가독성이 높게 설계되어 있다.
        - 왜 성능이 중요한가?
            - CPU 비용
                - 메모리에 존재하는 바이너리 형태의 객체를 디스크 등에 저장할 수 있는 형태(텍스트 등)로 저장하기 위해서는 변환 처리 과정이
                  필요하며, 반대의 처리 또한 필요하다.
            - 메모리 비용
                - 변환 작업을 수행하는 과정에서 임시 버퍼(temporary buffer)를 할당하고, 네트워크를 통한 송수신 과정에서 스트림 처리 등에
                  따른 공간 할당이 필요하다.
            - 네트워크 비용
                - 직렬화를 수행하는 대다수의 프로그램 혹은 시스템은 네트워크를 통해 데이터를 주고 받게 된다. 네트워크 송수신에 있어서 패킷의
                  크기가 커질수록 전체 성능은 떨어진다.

    - 직렬화 프레임워크
        - JDK 의 Serializable 인터페이스
            - 프로그래밍하기 가장 쉽고, Serializable 인터페이스를 이용해 별도의 라이브러리 없이 즉시 사용할 수 있다.
            - 클래스를 릴리즈한 후에는 구현을 변경하기 어려워 유연성을 감소시킨다.
            - C++, 파이썬 등 다른 언어로 구현된 프로그램과 데이터를 교환할 수 없다.
            - 기본 연산자의 취약점으로 인해 불변 값이 손상되거나, 비정상적인 접근이 발생할 수 있다. (invariant corruption and illegal access)
            - 커스터마이징이 불가능하고, 소스 코드를 수정할 수 있어야 한다.
        - Java externalization (직렬화 코드를 직접 구현)
            - 객체를 저장 및 복구하는 Externalization 인터페이스를 구현해 직접 직렬화를 구현한다.
            - 인스턴스의 컨텐츠를 저장하고 복구하는 역할을 수행하는 클래스를 구현해야 한다.
            - 클래스의 구조가 변경될 때 마다, 읽고 쓰는 코드를 수정해야 한다.
        - Google GSON
            - 자바 객체를 JSON 으로 변환하거나 반대의 작업을 수행하는 자바 라이브러리.
            - 직렬화된 객체의 소스 코드를 필요로 하지 않는다.
            - 커스텀 표현을 지원한다.
        - Jackson JSON
            - 고성능, 인공공학적 JSON 프로세서 자바 라이브러리
            - 광범위한 커스터마이징 툴 지원
            - 혼합 어노테이션
            - 실체화된 인터페이스
            - 다양한 데이터 포맷 : JSON, CSV, Smile(binary JSON), XML, YAML
        - BSON for Jackson
            - 바이너리 인코딩된 JSON
            - 몽고 DB 의 주된 데이터 교환 포맷
            - 확장 프로그램 작성 가능
        - Protocol Buffers
            - 구조적인 데이터를 확장 가능하며 효율적인 포맷을 변환하는 방법 제공
            - 구글 내부에서 대부분의 내부 RPC 프로토콜과 파일 포멧에 Protocol Buffers 를 사용 중.
            - Java, C++, Python 지원
        - Kryo
            - 빠르고 효율적인 객체 그래프 직렬화 자바 프레임워크
            - 구글 코드 상의 오픈 소스 프로젝트
            - 자동화된 깊고 얕은 복사/복제
            - 소스 클래스에 대한 코드 작성 요건이 거의 없음


- 컬렉션 방어적 복사
    - 방어적 복사! 를 하려면 copyOf를 해야 합니다.
    - 복사본 컬렉션에 대한 요소 추가 / 삭제 시도 시 UOE가 발생한다는 점은 unmodifiableList와 동일합니다.
      그러나 원본 컬렉션에서 요소 추가 / 삭제 가 일어나도, 영향을 받지 않습니다
    - 그럼에도 불구하고 copyOf()로 만들어낸 컬렉션이 완전한 불변이라고 볼 수는 없습니다.
      왜냐하면 copyOf의 반환값으로 전달된 unmodifiable list에서 객체를 꺼내서,
      그 객체 내부의 값을 변경할 경우, 아니면 외부에서 그 객체의 값을 변경할 경우에는
      요소 까지 깊은 복사를 하지는 않았기 때문에 값이 변경되기 때문입니다.
    - 컬렉션의 요소가 되는 값 객체들이 불변을 보장한다면, copyOf와 만나서 완전 불변이 가능

    - 따라서 기본 제공되는 API 를 사용하여 컬렉션을 복사한 경우, 외부로부터의 변경에 취약하지 않은 컬렉션을 만들기 위해서는 내부 요소가 불변 객체여야 함을 알 수 있다.


- 접근제어자를 사용하는 이유
    - 객체를 사용하는 입장에서 객체 내부적으로 사용하는 변수나 메소드에 접근함으로써 개발자가 의도하지 못한 오동작을 일으키기도 합니다.
      이러한 문제로부터 객체의 로직을 보호하기 위해서는 멤버에 따라서 외부의 접근을 허용하거나 차단해야 할 필요
    - 사용자에게 객체를 조작할 수 있는 수단만을 제공함으로써 결과적으로 객체의 사용에 집중할 수 있도록 돕기 위함
    -> 의도치 않은 실수를 줄이기 위함과 정보 은닉의 목적


- 다형성(polymorphism)
    서로 다른 클래스의 객체가 같은 메시지를 받았을 때 각자의 방식으로 동작하는 능력
    부모 클래스의 메소드를 자식 클래스가 오버라이딩해서 자신의 역할에 맞게 활용하는 것이 다형성이다.
    이처럼 다형성을 사용하면, 구체적으로 현재 어떤 클래스 객체가 참조되는 지는 무관하게 프로그래밍하는 것이 가능하다.
    상속 관계에 있으면, 새로운 자식 클래스가 추가되어도 부모 클래스의 함수를 참조해오면 되기 때문에 다른 클래스는 영향을 받지 않게 된다.

    같은 모양의 코드가 다른 행위를 하는 것을 나타낸다. 자바에선 대표적으로 오버로딩, 오버라이딩, 업캐스팅, 다운캐스팅, 인터페이스, 추상메소드, 추상클래스 방법이 모두 다형성
    하나의 객체가 여러가지 타입을 가질 수 있는 것.

    - Overriding 오버라이딩
        오버라이딩은 Method 재정의라고 할 수 있다. 슈퍼 클래스의 메서드 이름, 매개 변수, 같은 반환 값이지만 내부 로직을 새롭게 재정의하는 개념이다.
    - Overloading 오버로딩
        오버로딩은 같은 이름의 Method 이지만 매개 변수의 개수, 리턴 타입과 같은 부분이 다름으로 여러 개의 같은 이름 메서드를 정의하는 것을 말한다.


- static 이란?
        정적(static)은 고정된이란 의미를 가지고 있습니다. Static 이라는 키워드를 사용하여 Static 변수와 Static 메소드를 만들 수 있는데
        다른말로 정적필드와 정적 메소드라고도 하며 이 둘을 합쳐 정적 멤버라고 합니다. (클래스 멤버라고도 합니다.)
        정적 필드와 정적 메소드는 객체(인스턴스)에 소속된 멤버가 아니라 클래스에 고정된 멤버입니다. 그렇기에 클래스 로더가 클래스를 로딩해서
        메소드 메모리 영역에 적재할때 클래스별로 관리됩니다. 따라서 클래스의 로딩이 끝나는 즉시 바로 사용할 수 있습니다.

    - 정적(Static) 멤버 생성
        - Static
            - 주로 클래스들이 할당
            - GC 관여 x
            - 모든 객체가 메모리를 공유
        - Heap
            - 주로 객체들이 할당
            - GC 관여
            - 메모리를 공유하지 않음

        - Static 키워드를 통해 생성된 정적멤버들은 Heap 영역이 아닌 Static 영역에 할당됩니다. Static 영역에 할당된 메모리는
          모든 객체가 공유하여 하나의 멤버를 어디서든지 참조할 수 있는 장점을 가지지만 Garbage Collector 의 관리 영역 밖에 존재하기에
          Static 영역에 있는 멤버들은 프로그램의 종료시까지 메모리가 할당된 채로 존재하게 됩니다.
          그렇기에 Static 을 너무 남발하게 되면 만들고자 하는 시스템 성능에 악영향을 줄 수 있습니다.

    - 정적(Static) 멤버 선언
        - 필드나 메소드를 생성 시 인스턴스로 생성할것인지 정적으로 생성할것인지에 대한 판단 기준은 공용으로 사용하느냐 아니냐로 내리면 됩니다.
          그냥 생성한다면 자동으로 인스턴스로 생성되며 정적으로 생성하려면 필드와 메소드 선언 시 static 이라는 키워들를 추가적으로 붙이면 됩니다.

        - 정적 메소드는 클래스가 메모리에 올라갈 때 정적 메소드가 자동적으로 생성됩니다. 그렇기에 정적 메소드는 인스턴스를 생성하지 않아도 호출을 할 수 있습니다.
          정적 메소드는 유틸리티 함수를 만드는데 유용하게 사용됩니다.


- Call by Reference와 Call by Value의 차이   https://steady-coding.tistory.com/613   https://deveric.tistory.com/92
    - 자바의 메소드(함수) 호출 방식
        - Call by value는 메서드 호출 시에 사용되는 인자의 메모리에 저장되어 있는 값(value)을 복사하여 보낸다.
        - Call by reference는 메서드 호출 시 사용되는 인자 값의 메모리에 저장되어있는 참조값, 혹은 주소, 포인터(Address)를 복사하여 보낸다.
           즉 매개변수를 변경할 경우 원본도 같이 변경되는 Call by reference

        - 자바는 기본형 타입 변수와 참조형 타입 변수가 있는데 둘 다 call by value 방식으로 메소드에서 받아진다
          대신 기본형 타입은 그 값을 복사 해서 주지만 참조형 타입은 값의 래퍼런스(주소)가 저장되는 것이므로 그 값의 래퍼런스가 복사 되어진다
        - 참조가 아닌 각각의 필드 값을 Getter/Setter를 이용해서 바꾸면 예외적으로 이런 경우에는 두개의 값이 변경됩니다.
          이런 예외적인 부분 때문에 참조형이 Call by Reference라는 오해를 받게 된다고 생각한다.
          왜 이런 부분이 가능할까요? 자바가 함수의 인자로 전달해주는 것은 어떤 것을 참조 하고 있는지에 대한 (복사된) 참조 값을 전달하기 때문이다.
          (접근제어자로 막혀있지 않은 한) 자바에서 객체를 컨트롤 하는 행위는 어떤 장소이든 간에 그 객체를 참조하는 참조값만 알고 있다면 가능하다.


- hashCode 와 equals
    - 만약 ORM 을 사용하고 있는 경우라면, hashCode 와 equals 를 오버라이드 하는 메소드 내부에서 Getter 를 사용하기를 권장한다.
      그 이유는 ORM 에 의해 fields 가 Lazy Loaded 되어, getter 를 부르기 전에는 사용이 불가능할 수 있기 때문이다.
    - 단, equals 와 hashCode 는 모두 VO(Value Object)에서만 사용하는 것을 권장합니다.
      값을 나타내는 것 외에 기능을 갖고 있는 인스턴스에서는 문제가 발생할 여지가 많아 웬만해선 사용하지 않는 것을 권장합니다.


- String 최적화   https://madplay.github.io/post/difference-between-string-stringbuilder-and-stringbuffer-in-java
    - JDK 1.5 버전부터는 String도 연산 과정에서 StringBuilder를 사용하도록 변경되었다. 그래서 예전보다는 더 좋아진 성능을 기대해도 된다.
        - 컴파일 한 후에 바이트 코드를 확인해보자. 결과를 확인할 때는 클래스 파일을 역어셈블해주는 javap 명령어에 디어셈블 결과를 출력해주는 -c 옵션을 넣으면 된다.

    - 디컴파일해서 확인해보면 StringBuilder를 사용하도록 개선되었지만 반복문 안에서 문자열을 더하는 연산을 한다면
      StringBuilder가 반복문 횟수만큼 생성되기 때문에 상대적으로 느릴 수밖에 없다.

    - StringBuilder와 StringBuffer는 가변의 속성을 가지고 있다는 점이 불변인 String과 비교되는 큰 차이다.
      이 둘은 문자열을 한 번 만들고 연산이 필요할 때마다 크기를 변경해가며 문자열을 변경한다. 따라서 변경될 때마다 새롭게 객체를 만드는 String 보다 더 빠르다.

    - StringBuilder는 내부적으로 문자열을 저장하기 위한 메모리 공간을 지니는데, String과 달리 해당 공간에 대해 문자를 추가하거나 삭제하는 것이 가능하다.
      버퍼라는 데이터를 임시로 저장하는 공간에 메모리를 저장해두고
      버퍼의 공간이 모자르다면 가변적으로 공간을 늘리는 형식으로 작동한다.


- 리플렉션이란
    - 구체적인 Class Type을 알지 못해도, 그 클래스의 메서드, 변수들에 접근 할 수 있도록 해주는 JAVA API
    - gc의 대상이 되지 않은 영역 Method Area 영역을 뒤져서 클래스에 대한 정보를 가져온다.
       (Method Area에는 Static 변수들을 비롯한, 생성자 , Method, SuperClass등 의 정보가 올라가게됩니다.


- 자바 8
    시대의 흐름에 의해 프로그래밍의 생태계가 변하고 있다. 더 이상 싱글 코어로는 한계에 다다르게 되면서 멀티코어 CPU 가 대중화 되고 있다.
    Java 8 은 시대 흐름에 맞게 병렬 프로세싱을 활용하고자 했고, 그로 인해 기존 Java 에서는 구현하기 어려웠던 부분을 Java 8 을 기점으로
    함수형 프로그래밍과 비동기 논블로킹 방식을 도입을 통해 해결했다. 미래 사회에서 함수형 프로그래밍은 더욱 주목받을 것으로 보이기 때문에
    개발자라면 함수형 프로그래밍을 익힌다면 큰 도움이 되리라 생각한다.


- 캡슐화(encapsulation)
    특정 객체가 독립적으로 역할을 수행하기 위해 필요한 데이터와 기능을 하나로 묶는 것을 캡슐화라고 한다.
    응집도를 높이고 결합도를 줄여야 요구사항 변경에 대처하는 좋은 설계 방법
    객체가 내부적으로 기능을 어떻게 구현하는지 감추는 것

    낮은 결합도를 유지할 수 있도록 설계하는 것
    한 곳에서 변화가 일어나도 다른 곳에 미치는 영향을 최소화 시키는 것 (객체가 내부적으로 기능을 어떻게 구현하는지 감추는 것!)
    응집도를 높이고 결합도를 줄여야 요구사항 변경에 대처하는 좋은 설계 방법
    캡슐화는 어떻게 높은 응집도와 낮은 결합도를 갖게 할까? 바로 정보 은닉을 활용한다.

    쉽게 말해 모듈화를 의미한다. 이러한 캡슐화를 통해 정보를 객체 안에 포함시키고, 그 정보에 대한 직접 접근은 허용하지 않는 대신,
    필요에 따라 확인할 수 있는 인터페이스를 외부에 공개함으로써 정보 은닉 효과도 자연스럽게 따라온다.


- static 의 의미와 사용법
    - new 로 객체를 생성하다보면 메모리를 많이 사용하게 됩니다. 그리고 생성하는 객체가 공통적으로 많이 쓰는 객체라면
      더욱더 전역적으로 하나만 있다면 객체를 새로 생성하지 않더라도 가져다가 쓰기만 하면 될 것입니다. 그래서 static 이 생겨나게 되었습니다.
    - 일반적으로 우리가 만든 Class는 Static 영역에 생성되고, new 연산을 통해 생성한 객체는 Heap영역에 생성됩니다.
    - 객체의 생성시에 할당된 Heap영역의 메모리는 Garbage Collector를 통해 수시로 관리
    - Static 키워드를 통해 Static 영역에 할당된 메모리는 모든 객체가 공유하는 메모리
    - Garbage Collector의 관리 영역 밖에 존재하므로 Static을 자주 사용하면 프로그램의 종료시까지 메모리가 할당된 채로 존재하므로 자주 사용하게 되면 시스템의 퍼포먼스에 악영향

    - Static 변수와 static 메소드는 Static 메모리 영역에 존재하므로 객체가 생성되기 이전에 이미 할당이 되어 있습니다. 그렇기 때문에 객체의 생성없이 바로 접근(사용)할 수 있습니다.


- Static 변수
        일반적으로 상수들만 모아서 사용하며 상수의 변수명은 대문자와 _를 조합하여 이름짓는다. 또한 상속을 방지하기 위해 final class로 선언을 한다.


- Static 클래스
    static 메소드에서는 static이 선언되지 않은 변수에 접근이 불가능
    우리가 Test.printName() 을 사용하려고 하는데, name1은 new 연산을 통해 객체가 생성된 후에 메모리가 할당됩니다.
    하지만 static 메소드는 객체의 생성 없이 접근하는 함수이므로, 할당되지 않은 메모리 영역에 접근을 하므로 문제가 발생
    그러므로 static 메소드에서 접근하기 위한 변수는 반드시 static 변수로 선언


- 왜 inner 클래스에는 static을 붙여줘야 할까?
    1) Inner class (Non-static nested class) 는 Outer class 의 인스턴스화 이후 Inner class 의 인스턴스화가 가능하며
    2) 두 인스턴스의 관계정보는 Inner class의 인스턴스 안에 만들어져 메모리 공간을 더 차지하며, 생성시간도 더 걸린다.
    3) 더 심각한 문제는 Inner class 가 Outer class 인스턴스에 대한 참조를 갖고 있기 때문에, Garbage Collection 은 Outer class 의 인스턴스를
       수거 대상으로 보지 않아 GC 의 대상에서 빠지게 된다. (더 쉽게 풀어쓰자면 inner class, outer class 두 인스턴스가 연결되어 있어서 outer class 인스턴스의 메모리를 못 뺏는 것)
    4) 때문에 Outer class 를 참조할 일이 없다면, Nested class 는 static 을 붙여 무조건 static nested class 를 만들자!


- java의 main 메서드가 static인 이유
    - 프로그램 실행시 먼저 static 영역 메모리에 적재된다.
    - main 메소드 같은 경우는 객체를 생성하지 않아도 자동으로 실행되어 작업을 수행해야하는 부분이기 때문에 static으로 선언
    - public 접근 제어자는 JVM이 main 함수가 어디에 있건 접근 가능하기 위해서
    - (String args[]) 는 매개변수로 문자열 배열을 줄 수 있음


- 객체(Object) VS 인스턴스(Instance)
	- 클래스의 타입으로 선언되었을 때 객체라고 부르고, 그 객체가 메모리에 할당되어 실제 사용될 때 인스턴스라고 부른다.
	- 객체를 클래스의 인스턴스라고도 부른다 => ‘인스턴스화하여 레퍼런스를 할당한’ 객체를 인스턴스라고 말하지만,
	  이는 원본(추상적인 개념)으로부터 생성되었다는 것에 의미를 부여하는 것일 뿐 엄격하게 객체와 인스턴스를 나누긴 어렵다.


- Lambda란
    - 함수형 프로그래밍 언어에서 사용되는 개념으로 익명 함수라고도 합니다. 메서드를 하나의 '식(expression)'으로 표현한 것이다. 메서드를 람다식으로
      표현하면 메서드의 이름과 반환값이 없어지므로, 람다식을 '익명 함수(anonymous function)'이라고도 한다.

    - 배경
        인터페이스는 직접 객체화할 수 없기 때문에 구현 클래스를 이용하는데 일회성으로 사용하는 구현 클래스를 계속 선언하는 것은
        비효율적이기 때문에 익명 클래스나 람다를 이용하여 구현 클래스를 선언합니다.

    - 함수 객체
        특정 동작을 목적으로 추상 메서드를 하나만 담은 인터페이스나 추상 클래스를 함수 객체라합니다.


- 람다
    - Java 8 에서는 많은 새로운 기능들이 도입 되었고, 그 중에는 람다와 stream 도입을 통한
      함수형 프로그래밍도 있다. 람다를 통해 함수를 파라미터로 넘길 수 있고 변수에 할당할 수 있으며
      반환 값으로 반환할 수 있는 일급 시민으로써 사용할 수 있게 됨.
      이를 통해 코드 양도 줄이면서도 코드의 재사용성을 크게 높일 수 있다.
    - 람다를 사용하기 위한 조건 -> 함수형 인터페이스
    - 익명 클래스는 단순히 편의를 위해서 클래스 내부에서 사용을 할뿐 컴파일이 되면 별도의 클래스로 분리되어 나온다.
    - 하지만 람다의 경우 컴파일 해도 별도의 클래스 파일이 생성되지 않으며 람다는 그대로 존재

    - 람다를 사용하면 안되는 경우
        - this 를 사용할 경우
            - 만약 내부에서 this 를 사용해야 하면 람다 대신 익명 클래스 사용해야 함
        - 섀도우 변수 (shadow variable) 를 사용할 경우
            - shadow variable 는 inner scope 내부에 outer scope 에 정의한 똑같은 변수가 있을 경우 shadow 된다.
            - 람다는 변수 shadowing 을 잡아내지 못하고 에러를 띄우므로 익명 클래스 사용해야 함
        - 콘텍스트 오버로딩이 존재할 때
            - 람다는 파라미터나 반환 값 등을 통해서 해당 람다가 어느 익명 메서드의 구현인지를 내부적으로 추론하는데
              모든 요소가 같은 추상 메서드가 2개 이상 존재한다면 에러가 띄우므로 익명 클래스 사용해야 함
        - 람다 코드가 3줄을 넘어갈 때
            - 동작을 파악하는데 시간이 오래 걸리고 복잡한 코드가 나올수 있으므로 지양

    - 람다 표현식의 한계
        - 코드 자체로 동작이 명확하게 설명되지 않거나 람다가 길거나 읽기 어렵다면, 쓰지 않는 방향으로 리팩토링하는 것을 고려
        - 람다식은 기본적으로 익명 구현 객체 기반이기 때문에, 익명 객체 특성상 디버깅 할때 콜 스택(call stack) 추적이 매우 어려운 단점을 가지고 있다.
        - stream에서 람다를 사용할 시 for문 보다 성능이 떨어진다. (최근엔 비슷함)
        - 람다식을 통해 재귀 함수를 구축하면 실행 조차 안되는 컴파일 에러가 나타난다.


    - 메소드를 간결한 함수 식으로 표현
    - 지금까지 자바에서는 메서드를 하나 표현하려면 클래스를 정의해야 했다. 하지만 람다식으로 표현하면 메서드의 이름과 반환값을 생략할 수 있고
      이를 변수에 넣어 자바 코드가 매우 간결해지는 장점이 있다.
    - 인터페이스를 익명 클래스로 구현한 익명 구현 객체를 짧게 표현한 것
    - 오로지 인터페이스로 선언한 익명 구현 객체만이 람다식으로 표현이 가능하다.
      그리고 람다 표현이 가능한 이러한 인터페이스를 가리켜 함수형 인터페이스라 총칭한다.
    - 함수형 인터페이스란 딱 하나의 추상 메소드가 선언된 인터페이스
    - 사실 컴파일러 스스로 람다 함수식을 보고 추론하여 타입을 유추
        1. 람다식을 받는 메소드의 매개변수의 타입을 본다.
        2. 함수형 인터페이스 정의문을 찾아 추상 메소드 형태를 본다.
        3. 추상 메서드에 정의된 타입에 따라 람다식의 타입을 자동으로 판별해준다.

    - 람다 표현식의 한계
        1. 문서화를 할 수 없다.
            - 람다 자체는 이름이 없는 함수이기 때문에 메서드나 클래스와 다르게 문서화 불가.
        2. 디버깅이 다소 어렵다.
            - 기본적으로 익명 구현 객체 기반이기 때문에, 익명 객체 특성상 디버깅 할때 콜 스택(call stack) 추적이 매우 어려운 단점을 가지고 있다.
        3. stream에서 람다를 사용할 시 for문 보다 성능이 떨어진다
        4. 람다를 남발하면 코드가 지저분해질 수 있다.
        5. 재귀로 만들경우에는 다소 부적합하다.
            - 람다식을 통해 재귀 함수를 구축하면 실행 조차 안되는 컴파일 에러가 나타난다.


- 제네릭이란, 왜 쓰는지 어디에 써 봤는지 알려주세요
    - 제네릭을 지원하기 전에는 컬렉션에서 객체를 꺼낼 때마다 형변환을 해야 했다.
    - 자바5 이전에는 실수로 엉뚱한 타입의 객체를 넣어두면 런타임에 형변환 오류가 나는 문제가 있었다.
    - 제네릭을 사용하면 컬렉션이 담을 수 있는 타입을 컴파일러에 알려준다.
    - 컴파일 과정에서 오류를 차단 할 수 있다는 것이다. (안전하고 명확한 프로그래밍이 가능)


- 제네릭(Generic)
    - 클래스 내부에서 사용할 데이터 타입을 외부에서 지정하는 기법
    - 제네릭으로 배열을 생성할 수는 없다.
    - static 변수에도 제네릭을 사용할 수 없다. static 변수는 인스턴스에 종속되지 않는 클래스변수로써 모든 인스턴스가 공통된 저장공간을 공유하게 되는 변수이다.
      하지만, static 메서드에는 제네릭을 사용할 수 있다.
    - static 변수의 경우에 제네릭을 사용하면 여러 인스턴스에서 어떤 타입으로 공유되어야 할지 지정할 수가 없어서 사용할 수 없다. static 변수는 값 자체가 공유되기 때문이다.
      값 자체가 공유되려면 타입에 대한 정보도 있어야 한다.
    - 하지만, static 메서드의 경우 메서드의 틀만 공유된다고 생각하면 된다. 그리고 그 틀 안에서 지역변수처럼 타입 파라미터가 다양하게 오가는 형태로 사용될 수 있는 것이다.


- 제네릭을 사용하는 이유
    - 제네릭을 지원하기 전에는 컬렉션에서 객체를 꺼낼 때 마다 형변환을 해야 했다. jdk 1.5 부터는 제네릭을 사용하면 컬렉션에 담을 수 있는 타입을 컴파일러에게 알려주며,
      컴파일러가 알아서 형변환 코드를 추가한다. 또한 엉뚱한 객체를 넣는 코드가 있다면 컴파일 타임에 차단해준다.
    - 잘못된 타입이 사용될 수 있는 문제를 컴파일 과정에서 제거할 수 있다. 실행 시(런타임 시) 타입 에러가 나는것보다는 컴파일 시에 미리 타입을 강하게 체크해서 에러를 사전에 방지하는 것이 좋다.
    - 제네릭 코드를 사용하면 타입을 국한하기 떄문에 요소를 찾아올 때 타입 변환을 할 필요가 없어 프로그램 성능이 향상된다.


- 제네릭 싱글톤 팩토리
    불변 객체를 여러 타입으로 활용할 수 있게 만들어야 할 때가 있는데, 이때는 제네릭 싱글톤 팩토리를 만들면 된다. Collections.reverseOrder[Comparator]이 좋은 예다
    만약 제네릭을 쓰지 않았다면 요청 타입마다 형변환하는 정적 팩토리를 만들었어야 할 것이다. (타입별로 정적메소드가 1개씩..)


- stream에 lazy란?   https://bugoverdose.github.io/development/stream-lazy-evaluation/   https://youngs-java-study.tistory.com/8
    스트림 파이프라인을 실행하게 되면 JVM은 곧바로 스트림 연산을 실행시키지 않는다. 그 대신 최소한의 필수적인 작업만을 수행하고자, 즉 지연 연산을 위한 준비작업을 수행한다.
    이 준비 작업이란 우선 스트림 파이프라인이 어떠한 중간연산과 최종연산으로 구성되어있는지에 대한 검사로 시작된다.
    이러한 검사 결과를 바탕으로 JVM은 사전에 어떠한 방식으로 최적화를 진행할지 미리 계획하고, 그 계획에 따라 스트림의 개별 요소에 대한 스트림 연산을 수행하게 된다.

    먼저 스트림 연산들은 중간 연산과 최종 연산으로 구분됩니다. 중간 연산은 호출 즉시 실행되지 않고 단지 파이프라인을 구성하는 일만 합니다.
    실제로 최종 연산이 호출될 때 중간 연산을 포함한 전체 파이프라인이 실행됩니다. 이때 중간 연산이 호출된 즉시 실행되지 않고,
    최종 연산이 호출될 때 뒤늦게 실행된다고 하여 스트림이 게으른(Lazy) 특성을 가진다고 표현합니다.

    그리고 스트림에서 제공하는 최적화 전략으로는 루프퓨전과 쇼트서킷이 대표적이다.

    끊어진 순회 (Short Circuit)
    ‘게으르다’는 약간은 부정적인 단어가 사용되었지만 스트림은 이 게으른 특성 덕분에 전체 파이프라인 구성을 보고 최적화된 실행을 계획할 수 있습니다. 앞에서 살펴본 예와 같이 findFirst 같은 최종연산이 있으면 굳이 전체 스트림을 순회하지 않고 첫번째 항목을 찾을 때 까지만 순회하도록 실행을 계획하는 것입니다.

    혼합된 루프(Fusion Loop)
    스트림의 게으른 특성 때문에 효과를 발휘하는 또 다른 특성으로 혼합된 루프(Fusion Loop) 라는 기법도 있습니다. 중간 연산에서 filter, map 등의 순회 연산이 연속되는 경우 각각 루프를 도는 것이 아니라 하나의 루프로 중간 연산을 함께 수행하도록 하는 방법이라고 할 수 있습니다. 스트림을 쓰다보면 루프를 너무 많이 돌아서 비효율적인 것이 아닌가 내심 걱정은 되지만, 루프 몇 번 더 돈다고 성능에 큰 영향이 없다고 스스로를 안심시키곤 했는데 팩트를 벗어난 걱정이었습니다.

    근본적으로 지연 평가(Lazy Evaluation)을 사용한다. 이 덕분에 무한 스트림을 다룰 수 있게 된다.

    지연 연산으로 메모리를 절약할 수 있고, 성능에서 이익을 얻을 수 있습니다.
        Eager Evaluation
            함수형 프로그래밍 또는 Lazy Evaluation을 접해보지 못한 사람들은 이 코드의 처리과정이

            전체 요소들 중 6보다 작은 수를 구한다.
            1번에서 구한 요소들중 2로 나누어지는 수를 구한다.
            그 수에 10을 곱한다.
            이처럼 진행될 것이라 생각할 수 있지만, 아니다.

        Lazy Evaluation
            이 코드의 진행방식은 각 요소들에 대해 아래와 같은 방식으로 진행된다.

            6보다 작은지 검사한다 ( 6보다 클 경우 2번 3번 과정을 무시하고 다음 요소 검사 진행)
            2로 나누어 지는지 검사한다. ( 2로 나누어지지 않을 경우 3번 과정을 무시하고 다음 요소 검사 진행)
            10을 곱하여 출력한다.
            이처럼 불필요한 연산과정을 하지않고 각 요소에 대해 검사가 진행된다.

            불필요한 연산을 하지 않은 두번째 처리과정이 성능면에서 우월하다.


- Stream API의 실행 순서    https://mangkyu.tistory.com/115
    Stream API를 정확히 알고 사용하지 못하면 처리 속도의 지연을 야기할 수 있다. 그렇기 때문에 우리가 작성한 Stream API 코드가 어떻게 동작할 것인지 정확히 이해하고 있는 것이 중요하다.
    모든 데이터에 대해 filter가 진행되고 forEach가 실행되는 수평적 구조로 순회하는 것이 아니라, 각각의 데이터에 대해 filter와 forEach가 먼저 수행하는 수직적 구조로 순회
    Stream API를 사용할 때에는 반드시 연산 순서를 고려하여 코드를 작성
    동일한 입력과 결과에 대해 더 적은 연산으로 처리 가능.


- java stream paralled 사용시 주의사항   https://catsbi.oopy.io/0428be55-8c8d-40a2-923a-acc738d74a14
    - 박싱을 주의하라.
        자동 박싱과 언박싱은 성능을 크게 떨어트리는 요소 중 하나다. 자바에서는 이런 박싱 비용을 절약하기 위해
        특화 스트림(IntStream, LongStream, DoubleStream)을 제공한다. 따라서 되도록 기본형 특화 스트림을 사용하는게 좋다.

    - 순차 스트림보다 병렬 스트림에서 성능이 떨어지는 연산이 있다.
        순서에 의존하는 연산(ex: limit, findFirst)은 병렬 스트림에서 수행하기 위해선 많은 비용이 필요하다.

    - 스트림에서 수행하는 전체 파이프라인 연산 비용을 고려하라
        처리해야 할 요소 수가 N 이고 하나의 요소를 처리하는데 드는 비용이 Q라 하면 전체 스트림 파이프라인 처리 비용은 N*Q라 할 수 있는데,
        Q가 높아진다는 것은 병렬 스트림으로 성능 개선을 할 여지가 있음을 의미한다.

    - 소량의 데이터는 병렬 스트림이 도움되지 않는다.
        소량의 데이터는 병렬화 과정에 생기는 부가 비용이 더 크기에 순차 스트림을 사용하는게 더 효율적이다.

    - 적절한 자료구조인지 확인하자.
        ArrayList같은 경우 요소를 탐색하지 않고도 리스트를 분할 할 수 있기에 병렬 스트림을 사용하기 적절한
        반면 LinkedList는 분할하기 위해 모든 요소를 탐색해야 하기에 적절하지 않다.

        ArrayList는 인덱스로 요소를 관리하여 데이터를 쪼개기 쉽지만, HashSet, TreeSet은 요소 분리가 쉽지 않고,
        LinkedList도 링크를 따라가야 하기에 분리가 쉽지 않다. 요소 분리가 쉽지 않은 자료구조는 상대적으로 병렬 처리가 늦다.

    - 스트림의 특성과 파이프라인의 중간 연산이 스트림의 특성을 어떻게 바꾸는지에 따라 성능이 달라질 수 있다.
        map이나 SIZED 스트림은 크기를 알고 있기에 스트림 분할을 할 수 있고 병렬 처리가 수월하지만,
        필터 연산같은 경우 스트림의 길이를 예측할 수 없기 때문에 효과적으로 스트림을 병렬 처리할 수 있을지 알 수 없게 된다.

    - 최종 연산의 병합 과정(ex: Collector의 combiner) 비용을 살펴보라
        병합 과정의 비용이 비싸다면 병렬 스트림으로 얻은 성능의 이익이 서브스트림의 부분 결과를 합치는 과정에서 상쇄될 수 있다.


- 빌더 패턴(Builder Pattern)을 사용해야 하는 이유
    1. 필요한 데이터만 설정할 수 있음
        생성자나 정적 메소드를 이용하는 경우라면 더미 값을 넣어주거나 생성자를 새로 만들어주어야 한다.
        생성자 또는 정적 메소드와 비교하여 테스트용 객체를 생성할 때 용이하게 해주고, 불필요한 코드의 양을 줄이는 등의 이점

    2. 유연성을 확보할 수 있음
        빌더 패턴을 이용하면 새로운 변수가 추가되는 등의 상황이 생겨도 기존의 코드에 영향을 주지 않을 수 있다.

    3. 가독성을 높일 수 있음
        빌더 패턴을 적용하면 직관적으로 어떤 데이터에 어떤 값이 설정되는지 쉽게 파악하여 가독성을 높일 수 있다.

    4. 변경 가능성을 최소화할 수 있음
        Setter를 구현한다는 것은 불필요하게 변경 가능성을 열어두는 것이다. 이는 유지보수 시에 값이 할당된 지점을 찾기 힘들게 만들며 불필요한 코드 리딩 등을 유발한다.
        값을 할당하는 시점이 객체의 생성뿐이라면 객체에 잘못된 값이 들어왔을 때 그 지점을 찾기 쉬우므로 유지보수성이 훨씬 높아진다.

    다음의 2가지 상황에서는 빌더를 구현할 필요가 없다.
        - 객체의 생성을 라이브러리로 위임하는 경우
            엔티티(Entity) 객체나 도메인(Domain) 객체로부터 DTO를 생성하는 경우라면 직접 빌더를 만들고 하는 작업이 번거로우므로
            MapStruct나 Model Mapper와 같은 라이브러리를 통해 생성을 위임할 수 있다.

        - 변수의 개수가 2개 이하이며, 변경 가능성이 없는 경우
            정적 팩토리 메소드를 사용하는 것이 더 좋을 수도 있다. 빌더의 남용은 오히려 코드를 비대하게 만들 수 있으므로
            변수의 개수와 변경 가능성 등을 중점적으로 보고 빌더 패턴을 적용할지 판단하면 된다.


- 오토박싱과 언박싱은 어떤 차이가 있습니까?
    - 기능적 편의성을 위하여 오토 박싱 / 언박싱을 제공하지만, 다른 타입간의 형 변환은 어플리케이션의 성능에 영향을 미치게 된다.
    - 비록 사소한 차이 일지라도 어플리케이션의 성능 측면에서 봤을때 반드시 필요한 상황이 아니라면 지양 해야 하는 것이 옳다.
    - 코드에 불필요한 auto casting이 반복적으로 이루어지고 있는지 확인하는 것은 대용량 서비스를 개발하는데 있어서 꼼꼼히 파악해야하는 요소


- String  vs  StringBuffer/StringBuilder
    - String 클래스는 불변하기 때문에 문자열을 수정하는 시점에 새로운 String 인스턴스가 생성된
    - 새로운 메모리영역을 가리키게 변경되고 처음 선언했던 "hello"로 값이 할당되어 있던 메모리 영역은 Garbage 로 남아있다가
      GC(garbage collection)에 의해 사라지게 되는 것
    - String 은 불변성을 가지기 때문에 변하지 않는 문자열을 자주 읽어들이는 경우 String 을 사용해 주시면 좋은 성능을 기대
    - 문자열 추가,수정,삭제 등의 연산이 빈번하게 발생하는 알고리즘에 String 클래스를 사용하면 힙 메모리(Heap)에
      많은 임시 가비지(Garbage)가 생성되어 힙메모리가 부족으로 어플리케이션 성능에 치명적인 영향을 끼치게 됩니다.
    - String 과는 반대로 StringBuffer/StringBuilder 는 가변성 가지기 때문에
      .append() .delete() 등의 API 를 이용하여 동일 객체 내에서 문자열을 변경하는 것이 가능


- java immutable Object
    - 불변 객체는 재할당은 가능하지만, 한번 할당하면 내부 데이터를 변경할 수 없는 객체
    - 불변 클래스는 함수형 프로그래밍 그리고 스레드 안전성과 도메인 모델의 일관성을 유지하는 데 좋은 특징이다.


- 예외 처리 방법
    - 예외 처리 방법 : 예외 복구, 예외 처리 회피, 예외 전환 방법
      (try ~ catch문 안에 throw 예외던지기 / 메소드() throws Exception 등)
    - throw는 예외를 발생시키는 명령이다. throw 뒤에는 예외 정보를 가지고 있는 예외 클래스가 위치한다.
      자바 가상 머신은 이 클래스를 기준으로 어떤 catch 구문을 실행할 것인지를 결정한다. 또 실행되는 catch 구문에서는 예외 클래스를 통해서
      예외 상황의 원인에 대한 다양한 정보를 얻을 수 있다. 이 정보를 바탕으로 문제를 해결하게 된다.


- 메소드() throws Exception
    - 강제로 Exception을 자신을 호출한 상위메소드에 책임 전가
    - 메소드 뒤에 throws ~~ 를 사용하고 싶지 않으면 그냥 서비스 구현하는 곳에서에서 try catch 쓰면 된다(catch문에 예외 발생 시 처리 로직 구현하거나.. 단, 책임을 전가하지는 않는다)
    - exception이 발생할 여지가 있는곳에 try catch문을 작성함으로서 예외가 발생하더라도 구동중이던 어플리케이션이 중간에 멈추지않게끔 하는게 예외처리인데
      메서드에서 throws Exception을 해주게되면 해당 메서드 내에서 예외가 발생하면 자신이 처리하는게 아니고 자신을 호출한 상위메서드로 예외를 던지게 된다.