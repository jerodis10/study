******* stream
    https://okky.kr/articles/329818

***** Optional 사용법
    https://www.daleseo.com/java9-optional/
    https://mangkyu.tistory.com/203

- OOP 4가지 특성
    https://www.codestates.com/blog/content/%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%ED%8A%B9%EC%A7%95

* 정적 팩토리 메소드

***** java 이론 정리
    https://velog.io/@mooh2jj/%EB%A9%80%ED%8B%B0-%EC%8A%A4%EB%A0%88%EB%93%9C%EC%9D%98-%EB%8F%99%EC%8B%9C%EC%84%B1-%EC%9D%B4%EC%8A%88

***** Builder Pattern 쓰는 이유
    https://velog.io/@mooh2jj/%EB%B9%8C%EB%8D%94-%ED%8C%A8%ED%84%B4-%EC%99%9C-%EC%93%B0%EB%8A%94-%EA%B1%B0%EC%95%BC

***** 멀티 스레드환경의 동시성 이슈
    https://velog.io/@mooh2jj/%EB%A9%80%ED%8B%B0-%EC%8A%A4%EB%A0%88%EB%93%9C%EC%9D%98-%EB%8F%99%EC%8B%9C%EC%84%B1-%EC%9D%B4%EC%8A%88

***** EnumMap
    https://creampuffy.tistory.com/146

******* Commit Log 컨벤션
    https://creampuffy.tistory.com/129

****** 자바 코딩 컨벤션
    https://creampuffy.tistory.com/128

***** Lambda는 동작부터 다르다!
    https://blog.imqa.io/aos_lambda_basic/

******* equals는 일반 규약을 지켜 재정의하라
    https://shrewd.tistory.com/m/33

****** try-finally 보다는 try-with-resource를 사용하라
    https://shrewd.tistory.com/m/32

***** 자원을 직접 명시하지 말고 의존 객체 주입을 사용하자
    https://shrewd.tistory.com/m/28

***** 생성자 대신 정적 팩터리 메서드를 고려
    https://shrewd.tistory.com/m/24

***** equals() 와 hashCode() 재정의
    https://hyeran-story.tistory.com/123
    https://jojoldu.tistory.com/134

***** Java/Multi Threading 기초
    https://sslblog.tistory.com/category/Java/Multi%20Threading%20%EA%B8%B0%EC%B4%88

* java 8 디폴트 메서드
    추상클래스의 한계 - 추상클래스는 단일 상속을 원칙으로 한다.
                     상속의 가장 큰 문제점은 캡슐화를 위반한다는 것과 설계가 유연하지 않다는 것.
                     코드의 재사용을 위해서는 상속이 아니라 합성을 사용하는 것이 바람직하고 상속은 타입 계층을 구조화하기 위해 사용해야 한다.
    -> Java 8 부터는 인터페이스에도 메서드 선언뿐만 아니라 default method 와 static method 를 통해 구현이 가능해졌다.

    https://velog.io/@neity16/Java-8-%EA%B8%B0%EB%B3%B8-%EB%A9%94%EC%86%8C%EB%93%9C-Stream
    https://dev-youngjun.tistory.com/192

- string + 연산 내부 구현
    https://june0122.tistory.com/2

- Optional
    https://www.daleseo.com/java8-optional-before/
    https://www.daleseo.com/java8-optional-after/
    https://www.daleseo.com/java8-optional-effective/
    https://www.daleseo.com/java9-optional/

- Java 8 에서 왜 함수형 프로그래밍이 도입되었을까?
    https://tecoble.techcourse.co.kr/post/2021-09-30-java8-functional-programming/

- 원시 타입을 포장해야 하는 이유
    https://tecoble.techcourse.co.kr/post/2020-05-29-wrap-primitive-type/

- 정적 팩토리 메서드(Static Factory Method)는 왜 사용할까?
    https://tecoble.techcourse.co.kr/post/2020-05-26-static-factory-method/

- new ArrayList<>() vs Arrays.asList()
    https://tecoble.techcourse.co.kr/post/2020-05-18-ArrayList-vs-Arrays.asList/

******* 상속보다는 조합(Composition)을 사용하자.
    https://tecoble.techcourse.co.kr/post/2020-05-18-inheritance-vs-composition/
    https://inpa.tistory.com/entry/OOP-%F0%9F%92%A0-%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5%EC%9D%98-%EC%83%81%EC%86%8D-%EB%AC%B8%EC%A0%9C%EC%A0%90%EA%B3%BC-%ED%95%A9%EC%84%B1Composition-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0?category=967430

******* 인터페이스를 분리하여 테스트하기 좋은 메서드로 만들기
    https://tecoble.techcourse.co.kr/post/2020-05-17-appropriate_method_for_test_by_interface/

- Stream의 foreach 와 for-loop 는 다르다.
   https://tecoble.techcourse.co.kr/post/2020-05-14-foreach-vs-forloop/

- 함수형 프로그래밍
    https://gyoogle.dev/blog/computer-science/software-engineering/Fuctional%20Programming.html

- 객체지향 프로그래밍
    https://gyoogle.dev/blog/computer-science/software-engineering/Object-Oriented%20Programming.html

-