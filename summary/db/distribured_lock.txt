- 동시성 제어
    1. 어플리케이션 단에서의 해결 - synchronized 활용
        - 트랜잭션의 begin 과 commit 은 synchronized 메소드에 포함되지 않습니다.
          그 결과 커밋이 날라가 심사의 수정된 상태가 DB에 반영되기 전에, 그 다음 요청을 담당한 스레드가 synchronized 메소드에 진입하여
          아직 수정이 반영되지 않은 심사 값을 읽게 되고 예외 처리에 걸리지 않는 것입니다.
        - 서버 인스턴스가 2대 이상으로 늘어날 경우 동시성 문제를 해결할 수 없다는 것입니다.
          synchronized 키워드는 특정 어플리케이션 내에서 멀티 스레드가 동시에 진입하는 것을 막을 뿐, 다수의 서버가 작동하고 있을 때, 각 서버의 스레드의 동시 접근은 막을 수 없습니다.
          자바의 synchronized 는 하나의 프로세스 안에서만 보장이 됩니다.
    2. 데이터베이스 lock 활용
    3. redis 활용

- Lock
    - 락이 필요한 이유
        - 격리수준은 connection 단위로만 적용 가능하다.
          트랜잭션 내에서 select 한 데이터에 대해 다른 트랜잭션을 동시성 제어하고 싶은 경우에 필요한 것이 데이터베이스의 lock 이다. ??

        - 격리 수준은 해당 트랜잭션이 다른 트랜잭션에서 변경한 데이터를 볼 수 있는 기준을 정의
          락은 다른 트랜잭션에서 해당 데이터에 접근하는 것을 막는 기능을 수행.

    1. 낙관적 락(Optimistic Lock)
        - 낙관적 락 이란
            - Optimistic Lock 은 실제 Lock 을 사용하지 않고, 데이터의 Version 을 이용하여 데이터의 정합성을 준수하는 방법입니다.
              먼저 데이터를 조회한 후에 update 를 수행할 때 현재 내가 조회한 버전이 맞는지 확인하며 업데이트합니다.
              자원에 Lock 을 걸어서 선점하지 않고, 동시성 문제가 발생하면 그때 가서 처리하는 낙관적 락 방식입니다.
              내가 조회한 버전에서 수정사항이 생겼을 경우에는 application 에서 다시 조회 후에 작업을 수행하는 롤백 작업을 수행해야 합니다.
              이렇게 낙관적락은 version 과 같은 별도의 컬럼을 추가하여 충돌적인 업데이트를 막습니다. version 뿐만 아니라 hashcode 또는 timestamp 를 이용하기도 합니다.
                - 장점
                    - 충돌이 자주 일어나지 않는다는 가정 하에, 별도의 Lock 을 걸지 않으므로 Pessimistic Lock 보다는 성능적 이점을 가질 수 있습니다.
                - 단점
                    - 업데이트가 실패했을 시, 재시도 로직을 개발자가 직접 작성해 주어야 합니다.
                    - 충돌이 빈번하게 일어난다면, Roll Back 처리를 해주어야 하기 때문에, Pessimistic Lock 이 더 성능이 좋을 수 있습니다.

            - 대부분의 트랜잭션이 충돌하지 않는다고 가정하는 방법
            - DB 의 lock 을 사용하지 않고 version 관리를 통해 어플리케이션 레벨에서 처리
              트랜잭션 커밋 전에는 트랜잭션 충돌을 알 수 없다.
            - Shared Lock 은 select 절 뒤에 for share 를 명시하여 lock 을 생성할 수 있다.
            - Read Lock

        - JPA 의 낙관적 락(Optimistic Lock)을 사용하기 위해서는 @Version 을 사용해서 버전 관리 기능을 추가해야 한다.
            - @Version 을 적용할 수 있는 데이터 타입
                Long, long
                Integer, int
                Short, short
                Timestamp

        - 엔티티에 @Version 을 위한 필드를 추가하면, 엔티티를 수정할 때 마다 버전이 하나씩 자동으로 증가한다.
          그리고 엔티티를 수정할 때 조회 시점의 버전과, 수정 시점의 버전이 다르면 예외가 발생한다.
          이런 메커니즘 때문에 최초 커밋만 인정되는 방식을 구현할 수 있으므로, 두 번의 갱신 분실 문제를 방지할 수 있다.

        - 주의 사항
            - 임베디드 타입과 값 타입 컬렉션은 실제 DB 에서는 다른 테이블이지만, JPA 에서는 논리적인 개념해당 엔티티에 속한 값이므로 수정하면 엔티티의 버전이 증가한다.
            - 버전은 JPA 가 직접 관리하므로 개발자가 수정하면 안된다. 단 벌크연산시 JPA 가 관리하지 않으므로 이 때는 직접 버전을 관리해줘야 한다.

    2. 비관적 락(Pessimistic Lock)
        - Pessimistic Lock 이란 실제로 데이터에 Lock 을 걸어서 정합성을 맞추는 방법입니다.
          자원 요청에 따른 동시성문제가 발생할 것이라고 예상하고 락을 걸어버리는 비관적 락 방식입니다.
          하지만, Dead Lock(교착상태)에 빠질 위험성이 있으므로 유의해야 합니다.
          결국 Pessimistic Lock 이란, 데이터에는 Lock 을 가진 스레드만 접근이 가능하도록 제어하는 방법입니다.
            - 장점
                - Pessimistic Lock 은 동시성 충돌이 잦을 것으로 예상되어 동시성을 강력하게 지켜야 할 때 사용합니다.
                - 충돌이 빈번하게 일어난다면 롤백의 횟수를 줄일 수 있기 때문에, Optimistic Lock 보다는 성능이 좋을 수 있고, 가장 강력한 데이터 정합성 보장 방법입니다.
            - 단점
                - 데이터 자체에 Lock 을 걸기 때문에 속도가 상대적으로 느린 편입니다.
                - 서로 자원이 필요한 경우, 락이 걸려있으므로 Dead Lock(교착상태)에 빠질 가능성이 있습니다.

        - 모든 트랜잭션은 충돌이 발생한다고 가정하고 우선 Lock 을 거는 방법이다.
        - 낙관적 락(Optimistic Lock)과는 달리 DB의 Lock 기능을 이용한다. 주로 select for update 구문을 사용하고, 버전 정보는 사용하지 않는다. (사용하도록 할 수도 있다.)
        - 엔티티가 아닌 스칼라 타입(int, String 같은 타입)을 조회할 때도 사용할 수 있다.
        - 트랜잭션 커밋하기 전에, 데이터를 수정하는 시점에 미리 트랜잭션 충돌을 감지할 수 있다.
        - Lock 을 획득할 때까지 트랜잭션은 대기하므로, Timeout 을 설정할 수 있다.
        - Write Lock

        - 갭 락?

        - 각 트랜잭션들이 순차적으로 작업을 마칠때까지 다른 트랜잭이 접근하지 못하므로 데드락을 방지할 수 있는 것이다.

        - 문제점
            - 성능 문제
                - 비관적 락은 모든 트랜잭션에 대해 락을 사용한다. 락이 필요하지 않은 상황에서도 락을 사용하기 때문에 트래픽이 많은 경우에는
                  O(N^2) 정도로 성능이 저하된다는 문제점이 있다. 즉 다른 요청들이 다 blocking 되서 타임아웃 날 수 있다.
            - 여전히 발생할 수 있는 데드락
                - 서로 다른 트랜잭션이 각자 자원을 점유하고, 상대방이 가진 자원을 얻기위해 무한히 대기하는 데드락이 발생한다.

            -> 예로 선착순 쿠폰 발급 시스템처럼 동시에 많은 트래픽이 몰리거나, 여러 테이블에 Lock 을 걸면서 데드락 이슈가 발생하는 경우에는 비관적 락으로는 해결할 수 없다.

        - 해결 방법
            Redis Sorted Set 활용
            Redis 의 Lua Script 활용
            Kafka 와 같은 메시징 큐 도입
            API Gateway 에서 처리율 제한 알고리즘 구현
            처리율 제한기 미들웨어 도입

        - 낙관적 락(Optimistic Lock)과 비관적 락(Pessimistic Lock)은 싱글 DB 환경인 경우에만 적용 가능한 개념이다.
          샤딩 또는 Replication 등을 통해 DB가 분산되어있는 환경이라면 적용할 수 없다.

    3. 분산 락(Distributed Lock)
        - 자바 스프링 기반의 웹 애플리케이션은 기본적으로 멀티 쓰레드 환경에서 구동된다.
          따라서 여러 쓰레드가 함께 접근할 수 있는 공유자원에 대해 경쟁 상태(race condition)이 발생하지 않도록 별도의 처리가 필요하다.
          자바는 synchronized 라는 키워드를 언어 차원에서 제공해, 모니터 기반으로 상호 배제(mutual exclusion) 기능을 제공한다.
          하지만, 이 매커니즘은 같은 프로세스에서만 상호 배제를 보장한다.
          웹 애플리케이션 프로세스를 단 하나만 사용하는 서비스라면 상관 없지만, 일반적으로는 서버를 다중화하여 부하 분산하고 있을 것이다.
          이런 분산 환경에서 상호 배제를 구현하여 동시성 문제를 다루기 위해 등장한 방법이 바로 분산 락(distributed lock)이다.
          분산 락을 구현하기 위해 락에 대한 정보를 ‘어딘가’에 공통적으로 보관하고 있어야 한다.
          그리고 분산 환경에서 여러대의 서버들은 공통된 ‘어딘가’를 바라보며, 자신이 임계 영역(critical section)에 접근할 수 있는지 확인한다.
          이렇게 분산 환경에서 원자성(atomic)을 보장할 수 있게 된다.
        - 여러 독립된 프로세스에서 하나의 공유 자원에 접근할 때, 데이터에 결함이 발생하지 않도록 원자성을 보장하기 위해 분산락을 활용


        - DB가 분산되어있는 환경이라면, DB로 가는 요청을 단일진입점으로 만들고 순차적으로 요청을 처리할 때 사용할 수 있는 게 분산 락
        - Redis 의 분산 락은 일관성을 보장하지 못한다.??  (https://redis.io/docs/manual/patterns/distributed-locks/#disclaimer-about-consistency)

        - 분산 락(Distributed Lock)은 Lock 리소스 보안에 따라 크게 두 가지로 나눌 수 있다.
            1. 비동기 복제 기반 분산 시스템 ex) MySQL, Redis, Tair
            2. Paxos 기반 분산 합의 시스템 ex) ZooKeeper
            -> 1번 방법은 2번 방법에 비해 데이터 손실 위험이 있다. 그래서 TTL 메커니즘을 통해 세분화된 Lock 을 제공한다.
               Redis 의 Redisson 은 자체 TTL 메커니즘을 제공한다.
               2번 방법은 합의 프로토콜을 통해 여러 데이터 복사본을 보장하고 높은 데이터 보안성을 제공한다. 일반적으로 세션 메커니즘을 사용하고,
               오랜 기간 Lock 을 가지고 있으며 데이터 손실 위험이 비교적 적다.
        - 리소스에 Lock 을 가지고 있어도, 다른 DB의 같은 리소스에는 접근 가능하기 때문에, DB로 가는 요청을 단일 진입점으로 만들 수 있는 무언가가 필요하다.
          구현방식이 간단하고 성능이 가장 좋으면서, 참고할 레퍼런스가 많은 Redis 를 이용해서 분산 락(Distributed Lock)을 구현하고자 한다.

        - redis 자바 클라이언트
            - Redis 란 key-value 구조의 비정형 데이터를 저장하고 관리하기 위한 오픈 소스 기반의 비 관계형 인메모리 DBMS 입니다.
              Redis 의 다양한 특징 중에서도 Single Threaded 한 특징 즉, 한 번에 하나의 명령만 처리할 수 있는 특징 때문에 동시성 문제를 해결하는데 많이 사용됩니다.
            - JAVA 용 레디스 클라이언트 라이브러리는 Jedis, Lettuce, Redisson 등이 있다.
            - 이 중에서 Jedis 는 성능이 많이 좋지 않음 (Jedis와의 성능 비교 - https://jojoldu.tistory.com/418)
            - Redisson 은 Bucket, Map, RLock 과 같은 구현체만을 제공하므로 DataType 에 맞는 메소드를 선택해야 합니다.
                - Lettuce
                    - redis 기본 패키지에 포함
                    - Lettuce 는 스핀락(Spin Lock)을 사용한다.
                    - Setnx(set when not exists - "값이 존재하지 않으면 세팅한다") 명령어를 활용하여 분산락을 구현
                      Setnx 는 Spin Lock 방식이므로 retry 로직을 개발자가 작성해 주어야 합니다.
                      Spin Lock 이란, Lock 을 획득하려는 스레드가 Lock 을 획득할 수 있는지 확인하면서 반복적으로 시도하는 방법입니다.
                    - 스핀락(Spin Lock)은 Lock 이 없는 프로세스는 Lock 을 획득하기 위해 무한루프를 돌게된다.
                    - 무한루프를 돌면서 CPU 를 쓸데없이 낭비하게 되기 때문에, 성능 저하로 이어질 수 있다.
                    - 그럼 이런 쓸데없는것을 왜 만들었나 싶겠지만, 코어가 여러개인 경우 유용하다.
                      Lock 을 얻기 위해 계속 무한루프를 돌다가, Lock 을 얻으면 컨텍스트 스위칭 필요없이 바로 실행될 수 있기 때문이다.

                    - 구현이 간단하다
                      Spring data redis 를 이용하면 lettuce 가 기본이기 때문에 별도의 라이브러리를 사용하지 않아도 된다.
                      Spin Lock 방식이기 때문에 동시에 많은 스레드가 lock 획득 대기 상태라면 redis 에 부하가 갈 수 있다.

                - Redisson
                    - 오픈 소스 라이브러리
                    - 스핀락(Spin Lock)을 사용하지 않고 pub-sub 기능을 사용한다.
                    - Pub-sub 기반으로 Lock 구현 제공
                      Pub-Sub 방식이란, 채널을 하나 만들고, 락을 점유 중인 스레드가, Lock 을 해제했음을, 대기 중인 스레드에게 알려주면 대기 중인 스레드가 Lock 점유를 시도하는 방식입니다.
                      이 방식은, Lettuce 와 다르게 대부분 별도의 Retry 방식을 작성하지 않아도 됩니다.
                    - pub-sub 이란 마치 인터럽트처럼, Lock 획득을 기다리는 클라이언트에게 Lock 획득할 수 있다는 신호를 보내주는 것이다.
                      그래서 Lock 획득을 위해 무한루프를 돌 필요가 없다.

                    - Lettuce 와 비슷하게 Netty 를 사용하여 non-blocking I/O를 사용합니다.
                      Redisson 의 특이한 점은 직접 레디스의 명령어를 제공하지 않고,
                      Bucket 이나 Map 같은 자료구조나 Lock 같은 특정한 구현체의 형태로 제공한다는 것입니다.

                    - 락 획득 재시도를 기본으로 제공한다.
                      pub-sub 방식으로 구현이 되어있기 때문에 lettuce 와 비교했을 때 redis 에 부하가 덜 간다.
                      별도의 라이브러리를 사용해야 한다.
                      lock 을 라이브러리 차원에서 제공해주기 때문에 사용법을 공부해야 한다.

                    - 장점
                        - Lock 에 타임아웃이 구현되어 있다.
                            - Redisson 은 tryLock 메소드에 타임아웃을 명시하도록 되어있어 락이 해제되지 않는 문제로 무한 루프에 빠질 위험이 사라짐.
                        - 스핀락(Spin Lock)을 사용하지 않고 pub-sub 기능을 사용한다.
                            - pub-sub 이란 마치 인터럽트처럼, Lock 획득을 기다리는 클라이언트에게 Lock 획득할 수 있다는 신호를 보내주는 것이다.
                            - 알림을 주어서 일일이 레디스에 요청을 보내 락의 획득가능여부를 체크하지 않아도 되도록 개선했습니다.
                        - Lua 스크립트를 사용합니다.
                            - 위와 같이 락의 기능을 제공하더라도 락에 사용되는 여러 연산은 atomic 해야 합니다.
                              그 이유는 각 명령어를 따로 보내게 되면 두 연산이 atomic 하지 않게 수행되기 때문에 명령어의 실행 순서가 섞일 수 있어 예상과 다른 결과가 나올 수 있기 때문입니다.
                            - 레디스는 싱글 스레드 기반으로 연산하기 때문에 이러한 atomic 연산을 비교적 쉽게 구현할 수 있습니다. 그래서 레디스는 트랜잭션, Lua 스크립트로 atomic 연산을 지원합니다.
                            - 트랜잭션은 명령어를 트랜잭션으로 묶는 기능이기에 명령어의 결과를 받아서 다른 연산에 활용하는 atomic 한 연산을 구현하기 어렵습니다.
                              하지만 Lua 스크립트를 사용하면 atomic 을 보장하는 스크립트를 쉽게 구현할 수 있습니다.

                    - 주의할 점
                        - Redisson 은 @Transactional 과 동시에 동작하지 않음
                        - Redisson 을 이용하여 분산락을 구현했을 경우, 동시성은 보장되지만 트랜잭션 처리 부분은 빠졌기 때문에 완벽하게 ACID 가 보장되는 코드가 아님.
                        - 동시에 동작하지 않기 때문에 별도로 Transactional manager 를 직접 주입하여 비즈니스 코드 자체에서 commit, rollback, start 등을 해줘야 함.
                          unlock()전에 commit 해줘야 함.

                    -> Redisson 은 정말 좋은 라이브러리이긴 하지만 아주 많은 구현체들을 지원하기 때문에
                      각 구현체들이 많은 트래픽에도 효율적으로 동작할 수 있는지 사용하기 전에 내부의 구현 내용을 확인해보고 사용하시는 것을 추천

                    - 참고
                        - Redisson 이 Lettuce 보다 좋은 이유
                          https://it-hhhj2.tistory.com/102


    -> 중요한 점은 Lock 을 정말로 사용해야 하는 상황인지 판단하는 것과 어떤 Lock 을 사용해서 해결해야 하는지 판단하는 능력인 것 같다.

    *  ExecutorService
        - 멀티스레드 이용 ExecutorService : 비동기를 단순하게 처리할 수 있또록 해주는 java api
        - 손쉽게 ThreadPool 을 구성하고 Task 를 실행하고 관리할 수 있는 역할을 한다.
        - Executors 를 사용하여 ExecutorService 객체를 생성하며, 스레드 풀의 개수 및 종류를 지정할 수 있는 메서드를 제공한다.

    * CountDownLatch
        - CountDownLatch 란, 어떤 스레드가 다른 스레드에서 작업이 완료될 때 가지 기다릴 수 있도록 해주는 클래스이다.
        - CountDownLatch 를 이용하여, 멀티스레드가 남은 횟수의 작업을 모두 완료한 후, 테스트를 하도록 기다리게 합니다.


** 참고 **

Redis로 분산 락을 구현해 동시성 이슈를 해결해보자!
https://hudi.blog/distributed-lock-with-redis/

락이란? 분산락, 스핀락의 개념
https://way-be-developer.tistory.com/m/274

Lock으로 이해하는 Transaction의 Isolation Level
https://suhwan.dev/2019/06/09/transaction-isolation-level-and-lock/

[Database] 데이터베이스 락(Lock)의 종류와 역할
https://velog.io/@koo8624/Database-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EB%9D%BDLock%EC%9D%98-%EC%A2%85%EB%A5%98%EC%99%80-%EC%97%AD%ED%95%A0

레디스와 분산 락(1/2) - 레디스를 활용한 분산 락과 안전하고 빠른 락의 구현
https://hyperconnect.github.io/2019/11/15/redis-distributed-lock-1.html

분산락을 이용하여 동시성 제어하기 (redis활용하기)
https://velog.io/@korea3611/Spring-boot-%EC%A2%8B%EC%95%84%EC%9A%94%EC%88%98-%EC%A6%9D%EA%B0%80-%EB%B6%84%EC%82%B0%EB%9D%BD%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-%EB%8F%99%EC%8B%9C%EC%84%B1-%EC%A0%9C%EC%96%B4%ED%95%98%EA%B8%B0-redis%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B0

redis 설치 및 redisson을 이용한 분산락 구현
https://it-hhhj2.tistory.com/102

[스프링] 재고 시스템으로 알아보는 동시성 문제 해결 방법
https://crazy-horse.tistory.com/entry/%EC%9E%AC%EA%B3%A0-%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%9C%BC%EB%A1%9C-%EC%95%8C%EC%95%84%EB%B3%B4%EB%8A%94-%EB%8F%99%EC%8B%9C%EC%84%B1-%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0-%EB%B0%A9%EB%B2%95

[redis] redisson을 통한 분산 락
https://kkambi.tistory.com/196

동시성 문제 해결하기 V1, V2, V3
https://velog.io/@znftm97/%EB%8F%99%EC%8B%9C%EC%84%B1-%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B8%B0-V2-%EB%B9%84%EA%B4%80%EC%A0%81-%EB%9D%BDPessimistic-Lock

<Database> 공유락(Shared Lock) & 배타락(Exclusive Lock)
https://willbfine.tistory.com/578?category=1044057

분산락 테스트 코드
https://github.com/hgs-study/distributed-lock-practice

자바에서 동시성을 해결하는 다양한 방법과 Redis의 분산락   -> 다른 게시물 (락 이외) 참고
https://dkswnkk.tistory.com/681

락 종류
https://tecoble.techcourse.co.kr/post/2022-11-07-mysql-isolation/

JPA의 낙관적 락과 비관적 락을 통해 엔티티에 대한 동시성 제어하기
https://hudi.blog/jpa-concurrency-control-optimistic-lock-and-pessimistic-lock/

Distributed Locks with Redis (공식 레퍼런스)
https://redis.io/docs/manual/patterns/distributed-locks/

HikariCP Dead lock에서 벗어나기 (이론편)
https://techblog.woowahan.com/2664/

Spring Boot 여러 서버 실행 하기 (다중서버는 포트 다르게 springboot 실행하기)
https://cheese10yun.github.io/intellij-boot-run-config/

** MySQL 을 이용한 분산락으로 여러 서버에 걸친 동시성 관리 **
https://techblog.woowahan.com/2631/

***** 트랜잭션 격리 수준 *****
https://steady-coding.tistory.com/562

***** 데이터베이스 이론 *****
https://inpa.tistory.com/category/DBMS/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%20%EC%9D%B4%EB%A1%A0
https://inpa.tistory.com/category/DBMS/MySQL

***** 자료구조 *****
https://inpa.tistory.com/category/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0/Java%20Collections

***** 디자인 패턴 *****
https://inpa.tistory.com/category/%EB%94%94%EC%9E%90%EC%9D%B8%20%ED%8C%A8%ED%84%B4/GOF%20%2B

***** CS 지식 *****
https://inpa.tistory.com/category/%EA%B0%9C%EB%B0%9C%20%EC%A7%80%EC%8B%9D/CS%20%EC%A7%80%EC%8B%9D