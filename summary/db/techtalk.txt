- Deadlock
    - 발생 조건
        1. 상호배제
        2. 점유 대기
        3. 비선점
        4. 순환 대기
          => 네 가지 조건을 모두 만족하면 교착 상태가 발생

    - 해결 방법
        1. 교착 상태 예방
            - 위의 발생 중 하나 이상을 제거
            - 일반적으로 자원 사용 효율성이 떨어지고 비용이 많이 드는 방법

        2. 교착 상태 회피
            - 교착 상태 발생 가능성을 검사해서 발생 가능성이 있다면 사전에 회피하는 방식
                1. 자원 할당 그래프 알고리즘
                2. 은행원 알고리즘
            1. 프로세스가 자원 요청시, 자원을 할당한 후에도 안정 상태로 남아있는지 사전 검사
            2. 안정 상태라면 자원을 할당
            3. 불안정 상태라면 다른 프로세스가 자원을 해지할 때까지 대기
              => 자원을 요청할 때마다 시스템 상태를 검사하는 만큼 오버헤드가 큼. 은행원 알고리즘의 경우 전제 조건이 많음

        3. 교착 상태 탐지 및 회복
            - 교착 상태를 허용하지만 상태를 탐지하고 회복하는 방식
            - 알고리즘을 주기적으로 실행함으로써, 시스템에 발생한 Deadlock 을 체크하고 회복
                ex) 자원 할당 그래프 알고리즘의 경우 그래프 상에 교착 상태를 유발시키는 순환 사이클의 존재 유무를 체크
            - 교착 상태를 일으킨 프로세스를 종료하거나, 할당된 자원을 해제함으로써 회복
                1. 프로세스 종료
                    - 교착 상태의 프로세스를 모두 중지
                    - 교착 상태가 제거될 때까지 한 프로세스씩 중지
                2. 자원 선점
                    - 교착 상태가 제거될 때까지 프로세스가 점유한 자원을 선점해 다른 프로세스에게 할당

            - 회복 고려 사항
                - 희생자 선택
                - 후퇴 (Rollback)
                - 기아 상태 (Starvation)

        4. 교착 상태 무시
            - 교착 상태 자체를 무시하고, 특별한 조치를 취하지 않는 방법
            - 교착 상태의 발생 확률이 낮은 상황에서 주로 사용
