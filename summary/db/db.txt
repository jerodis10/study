- analyze table
    - ANALYZE 는 인덱스, 테이블, 클러스터의 통계정보를 생성 한다.
    - ANALYZE 가 생성한 통계정보들은 비용기준(Cost-based)의 옵티마이저가 가장 효율적인 실행계획을 수립하기 위해 최소비용을 계산할 때 사용된다.
    - 각 오브젝트의 구조를 확인하는 것과 체인(Chain) 생성 여부를 확인할 수 있으므로 시스템의 저장공간 관리를 도와준다.
    - ANALYZE 는 다음과 같은 통계정보를 생성하여 데이터 사전에 저장 한다.
        - 테이블 : 총 로우의수, 총 블럭의 수, 비어있는 블럭에 쓰여질 수 있는 빈 공간의 평군, 체인이 발생된 로우의 수, 로우의 평균 길이
        - 인덱스 : 인덱스의 깊이(Depth), Leaf block 의 개수, Distinct Key 의 수, Leaf Blocks/Key 의 평균,
                  Data blocks/key 의 평균, Clustering Factor, 가장 큰 key 값, 가장 작은 key 값
        - 컬럼 : Distinct 한 값의 수, 히스토그램 정보
        - 클러스터 : Cluster Key 당 길이의 평균

    - 주기적인 ANALYZE 작업을 수행 시켜 주어야 한다.
      테이블을 재생성 하거나, 새로 클러스터링을 한 경우, 인덱스를 추가하거나 재생성한 경우, 다량의 데이터를 SQL 이나
      배치 애플리케이션을 통해 작업한 경우 ANALYZE 를 수행 시켜 주는 것이 좋다.
      사용자는 USER_TABLES, USER_COLUMNS, USER_INDEXS, USER_CLUSTER 등의 자료사전 뷰를 통해 정보를 확인할 수 있다
      테이블을 ANALYZE 시킨다면 거기에 따르는 인덱스들도 같이 실시하는 것이 좋다.

- 실행계획
- sql 최적화
    https://developer-talk.tistory.com/420

- 옵티마이저
    - 가장 효율적인 방법으로 SQL 을 수행할 최적의 처리 경로를 생성해주는 DBMS 의 핵심 엔진
    - 컴퓨터의 두뇌가 CPU 인 것처럼 DBMS 의 두뇌는 옵티마이저
    - SQL 을 작성하고 실행하면 소프트웨어 실행파일처럼 즉시 실행되는 것이 아니라 옵티마이저(Optimizer)라는 곳에서 "이 쿼리문을
      어떻게 실행시키겠다!"라는 여러 가지 실행계획을 세우게 됩니다. 이렇게 실행계획을 세운 뒤 시스템 통계정보를 활용하여
      각 실행계획의 예상 비용을 산정한 후 각 실행계획을 비교해서 최고의 효율을 가지고 있는 실행계획을 판별한 후 그 실행계획에
      따라 쿼리를 수행하게 되는 것입니다.

    - 옵티마이져의 종류
        - 옵티마이저는 실행 계획을 세우는 방식에 따라 규칙 기반 옵티마이저와 비용 기반 옵티마이저로 나뉩니다.

        항목	        규칙 기반 옵티마이저	                    비용 기반 옵티마이저
        개념	        사전에 정의된 규칙 기반	                    최소비용 계산 실행계획 수립
        기준	        실행우선 순위(Ranking)	                액세스 비용(Cost)
        인덱스	    인덱스 존재 시 가장 우선시 사용	            Cost 에 의한 결정
        성능	        사용자 SQL 작성 숙련도	                    옵티마이저 예측 성능
        장점	        판단이 매우 규칙적 실행 예상 가능	        통계 정보를 통한 현실 요소 적용
        단점	        예측 통계정보 요소 무시	                    최소 성능 보장 계획의 예측 제어 어려움
        사례	        AND 중심 양쪽 ‘=’ 시 Index Merge 사용	    AND 중심 양쪽 ‘=’ 시 분포도별 Index 선택

        규칙 기반 옵티마이저 (RBO)
        오라클8 이하의 버전에서 기본으로 설정된 옵티마이저가 바로 규칙 기반 옵티마이저입니다. 규칙 기반 옵티마이저는
        말 그대로 실행 속도가 빠른 순으로 규칙을 먼저 세워두고 우선순위가 앞서는 방법을 채택하는 것.
        과거에는 옵티마이저의 비용을 예측하는 능력이 그다지 좋지 않아 이러한 방식을 사용.
        옵티마이저의 실행계획을 유도할 수 있는 힌트와 HASH JOIN 의 경우에는 규칙 기반 이후에 나온 개념들이므로
        여기서는 사용하실 수 없다는 단점이 있습니다.

        비용 기반 옵티마이저
        최근에 많이 사용하고 있는 옵티마이저 방식이며 오라클 10 이후 버전부터는 공식적으로 비용 기반 옵티마이저만 사용.
        비용 기반 옵티마이저는 옵티마이저에서 실행 계획을 세운 뒤(최대 2천개까지) 비용이 최소한으로 나온 실행 계획을 수행.
        비용을 예측하기 위해서 규칙 기반 옵티마이저가 사용하지 않는 테이블, 인덱스, 칼럼 등의
        다양한 객체 통계정보와 시스템 통계정보를 이용.

    - 옵티마이저 동작 방식
        Parser : SQL 문장을 분석하여 문법 검사와 구성요소를 파악하고 이를 파싱 해서 파싱 트리를 만듭니다.
        Query Transformer : 파싱된 SQL 을 보고 같은 결과를 도출하되, 좀 더 나은 실행 계획을 갖는 SQL 로 변환이
            가능한지를 판단하여 변환 작업을 수행합니다.
        Estimator : 시스템 통계정보를 딕셔너리로부터 수집하여 SQL 을 실행할 때 소요되는 총비용을 계산합니다.
        Plan Generator : Estimator 를 통해 계산된 값들을 토대로 후보군이 되는 실행계획을 도출합니다.
        Row-Source Generator : 옵티마이저가 생성한 실행계획을 SQL 엔진이 실제 실행할 수 있는
            코드나 프로시저 형태로 포맷팅 합니다.
        SQL Engine : SQL 을 실행합니다.

    - 옵티마이저는 결코 만능이 아니다.
        칼럼의 통계 정보만 가지고는 조건절에서 사용된 조건을 만족하는 데이터의 양이 어느 정도인지 알 수가 없기에 비용 계산 결과가
        정확하지가 않습니다. 그리고 비용산정시 쿼리문 단독으로 실행된다고 가정하기에 운영 서버와 같이 쿼리가 동시 실행된다면
        실제 비용은 달라질 수 있기도 하고 히스토그램 버킷이 최대 254까지만 사용할 수 있어 254개 이상의 값을 갖는 컬럼의 경우
        비용 예측 결과가 정확하지 않는 등의 옵티마이저에 여러 가지 빈틈들이 많습니다.
        쿼리 튜닝을 할 때에는 쿼리 문의 실행계획을 꼭 보시고 옵티마이저가 비효율적으로 작동하고 있다면 오라클의 힌트 같은
        부가적인 장치를 통해 올바르게 작동될 수 있도록 유도하는 방법도 필요합니다.

- 실행 계획
    - 실행 계획이란?
        실행계획이란 사용자가 SQL 을 실행하여 데이터를 추출하려고 할 때 옵티마이저가 수립하는 작업 절차

    - 쿼리문의 실행 계획을 확인하는 방법
        쿼리문의 실행 계획을 확인하는 방법은 EXPLAIN PLAN, AUTOTRACE, SQL TRACE 이렇게 3가지가 있습니다.

    - SCAN 의 종류와 속도
        FULL TABLE SCAN : 테이블의 전체 데이터를 읽어 조건에 맞는 데이터를 추출하는 방식 입니다.
        ROWID SCAN : ROWID 를 기준으로 데이터를 추출하며 단일 행에 접근하는 방식 중에서 가장 빠릅니다.
        INDEX SCAN : 말 그대로 인덱스를 활용하여 원하는 데이터를 추출하는 방식입니다.

        이 두 가지 SCAN 방법 중 개발자가 손쉽게 유도할 수 있는 SCAN 의 방법은 FULL TABLE SCAN 과 INDEX SCAN 입니다.
        이 중에서 테이블에 데이터가 많지 않아 INDEX 를 타야 하는 시간 소요가 불필요하다고 느껴지거나 테이블에서 추출해야 하는
        데이터 양이 엄청 많다면 FULL TABLE SCAN 을 하는 것이 유리할 수 있고 반대로 많은 데이터가 있는 테이블에서 내가 원하는
        데이터를 추출해야 하는 상황이라면 INDEX SCAN 을 하는것이 좋습니다.

        FULL TABLE SCAN 을 타는 상황
            1. 조건절에서 비교한 칼럼에 인덱스가 없는 경우
            2. 조건절에서 비교한 컬럼에 최적화된 인덱스는 있지만 조건에 만족하는 데이터가 테이블의 많은 양을 차지하여
               FULL TABLE SCAN 이 낫다고 옵티마이저가 판단하는 경우
            3. 인덱스는 있으나, 테이블의 데이터 자체가 적어 FULL TABLE SCAN 이 낫다고 옵티마이저가 판단하는 상황
            4. 테이블 생성 시 DEGREE 속성 값이 크게 설정되어 있는 경우

            옵티마이저가 판단 후 TABLE FULL SCAN 을 탄다면 그냥 두는 것이 좋고 INDEX SCAN 이 더 유리한데도 불구하고
            INDEX 가 없어 부득이하게 FULL TABLE SCAN 을 한다면 INDEX 를 하나 만드는 것이 좋습니다. 물론 INDEX 를
            필요할 때마다 만드는 것도 UPDATE 와, DELETE 등의 속도를 저해하기에 마냥 좋은 것은 아닙니다.

        ROWID SCAN 을 타는 상황
            1. 조건절에 ROWID 를 직접 명시할 경우
            2. INDEX SCAN 을 통해 ROWID 를 추출한 후 테이블에 접근할 경우

            ROWID SCAN 은 단일 행 접근이 매우 빠르기 때문에 ROWID SCAN 가 유리하다고 판단되면서
            ROWID SCAN 을 탈 수 있는 상황이라면 유도해주는 것이 좋습니다.

        INDEX SCAN 을 타는 상황
            인덱스 종류	                    상황
            INDEX UNIQUE SCAN	            UNIQUE INDEX 를 구성하는 모든 컬럼이 조건에 "="로 명시된 경우
            INDEX RANGE SCAN	            1. UNIQUE 성격의 결합 인덱스의 선두 컬럼이 WHERE 절에 사용되는 경우
                                            2. 일반 인덱스의 컬럼이 WHERE 절에 존재하는 경우
            INDEX RANGE SCAN DESCENDING	    INDEX RANGE SCAN 을 수행함과 동시에 ORDER BY DESC 절을 만족하는 경우
            INDEX SKIP SCAN	                1. 결합 인덱스의 선행 컬럼이 WHERE 절는 경우
                                            2. 옵티마이저가 INDEX SKIP SCAN 이 FULL TABLE SCAN
                                               보다 낫다고 판단하는 경우
            INDEX FULL SCAN	                1. ORDER BY / GROUP BY의 모든 컬럼이 인덱스의 전체 또는 일부로 정의된 경우
                                            2. 정렬이 필요한 명령에서 INDEX ENTRY 를 순차적으로 읽는 방식으로 처리된 경우
            INDEX FULL SCAN DESCENDING	    INDEX FULL SCAN 을 수행함과 동시에 ORDER BY DESC 절을 만족하는 경우
            INDEX FAST FULL SCAN	        FULL TABLE SCAN 을 하지 않고도 INDEX FAST FULL SCAN 으로 원하는 데이터를
                                            추출할 수 있고 추출된 데이터의 정렬이 필요 없으며 결합 인덱스를 구성하는
                                            컬럼 중에 최소 한개 이상은 NOT NULL 인 경우
            INDEX JOIN	                    추출하고자 하는 데이터가 조인하는 인덱스에 모두 포함되어 있고
                                            추출하는 데이터의 정렬이 필요없는 경우

- 인덱스
    - 인덱스(Index)란?
        인덱스는 데이터베이스 테이블에 대한 검색 성능의 속도를 높여주는 자료 구조
        특정 컬럼에 인덱스를 생성하면, 해당 컬럼의 데이터들을 정렬하여 별도의 메모리 공간에 데이터의 물리적 주소와 함께 저장
        이렇게 인덱스가 생성하였다면 앞으로 쿼리문에 "인덱스 생성 컬럼을 Where 조건으로 거는 등"의 작업을 하면
        옵티마이저에서 판단하여 생성된 인덱스를 탈 수가 있습니다.
        인덱스에서 내가 원하는 데이터를 먼저 찾고 저장되어 있는 물리적 주소로 찾아갑니다.

        인덱스는 데이터베이스 테이블에 있는 데이터를 빨리 찾기 위한 용도의 데이터베이스 객체이며 일종의 색인기술입니다.
        테이블에 index 를 생성하게 되면 index Table 을 생성해 관리합니다.
        가장 일반적인 B-tree 인덱스는 인덱스 키(인덱스로 만들 테이블의 컬럼 값)와 이 키에 해당하는 컬럼 값을 가진
        테이블의 로우가 저장된 주소 값으로 구성됩니다.

    - 인덱스(Index)를 사용하는 이유
        테이블에 데이터들이 인덱스의 가장 큰 특징은 데이터들이 정렬이 되어있다는 점입니다. 이 특징으로 인해 조건 검색이라는
        영역에서 굉장한 장점이 됩니다.

        - 조건 검색 Where 절의 효율성
            테이블을 만들고 안에 데이터가 쌓이게 되면 테이블의 레코드는 내부적으로 순서가 없이 뒤죽박죽으로 저장됩니다.
            이렇게 되면 Where 절에 특정 조건에 맞는 데이터들을 찾아낼때도 레코드의 처음부터 끝까지 다 읽어서 검색 조건과
            맞는지 비교해야 합니다. 이것을 풀 테이블 스캔 (Full Table Scan)이라고 합니다. 하지만 인덱스 테이블은 데이터들이
            정렬되어 저장되어 있기 때문에 해당 조건 (Where)에 맞는 데이터들을 빠르게 찾아낼 수 있겠죠.
            이것이 인덱스(Index)를 사용하는 가장 큰 이유입니다.

        - 정렬 Order by 절의 효율성
            인덱스(Index)를 사용하면 Order by에 의한 Sort 과정을 피할수가 있습니다. Order by는 굉장히 부하가 많이
            걸리는 작업입니다. 정렬과 동시에 1차적으로 메모리에서 정렬이 이루어지고 메모리보다 큰 작업이 필요하다면
            디스크 I/O도 추가적으로 발생됩니다. 하지만 인덱스를 사용하면 이러한 전반적인 자원의 소모를 하지 않아도 됩니다.
            이미 정렬이 되어 있기 때문에 가져오기만 하면 되니까요.

        - MIN, MAX 의 효율적인 처리가 가능하다.
            이것 또한 데이터가 정렬되어 있기에 얻을 수 있는 장점입니다. MIN 값과 MAX 값을 레코드의 시작값과 끝 값 한건씩만
            가져오면 되기에 FULL TABLE SCAN 으로 테이블을 다 뒤져서 작업하는 것보다 훨씬 효율적으로 찾을 수 있습니다.

    - 인덱스(Index)의 단점
        인덱스의 가장 큰 문제점은 정렬된 상태를 계속 유지 시켜줘야 한다는 점입니다.
        INSERT, UPDATE, DELETE 를 통해 데이터가 추가되거나 값이 바뀐다면 INDEX 테이블 내에 있는 값들을 다시
        정렬을 해야겠죠. 그리고 INDEX 테이블, 원본 테이블 이렇게 두 군데에 데이터 수정 작업해줘야 한다는 단점도 있습니다.
        그리고 검색시에도 인덱스가 무조건 좋은 것이 아닙니다. 인덱스는 테이블의 전체 데이터 중에서 10~15% 이하의 데이터를
        처리하는 경우에만 효율적이고 그 이상의 데이터를 처리할 땐 인덱스를 사용하지 않는 것이 더 낫습니다. 그리고 인덱스를
        관리하기 위해서는 데이터베이스의 약 10%에 해당하는 저장공간이 추가로 필요합니다. 무턱대고 INDEX 를
        만들어서는 결코 안 될 말입니다.

    - 인덱스(Index)의 관리
        앞서 설명했듯이 인덱스는 항상 최신의 데이터를 정렬된 상태로 유지해야 원하는 값을 빠르게 탐색할 수 있습니다.
        그렇기 때문에 인덱스가 적용된 컬럼에 INSERT, UPDATE, DELETE 가 수행된다면 계속 정렬을 해주어야 하고 그에
        따른 부하가 발생합니다. 이런 부하를 최소화하기 위해 인덱스는 데이터 삭제라는 개념에서 인덱스를 사용하지 않는다
        라는 작업으로 이를 대신합니다.
        INSERT: 새로운 데이터에 대한 인덱스를 추가합니다.
        DELETE: 삭제하는 데이터의 인덱스를 사용하지 않는다는 작업을 진행합니다.
        UPDATE: 기존의 인덱스를 사용하지 않음 처리하고, 갱신된 데이터에 대해 인덱스를 추가합니다.

    - 인덱스 생성 전략
        생성된 인덱스를 가장 효율적으로 사용하려면 데이터의 분포도는 최대한으로 그리고 조건절에 호출 빈도는 자주 사용되는
        컬럼을 인덱스로 생성하는 것이 좋습니다. 인덱스는 특정 컬럼을 기준으로 생성하고 기준이 된 컬럼으로 정렬된
        Index 테이블이 생성됩니다. 이 기준 컬럼은 최대한 중복이 되지 않는 값이 좋습니다. 가장 최선은 PK로 인덱스를
        거는것이겠죠. 중복된 값이 없는 인덱스 테이블이 최적의 효율을 발생시키겠고. 반대로 모든 값이 같은 컬럼이
        인덱스 컬럼이 된다면 인덱스로써의 가치가 없다고 봐야 할 것입니다.
        1. 조건절에 자주 등장하는 컬럼
        2. 항상 = 으로 비교되는 컬럼
        3. 중복되는 데이터가 최소한인 컬럼 (분포도가 좋은) 컬럼
        4. ORDER BY 절에서 자주 사용되는 컬럼
        5. 조인 조건으로 자주 사용되는 컬럼

    - 인덱스 자료구조 (B * Tree 인덱스)
        인덱스에는 여러가지 유형이 있지만 그 중에서도 가장 많이 사용하는 인덱스의 구조는 밸런스드 트리 인덱스 구조입니다.
        그리고 B TREE 인덱스 중에서도 가장 많이 사용하는것은 B*TREE 와 B+TREE 구조를 가장 많이 사용되는 인덱스의 구조입니다.
        B * Tree 인덱스는 대부분의 DBMS 그리고 오라클에서 특히 중점적으로 사용하고 있는 가장 보편적인 인덱스입니다.
        구조는 위와 같이 Root(기준) / Branch(중간) / Leaf(말단) Node 로 구성됩니다. 특정 컬럼에 인덱스를 생성하는
        순간 컬럼의 값들을 정렬하는데, 정렬한 순서가 중간 쯤 되는 데이터를 뿌리에 해당하는 ROOT 블록으로 지정하고 ROOT 블록을
        기준으로 가지가 되는 BRANCH 블록을 정의하며 마지막으로 잎에 해당하는 LEAF 블록에 인덱스의 키가 되는
        데이터와 데이터의 물리적 주소 정보인 ROWID 를 저장합니다.

    - 결합 인덱스란
        - 결합 인덱스란?
            결합 인덱스란 두 개 이상의 컬럼을 합쳐서 인덱스를 만드는 것을 말합니다. 주로 단일 컬럼으로는 나쁜 분포도를 가지지만
            여러 개의 컬럼을 합친다면 좋은 분포도를 가지고,
            Where 절에서 AND 조건에 많이 사용되는 컬럼들을 결합 인덱스로 구성합니다.
            1. where 절에서 and 조건으로 자주 결합되어 사용되면서 각각의 분포도 보다
               두 개 이상의 컬럼이 결합될 때 분포도가 좋아지는 컬럼들
            2. 다른 테이블과 조인의 연결고리로 자주 사용되는 컬럼들
            3. order by 에서 자주 사용되는 컬럼들
            4. 하나 이상의 키 컬럼 조건으로 같은 테이블의 컬럼들이 자주 조회될 때

        - 결합 인덱스의 컬럼 순서 결정
            결합 인덱스를 만들 때 결합 인덱스를 구성하는 컬럼들의 배열 순서는 아주 중요하기에 신중하게 결정하여야 합니다.
            컬럼의 순서를 잘못 배열하면 결합 인덱스의 발동 확률이 매우 낮아질 수 있기 때문입니다. 만약 select 문의
            where 절에 결합 인덱스의 첫 번째 컬럼을 조건에 사용하였다면 그 질의문은 결합 인덱스를 사용할 수 있습니다.
            하지만 개발자가 결합 인덱스의 두번째 컬럼만을 where 절에 조건으로 사용하고 결합 인덱스를 사용하고자 했다면
            실행계획은 인덱스를 사용하지 못합니다. 따라서 쿼리문 작성 시 결합 인덱스를 사용하고자 한다면 반드시 결합 인덱스의
            컬럼 중 선행하는 컬럼부터 조건에 지정하여 사용하여야 합니다. 조건은 컬럼 전체를 순서대로 사용할 수도 있고,
            아니면 선행하는 일부 컬럼을 순서대로 사용할 수 있습니다.

        - 결합 인덱스 컬럼의 설정 시 고려해야 할 우선순위
            1. where 절 조건에 많이 사용되는 컬럼이 우선시
            2. Equal('=')로 사용되는 컬럼 우선
            3. 분포도가 좋은 컬럼을 우선
            4. 자주 이용되는 순서대로 결합 인덱스 컬럼의 순서 결정

        - 결합 인덱스의 효율성이 떨어지는 경우
            결합 인덱스도 일반적인 인덱스와 마찬가지로 데이터들이 정렬되어 보관되기 때문에 소수의 데이터를 빠르게 찾는 것에는
            유리하지만 아래와 같이 스캔이 많이 생기게 된다면 효율성이 떨어지게 됩니다.

            아래의 예시들은 emp_pay_idx 인덱스를 사용하기는 하지만 스캔이 많이 생기는 경우로 인덱스의 효율성이
            떨어지는 경우들의 예시입니다.

            select * from emp_pay where 급여년월 LIKE '2021%' and 급여코드 = '정기급여';
            위 조건절의 경우 결합 인덱스의 첫 번째 컬럼인 급여년월의 조건이 있더라도 Equal(=)이 아닌 범위 연산자인
            LIKE '2021%' 조건을 사용했으므로, 세개의 칼럼이 모두 필요한 emp_pay_idx 인덱스를 찾을 때 두번째 칼럼인
            급여코드에 대한 조건을 B*Tree 에서 쉽게 찾을수가 없게 됩니다. 이는 결합 인덱스가 각 칼럼별로 정렬이 되어 있는
            것이 아니라 첫번째, 두번째, 세번째 칼럼이 결합이 되어 정렬이 되어있기 때문입니다. 이때 급여코드에 대한 조건은
            인덱스를 찾아가는 검색조건이 아니라 인덱스 값이 조건에 맞는지 여부를 검증하는 체크 조건이 됩니다.

            select * from emp_pay where 급여년월 = '202107' and 사원번호 = '20210401';
            위 조건절의 경우는 결합 인덱스의 첫번째 칼럼인 급여년월의 조건이 equal(=)이더라도 두번째 컬럼인 급여코드에
            대한 조건이 없으므로 세번째 칼럼인 사원번호 조건을 검색 조건이 아닌 체크 조건으로 밖에 사용할 수 없게 됩니다.
            즉 결합 인덱스에서 급여년월인 모든 데이터를 찾아서 사원번호 조건에 맞는지 일일이 확인하는
            풀 테이블 스캔이 일어나고 있는 셈입니다.

    - 인덱스를 리빌드하는 이유
        인덱스 파일은 생성 후 insert, update, delete 등을 반복하다보면 성능이 저하됩니다. 생성된 인덱스는
        트리구조를 가집니다. 삽입,수정,삭제등이 오랫동안 일어나다보면 트리의 한쪽이 무거워져 전체적으로 트리의 깊이가
        깊어집니다. 이러한 현상으로 인해 인덱스의 검색속도가 떨어지므로 주기적으로 리빌딩하는 작업을 거치는것이 좋습니다.

        SELECT I.TABLESPACE_NAME,I.TABLE_NAME,I.INDEX_NAME, I.BLEVEL,
               DECODE(SIGN(NVL(I.BLEVEL,99)-3),1,DECODE(NVL(I.BLEVEL,99),99,'?','Rebuild'),'Check') CNF
        FROM   USER_INDEXES I
        WHERE   I.BLEVEL > 4
        ORDER BY I.BLEVEL DESC

        해당쿼리는 index 트리의 깊이가 4이상인 index  를 조회하는 쿼리입니다.
        해당 쿼리문을 실행하여 검색되는 index 가 있다면 리빌딩을 하는것이 좋습니다.

    - 인덱스(Index)를 남발하지 말아야 하는 이유
        개발을 진행할 때에 대개 개발서버와 운영서버를 나누어서 관리합니다. 대부분 개발서버에서 개발을 할때에는 적은량의
        데이터를 가지고 로직검사를 하며 로직검사에 통과한 코드들이 운영서버에 업데이트가 되죠. 하지만 개발서버에는 잘 동작하던
        로직들이 운영서버의 많은량의 데이터들을 처리하다보면 성능이슈가 많이 발생합니다. 그 성능이슈의 주요원인은
        바로 데이터베이스에 있습니다. 데이터베이스 관리자는 성능문제가 발생하면 가장 빨리 생각하는
        해결책이 인덱스 추가 생성입니다.

        하지만 문제를 그저 쉽게 해결하기 위해 쿼리 속도 문제가 날때마다 인덱스를 추가하는것은 바람직하지 못합니다.
        성능 이슈가 나서 인덱스를 만들고 또 다른 SQL 문에서 성능이슈가 발생하여 또 인덱스를 만들었다고 합시다.
        이렇게 문제가 발생할때마다 인덱스를 생성하면서 인덱스가 계속 추가되면 생성된 인덱스를 참조하는 하나의 쿼리문을
        빠르게는 만들 수 있지만 전체적인 데이터베이스의 성능 부하를 초래합니다. 그렇기에 인덱스를 생성하는것 보다는
        SQL 문을 좀 더 효율적으로 짜는 방향으로 나가야합니다. 인덱스 생성은 꼭 마지막 수단으로 강구해야 할 문제입니다.


- NESTED LOOP JOIN (중첩 루프 조인)
    - NESTED LOOP JOIN 이란?
        NL JOIN 이라고도 불리는 NESTED LOOP JOIN 은 2개 이상의 테이블에서 하나의 집합을 기준으로 순차적으로 상대방 Row 를
        결합하여 원하는 결과를 조합하는 조인 방식
        조인해야 할 데이터가 많지 않은 경우에 유용하게 사용
        드라이빙 테이블로 한 테이블을 선정하고 이 테이블로부터 where 절에 정의된 검색 조건을 만족하는 데이터들을 걸러낸 후,
        이 값을 가지고 조인 대상 테이블을 반복적으로 검색하면서 조인 조건을 만족하는 최종 결과값을 얻어냅니다.

    - Driving Table 과 Driven Table
        조인을 할때 먼저 액세스 되는 테이블을 Driving Table 이라고 하며 나중에 액세스 되는 테이블을 Driven Table
        Driving Table 은 옵티마이저가 결정하고 자연스레 Driving Table 이 아닌 테이블은 Driven Table 로 결정

    - NESTED LOOPS JOIN 의 장단점
        1. 인덱스에 의한 랜덤 액세스에 기반하고 있기 때문에 대량의 데이터 처리 시 적합하지 않습니다.
        2. Driving Table 로는 데이터가 적거나 where 절 조건으로 row 의 숫자를 줄일 수 있는 테이블이어야 합니다.
        3. Driven Table 에는 조인을 위한 적절한 인덱스가 생성되어 있어야 합니다.
        4. 선행 테이블의 결과를 통해 후행 테이블을 액세스 할 때 랜덤 I/O가 발생합니다.

         for(i=0; i<dept.length; i++) { -- driving table
            for(j=0; j<emp.length; j++) { -- driven table
               // Search
            }
        }
        동작 순서를 보시면 아시겠지만  위와 같은 이중 for 문과 작동원리는 비슷합니다.

        이렇듯 NESTED LOOP JOIN 의 동작 방식은 Driving Table 의 처리 범위를 하나씩 액세스 하면서 추출된 값으로
        Driven Table 을 조인하는 방식으로 동작하게 됩니다.

    - NESTED LOOP JOIN 의 성능 개선 포인트
        - 적절한 드라이빙 테이블의 선정
            Driving Table 은 WHERE 절로 최대한의 데이터를 거를 수 있는 테이블이나
            애초에 데이터의 양이 적은 테이블로 선정하는 것이 좋습니다.

            - 드라이빙 테이블 유도 방법
                1. 힌트의 사용
                    /*+ORDERED*/ -- FROM절에 기술한 테이블 순서대로 제어
                    /*+LEADING (table명)*/ -- 힌트 내에 제시된 테이블이 드라이빙으로 처리됨

                    가장 쉬운 방법은 위와 같이 힌트를 사용하는 방법입니다. 위의 두가지 힌트 중 하나를 사용하시면 됩니다.
                    만약 위의 두가지 힌트를 동시에 사용하게 되면 LEADING 힌트는 적용되지 않습니다.

                2. 뷰를 사용한다.
                    뷰를 통해서 데이터를 먼저 읽어낼 수 있고 뷰로 데이터를 읽은 결과로 다음 테이블로 연결을 시도한다면
                    조인 순서를 제어할 수 있습니다.

        - Driven Table 의 조인 컬럼에 인덱스 존재 유무
            Driven Table 에 인덱스가 존재하지 않는다면 Driving Table 에서 도출된 결과와 맞는지를
            FULL TABLE SCAN 으로 일일이 비교해야 하기 때문입니다.
            Driven Table 의 Join 컬럼에 인덱스가 생성되지 않았다면 인덱스 생성을 고려해 보는 것이 좋고 그것이 어렵다면
            조인 방식을 SORT / MERGE 방식등 다른 방식으로 바꾸는것이 성능 향상에 도움이 됩니다.

- SORT MERGE JOIN (정렬 병합 조인)
    - SORT MERGE JOIN 이란?
        조회의 범위가 많을 때 주로 사용하는 조인 방법론이며 양쪽 테이블을 각각 Access 하여 그 결과를 정렬하고
        그 정렬한 결과를 차례로 Scan 해 나가면서 연결고리의 조건으로 Merge 를 하는 방식
        주로 조인 조건 칼럼에 인덱스가 없거나, 출력해야 할 결과 값이 많을 때 사용
        조회의 범위가 좁을 때 유리한 Nested Loop Join 의 조인 방식과 장단점이 서로 바뀌어있다고 생각하시면 이해하기 쉽습니다.

    - SORT MERGE JOIN 의 사용처
        1. 연결 고리에 인덱스가 전혀 없는 경우
        2. 대용량의 자료를 조인할때 유리한 경우
        3. 조인 조건으로 <, >, <=, >=와 같은 범위 비교 연산자가 사용된 경우
        4. 인덱스 사용에 따른 랜덤 액세스의 오버헤드가 많은 경우

    - SORT MERGE JOIN 의 동작 방식
        1. 각 테이블에 대해 동시에 독립적으로 데이터를 먼저 읽어 들인다.
        2. 읽혀진 각 테이블의 데이터를 조인을 위한 연결고리에 대하여 정렬을 수행한다.
        3. 정렬이 모두 끝난 후에 조인 작업이 수행한다.

    - SORT MERGE JOIN 의 성능 개선 포인트
        - ACCESS 하는 속도를 향상 시킨다.
            SORT MERGE JOIN 은 가장 먼저 양쪽 테이블을 Access 하는 과정을 거쳐야 합니다. 이 속도를 빠르게 해 준다면
            속도 향상에 도움이 되겠죠. 테이블을 Access 할 때 FULL TABLE SCAN 이냐 INDEX RANGE SCAN 이냐 하는 등
            테이블을 Access 하는 방법을 다양한 방법을 통해 최적화시킨다면 SORT MERGE JOIN 의 속도도
            자연스럽게 최적화할 수 있습니다.

        - 정렬 속도의 향상
            SORT MERGE JOIN 은 양쪽 테이블에서 조회한 데이터들을 정렬시켜야 합니다. 이때 조인 조건 컬럼이
            이미 정렬되어 있다면 정렬을 하는 작업을 단축시켜 검색 속도 향상에 도움이 될 것입니다.

        - 양쪽의 정렬까지 완료되는 속도를 맞추어줌
            SORT MERGE JOIN 은 양쪽 테이블을 ACCESS 하고 조회한 데이터들을 정렬할때 어느 한쪽이라도 정렬 작업이
            종료되지 않으면 한쪽이 대기 상태가 되고 다른 한쪽의 정렬이 완전히 끝날 때까지 조인이 시작될 수 없습니다.
            그렇기에 두 테이블 ACCESS 속도와 정렬 속도를 최대한 비슷하게 맞추어주는 것이 좋습니다.
            비교해야 할 두 테이블의 데이터 양이나 정렬 속도를 고려하여 최대한 맞춰주는 것이 효율성 측면에서 좋습니다.

        - SORT_AREA_SIZE 최적화
            SORT MERGE JOIN 은 두 테이블 간의 비교가 이루어지기 전에 수행하는 정렬 작업을 위해 별도의 정렬 공간이 필요하며
            이 공간은 SORT_AREA_SIZE 크기만큼 메모리를 할당받아 사용하게 되고, 메모리가 부족하다면
            Temporary Table Space 를 이용하여 정렬을 수행하게 됩니다. 이때 Temporary Table Space 를 사용하면
            딜레이가 생기므로 SORT_AREA_SIZE 를 적당한 크기로 설정해두는 것이 속도 향상에 도움이 됩니다.

- HASH JOIN (해시 조인)
    - HASH JOIN 이란?
        HASH 조인은 조인될 두 테이블 중 하나를 해시 테이블로 선정하여 조인될 테이블의 조인 키 값을 해시 알고리즘으로
        비교하여 매치되는 결과값을 얻는 방식
        HASH JOIN 은 비용 기반 옵티마이저를 사용할 때만 사용될 수 있는 조인 방식이며 '=' 비교를 통한 조인에서만
        사용될 수 있습니다. 주로 많은 양의 데이터를 조인해야 하는 경우에 주로 사용

    - HASH JOIN 의 사용처
        1. JOIN 컬럼에 적당한 인덱스가 없어 NL JOIN 이 비효율적일 때
        2. JOIN Access 량이 많아 Random Access 부하가 심하여 NL JOIN 이 비효율적일 때
        3. Sort Merge Join 을 하기에는 두 테이블이 너무 커 Sort 부하가 심할 때
        4. 수행빈도가 낮고 쿼리 수행 시간이 오래 걸리는 대용량 테이블을 JOIN 할 때

    - HASH JOIN 의 동작 방식
        1. 둘 중 작은 집합(Build Input)을 읽어 Hash Area 에 해시 테이블을 생성한다.
            (해시 함수에서 리턴 받은 버킷 주소로 찾아가 해시 체인에 엔트리를 연결)
        2. 반대쪽 큰 집합(Probe Input)을 읽어 해시 테이블을 탐색하면서 JOIN 한다.
        3. 해시 함수에서 리턴 받은 버킷 주소로 찾아가 해시 체인을 스캔하면서 데이터를 찾는다.

    - HASH JOIN 의 성능 개선 포인트
        - HASH TABLE 을 만드는 과정을 효율화 한다.
            HASH JOIN 은 해시 테이블을 생성하는 비용이 수반되므로 이 과정을 효율화하는 것이 성능 개선에 있어 가장 중요합니다.
            그렇기에 HASH TABLE 로 만들 Build Input 이 Hash Area 에 담길 정도로 충분히 작아야 하며
            Build Input 해시 키 칼럼에 중복 값이 거의 없어야 효율적인 동작을 기대할 수 있습니다.

        - CPU 의 성능을 향상한다.
            HASH BUCKET 이 조인 집합에 구성되어 해시 함수 결과를 저장해야 하는데 기본적으로 HASH_AREA_SIZE 에
            지정된 크기만큼의 메모리가 할당되어 사용됩니다. 이러한 처리에는 많은 메모리와 CPU 자원을 소모하게 됩니다.
            그렇기에 CPU 의 자원이 넉넉하다면 다른 조인에 비해 보다 좋은 효율을 내지만 부족한 상황에서는 다른 조인 방법보다
            느려질 수도 있습니다. 그러므로 CPU 의 성능을 향상한다면 HASH JOIN 의 성능을 향상할 수 있습니다.

        - 충분한 PGA 메모리 확보
            Hash Area 는 PGA 메모리에 할당되는데 Build Input 이 HASH_AREA_SIZE 를 초과하게 되면 가장 큰 순서대로
            Hash Bucket 이 Temporary Table Space 로 내려가서 구성됩니다. 디스크로 내려간 Hash Bucket 에
            변경이 일어날 때마다 디스크 I/O가 발생하게 되어 성능이 현저하게 저하됩니다.

        * HASH_AREA_SIZE
          HASH JOIN 에 사용되는 최대 메모리 SIZE 를 지정하는 설정값입니다. Hash Join 에서 사용되는
          해쉬 메모리 크기(HASH_AREA_SIZE)의 기본 값은 SORT_AREA_SIZE 의 2배입니다. 9i 이상에서 값을 지정하는 것을
          권장하지 않고, PGA_AGGREGATE_TARGET parameter 사용을 권장합니다.

    - 사용법
        /*+leading(a c) use_hash(c)*/
        아마 힌트를 주지 않아도 옵티마이저가 알아서 hash 조인을 하는 경우도 있지만, 이러한 힌트를 명시해주는 것이 바람직

    - 힌트에 관해서  https://devuna.tistory.com/35
        - 힌트란 SQL 튜닝의 핵심 부분으로 일종의 지시 구문이다.
          즉, 오라클 옵티마이저(Optimizer)에게 SQL 문 실행을 위한 데이터를 스캐닝하는 경로, 조인하는 방법 등을 알려주기 위해
          SQL 사용자가 SQL 구문에 작성하는 것을 뜻한다. 오라클이 항상 최적의 실행 경로를 만들어 내기는 불가능하기 때문에
          직접 최적의 실행 경로를 작성해 주는 것이다. 사용자가 특정 SQL 문장에서 어떤 인덱스가 선택도가 높은지 알고 있는 경우
          Optimizer 에 의존한 실행 계획보다 훨씬 효율적인 실행 계획을 구사할 수 있다.

        - 단, 힌트, 인덱스, 조인의 개념을 정확히 알고 사용하지 않은 무분별한 힌트의 사용은 성능의 저하를 초래하기 때문에
          잘 알고 최적의 실행 경로를 알고 있을 경우 적절하게 사용하여야 한다.

        - (힌트에 오타가 있는 경우는 큰 관계가 없다. 왜냐하면, 잘못 사용된 힌트는 무시되어 힌트가 없는 것처럼 동작하기 때문)

        - 힌트를 사용하여 아래와 같은 것들을 할 수 있다.
          액세스 경로, 조인 순서, 병렬 및 직렬 처리, Optimizer 의 목표(Goal)를 변경 가능하다.
          데이터 값을 정렬해야 하는 경우, 힌트의 사용이 필요
          드라이빙 테이블을 원하는 대로 선정하고자 할 때도 사용

- connection timeout 과 read timeout 차이
    - connection time out
        - 클라이언트가 서버측으로 connection 맺길 원하지만 서버와 connection 이 맺어지지 못할 때 발생한다.
          이 경우, 클라이언트의 OUTBOUND, 서버 측의 INBOUND 방화벽을 확인해 볼 필요가 있다.

        - 웹 브라우저가 네이버 서버에 접속하기 위해서 서버와 연결된 상태가 되어야한다. 보통 연결을 구성하기위해
          TCP Connection 과 동일하게 3-way-HandShake 방식으로 수행하게 된다. 3-way HandShake 가 정상적으로
          수행하게 되면 웹 브라우저와 네이버 서버는 연결된 상태가 되는데, 이때까지 소요된 시간을 Connection 에
          소요된 시간이라고 할 수 있다.
          "즉, ConnectionTimeout 이란 3-way HandShake 가 정상적으로 수행되어 서버에 연결되기까지 소요된 시간이다."

    - Read time out
        - Connection time out 과는 다르게 클라이언트와 서버가 connection 은 맺어졌지만, I/O 작업이 길어지거나 데이터를 읽어가지 못하는
          상황이 되어, 설정된 시간을 초과하여 생기는 문제이다. 보통 Tcp connection 은 3way-HandShake 방식으로 수행한다.
          해당 방식을 통해 정상적으로 수행하게 되면 connection 이 맺어지고, 서버 측에서 데이터를 전달, 클라이언트에서 읽어가는 형식이다.
        - "Connection 맺은 후 Response(응답)을 받기까지 소요될 시간의 임계치이다."
        - client 가 server 에 접속을 성공 했으나 서버가 로직을 수행하는 시간이 너무 길어 제대로 응답을 못준 상태에서
          client 가 연결을 해제하는것이 Read timeout 입니다.

- noSQL
    - NoSQL 정의
        - Not Only SQL
        - NoSQL 은 비관계형 데이터베이스를 지칭한다. 즉, 관계형 데이터 모델을 지양 하며 대량의 분산된 데이터를 저장하고 조회하는 데 특화되었으며
          스키마 없이 사용 가능하거나 느슨한 스키마를 제공하는 저장소를 말한다.
        - NoSQL 은 기존 RDBMS 형태의 관계형 데이터베이스가 아닌 다른 형태의 데이터 저장 기술을 의미하며,
          관계형 데이터베이스의 한계를 극복하기 위한 데이터 저장소의 새로운 형태이다.

    - NoSQL 의 특징
        - RDBMS 와 달리 데이터 간의 관계를 정의하지 않는다.
            - RDBMS 는 데이터 관계를 외래키 등으로 정의하고 JOIN 연산을 수행할 수 있지만, NoSQL 은 JOIN 연산이 불가능하다.
        - RDBMS 에 비해 대용량의 데이터를 저장할 수 있다.
            - 페타바이트 급의 대용량 데이터를 저장할 수 있다.
        - 분산형 구조이다.
            - 여러 곳의 서버에 데이터를 분산 저장해 특정 서버에 장애가 발생했을 때도 데이터 유실 혹은 서비스 중지가 발생하지 않도록 한다.
        - 고정되지 않은 테이블 스키마를 갖는다.
            - RDBMS 와 달리 테이블의 스키마가 유동적이다. 데이터를 저장하는 칼럼이 각기 다른 이름과 다른 데이터 타입을 갖는 것이 허용된다.

    - NoSQL 의 장점
        - RDBMS 에 비해 저렴한 비용으로 분산처리와 병렬 처리 가능
        - 비정형 데이터 구조 설계로 설계 비용 감소
        - Big Data 처리에 효과적
        - 가변적인 구조로 데이터 저장이 가능
        - 데이터 모델의 유연한 변화가 가능

    - NoSQL 의 단점
        - 데이터 업데이트 중 장애가 발생하면 데이터 손실 발생 가능
        - 많은 인덱스를 사용하려면 충분한 메모리가 필요. 인덱스 구조가 메모리에 저장
        - 데이터 일관성이 항상 보장되지 않음

    - NoSQL 의 종류
        - Key-Value Database
            - 기본적인 패턴으로 KEY-VALUE 하나의 묶음(Unique)으로 저장되는 구조로 단순한 구조이기에 속도가 빠르며 분산 저장 시 용이하다.
            - Key 안에 (COLUMN, VALUE) 형태로 된 여러 개의 필드, 즉 COLUMN FAMILIES 갖는다.
              주로 SERVER CONFIG, SESSION CLUSTERING 등에 사용되고 엑세스 속도는 빠르지만, SCAN 에는 용이하지 않다.
            Ex) Redis, Oracle NoSQL Database, VoldeMorte

        - Wide-Column Database
            - 행마다 키와 해당 값을 저장할 때마다 각각 다른값의 다른 수의 스키마를 가질 수 있다.
              위 그림을 참고하면 사용자의 이름(key)에 해당하는 값에 스키마들이 각각 다름을 볼 수 있다.
              이러한 구조를 갖는 WIDE COLUMN DATABASE 는 대량의 데이터의 압축, 분산처리, 집계 쿼리 (SUM, COUNT, AVG 등)및
              쿼리 동작 속도 그리고 확장성이 뛰어난 것이 그 대표적 특징이라 할 수 있다.
            EX) Hbase, GoogleBigTable, Vertica

        - Document Database
            - 테이블의 스키마가 유동적, 즉 레코드마다 각각 다른 스키마를 가질 수 있다.
              보통 XML, JSON 과 같은 DOCUMENT 를 이용해 레코드를 저장한다.
              트리형 구조로 레코드를 저장하거나 검색하는 데 효과적이다.
            Ex) MongoDB, CouchDB, Azure Cosmos DB

        - Graph Database
            - 데이터를 노드로(그림에서 파란, 녹색 원) 표현하며 노드 사이의 관계를 엣지(그림에서 화살표)로 표현
              일반적으로 RDBMS 보다 성능이 좋고 유연하며 유지보수에 용이한 것이 특징.
              Social networks, Network diagrams 등에 사용할 수 있다.
            Ex) Neo4j, BlazeGraph, OrientDB

- 마이바티스
    http://125.132.25.164/dokuwiki/doku.php?id=wiki:spring:mybatis
- DML, DDL, DCL
- union vs union all

- JPA
    - 영속성 컨텍스트 관련 (이점 등)
- index
    - 사용 이유
    - 어떤 경우에 index 가 안걸리는지
- 분산 락 구현 방식(redis)
- 쿼리 튜닝
    튜닝관련 https://dncjf0223.tistory.com/69
    - 실행 계획  https://velog.io/@haron/SQL-%EC%BF%BC%EB%A6%AC-%ED%8A%9C%EB%8B%9D%EC%9D%84-%EC%9C%84%ED%95%9C-%EC%A4%80%EB%B9%84-%EC%8B%A4%ED%96%89-%EA%B3%84%ED%9A%8D
    - select, from, join 등 키워드 기준으로 설명?


- 와탭(WhaTap) 소개 및 설치
    https://archmond.net/archives/3137

- 와탭(WhaTap)의 모니터링 기능에 빠져보자
    https://archmond.net/archives/3241

- 동시성 제어 기법들
- 트랜잭션 격리 수준  https://code-lab1.tistory.com/52
- 데이터베스 종류별 lock
- JPA 의 lock

- b+ tree
- 다중 칼럼 인덱스