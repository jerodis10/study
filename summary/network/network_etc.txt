- HTTP 가 무엇인가요?
    - HyperText Transport
    - Protocol의 약자로 웹서버와 클라이언트 간의 문서를 교환하기 위한 통신규약
    - World Wide Web(WWW)의 분산되어 있는 Server와 Client 간에 Hypertext를 이용한 정보교환이 가능하도록 하는 통신 규약
    - HTTP는 웹에서만 사용하는 Protocol로 TCP/IP 기반으로 한 지점에서 다른 지점(보통 클라이언트와 서버)으로 요청과 응답을 전송한다.


- HTTP의 특징
    - HTTP는 상태 정보를 저장하지 않는 Stateless의 특징과 클라이언트의 요청에 맞는 응답을 보낸 후 연결을 끊는 Connectionless의 특징을 가지고 있습니다.
    - HTTP 메시지는 HTTP Server와 HTTP Client에 의해서 해석
    - TCP/IP 프로토콜의 Application 계층에 위치
    - TCP Protocol을 이용한다(Default Port 80)
    - 현재 Version 1.1 (RFC 2616)


- HTTP 1.1
    - HTTP 1.0의 성능 개선에 중점을 두었다.
    - HTTP 1.0의 문제점
        - 단순한 OPEN, OPERATION, CLOSE
        - 매번 필요할 때마다 연결(비 지속성 연결방식) → 성능의 저하
        - 한번에 얻어서 가져올 수 있는 데이터 양이 제한
        - URL의 크기도 작으며, 캐시 기능이 미흡함(Last-Modified에 의존)
        - GET/HEAD/POST method만 허용

    - HTTP 1.1의 개선
        - 지속적인 연결을 해 주는 persistent connection 지원
        - multiple request 처리 가능
        - reqeust/response가 pipeline 방식으로 진행
        - proxy server와 캐시 기능 향상(Cache-Control)
        - GET, HEAD, POST, OPTIONS, DELETE, TRACE, CONNECT 메소드 허용


- HTTPS의 작동 방식에 대해 설명해주세요
    - HTTP는 평문 데이터를 전송하는 프로토콜이기 때문에, HTTP로 중요한 정보를 주고 받으면 제 3자에 의해 조회될 수 있습니다.
    - 이러한 문제를 해결하기 위해 HTTP에 암호화가 추가된 프로토콜이 HTTPS입니다.
    - HTTPS는 SSL의 껍질을 덮어쓴 HTTP라고 할 수 있습니다.
        ※ SSL(Secure Socket Layer) 인터넷을 통해 전달되는 정보를 보호하기 위해 개발한 통신 규약


- 3-way-HandShake
    두 호스트 간에 연결을 맺고 최종적인 통신 목적지까지 데이터를 전달하는 기능을 한다 먼저 정확한 전송을 보장하기 위해 상대방 컴퓨터와 사전에
    세션을 수립하는 과정을 의미 이때 통신을 시작할 때 거치는 과정을 3 Way Handshake, 통신을 마칠 때 거치는 과정을 4 Way Handshake라고 한다

    TCP는 전송계층에 속해있다.
    전송 계층에는 크게 TCP(Transmission Control Protocol) 와 UDP(User Datagram Protocol) 2가지 프로토콜이 있다

    SYN은 'synchronize sequence numbers', 그리고 ACK는'acknowledgment' 의 약자이다.

    3 Way Handshake
        [STEP 1]
        A클라이언트는 B서버에 접속을 요청하는 SYN 패킷을 보낸다.
        이때 A클라이언트는 SYN 을 보내고 SYN/ACK 응답을 기다리는 SYN_SENT 상태, B서버는 Wait for Client 상태이다.

        [STEP 2]
        B서버는 SYN요청을 받고 A클라이언트에게 요청을 수락한다는 ACK 와 SYN flag 가 설정된 패킷을 발송하고
        A가 다시 ACK으로 응답하기를 기다린다. 이때 B서버는 SYN_RECEIVED 상태가 된다.

        [STEP 3]
        A클라이언트는 B서버에게 ACK을 보내고 이후로부터는 연결이 이루어지고 데이터가 오가게 되는것이다.
        이때의 B서버 상태가 ESTABLISHED 이다.
        위와 같은 방식으로 통신하는것이 신뢰성 있는 연결을 맺어 준다는 TCP의 3 Way handshake 방식이다.

    4 Way Handshake
        [STEP 1]
        클라이언트가 연결을 종료하겠다는 FIN플래그를 전송한다. 이때 A클라이언트는 FIN-WAIT 상태가 된다.

        [STEP 2]
        B서버는 FIN플래그를 받고, 일단 확인메시지 ACK 보내고 자신의 통신이 끝날때까지 기다리는데 이 상태가
        B서버의 CLOSE_WAIT상태다.

        [STEP 3]
        연결을 종료할 준비가 되면, 연결해지를 위한 준비가 되었음을 알리기 위해 클라이언트에게 FIN플래그를 전송한다. 이때 B서버의 상태는 LAST-ACK이다.

        [STEP 4]
        클라이언트는 해지준비가 되었다는 ACK를 확인했다는 메시지를 보낸다.
        A클라이언트의 상태가 FIN-WAIT ->TIME-WAIT 으로 변경된다.


- RESTful
    - REST 의 제약을 준수했다는 의미를 가진다.
    - REST: 웹에서 사용하는 아키텍처 중 하나
    - URI 를 통해 자원을 지정하고, HTTP 메서드를 통해 자원에 대한 행위를 표현
    - REST API 란 REST 아키텍쳐 스타일에 부합하는 API

    - 초기의 웹은 정적인 페이지의 나열로 구성되어 있었기 때문에 사용자들은 서버에서 제공하는 데이터를
      받아서 읽는 것이 사용자가 할 수 있는 행동의 전부.
    - 그런데 이제 웹이 점점 더 진화하고 복잡해지면서 사용자는 읽는 행동 뿐만 아니라 쓰고, 고치고, 지우는 행동까지 할 수 있게 됨.
      이렇게 읽고, 쓰고, 고치고, 지우는 행동 하나하나는 전부 서버와 클라이언트 사이의 통신으로 이루어진다.
      서버-클라이언트 구조는 클라이언트가 서버에게 데이터를 요청하고 서버는 요청받은 데이터를 서버에서 찾는다. 그리고 클라이언트에게
      넘겨주면 서버와 클라이언트 구조가 끝난다.
    - 이렇게 서버와 클라이언트의 통신이 늘어나게 되면서 일관된 통신 방식이 필요성 제기됨.
      그 중에 하나로 등장한 것이 SOAP. SOAP 라는 하나의 방식으로 통신할 수 있음.
      어렵고, 복잡하고, 느리기 때문에 현재는 사용되고 있지 않음. 현재는 REST 가 사용됨.

    - REST (Representational State Transfer)
        - 서버와 클라이언트 간 통신 방식 중 하나
        - 자원을 이름으로 구분하여 자원의 상태를 주고 받는다.

    - 자원의 표현
        - URI
            - REST 에서는 자원을 표현할 때 URI 라는 방식으로 표현한다.
              URI 는 REST 에서 자원을 구분하고 처리하기 위해 사용되며 URI 를 잘 네이밍 할수록 API 가 직관적이고 사용하기 쉽다.

        - Singleton and Collection Resources
            - URI 는 Singleton 이나 Collection 으로 표현한다.

        - Collection and Sub-collection Resources
            - URI 는 서브 컬렉션을 포함할 수 있다.

        - URI 네이밍 규칙을 지키면 개발자들의 공용어처럼 사용 가능
            - 명사를 사용해서 자원을 표현
            - 예외적으로 동사 허용하는 경우 (controller)
                 ex) /game/play 에 접근 시 게임이 시작되는 경우
            - 자원 간 계층 관계를 표현하기 위해 /(슬래시)를 사용
                ex) /crews/frontend
                    /product/5
            - URI 경로 마지막에는 /(슬래시)를 붙이지 않는다.
            - 하이픈(-) 기호를 사용하여 URI 의 가독성을 향상할 수 있다.
                ex) /profilemanagement (X)
                    /profileManagement (X)
                    /profile-management (O)
            - URI 에는 가급적 밑줄을 사용하지 않는다.
                - 일부 브라우저나 화면에서 글꼴에 따라 (_) 문자가 가려지거나 숨겨질 수 있다.
            - URI 에는 소문자만 사용
            - URI 에 파일 확장자를 표시하지 않는다.
            - URI 에 CRUD 함수의 이름을 사용하지 않는다. -> HTTP 메서드를 통해 표현
            - 자원의 필터링을 위해 새로운 API 를 만들지 않는다.
                - Query string 을 이용
                - Query string: 주소?속성=값&속성=값&...
                - Query string 은 특정 주소로 접근할 때 페이지에 대한 옵션으로 활용
            - 프론트엔드 크루 이름, 오름차순으로 보고 싶다면?
                ex) /crews?type=frontend&sort=name,asc

    - 자원의 상태를 주고 받는다.
        - 자원의 상태를 주고 받는 방식은 클라이언트와 서버 간의 통신으로 이루어진다.
        - 클라이언트가 HTTP 메서드를 보내면 서버는 HTTP 상태 코드를 통해서 정상적으로 처리되었는지 실패했는지 여부를 알려주는 방식으로 소통

        - HTTP 메서드
            - 자원의 상태를 주고받기 위해 사용하는 메서드
            - GET, POST, PUT, PATCH, DELETE
            - 같은 URI 사용 + 다른 동작
            - CRUD 메서드의 이름을 URI 에 표현하지 않을 수 있음

            - GET: 자원을 검색할 때 사용
            - POST: 자원을 생성할 때 사용
            - PUT: 자원을 업데이트할 때 사용 (보내지 않은 정보는 null 값으로 업데이트)
            - PATCH: 자원을 업데이트할 때 사용 (보내지 않은 데이터는 기존 데이터를 유지)
            - DELETE: 자원을 삭제할 때 사용

        - HTTP 상태코드
            - 1xx: 조건부 응답
            - 2xx: 성공
            - 3xx: 리다이렉션
            - 4xx: 클라이언트 오류
            - 5xx: 서버 오류

            HATEOAS ? self-descriptive ?

    => RESTful 이 이론적인 내용을 100% 충족하지 못한다고 하더라도 개발자들 사이의 의사소통 수단으로 잘 활용된다면
       이것을 RESTful 이라고 불러도 되지 않을까?


- GET과 POST의 비교 및 차이
    - GET
        어떠한 정보를 가져와서 조회하기 위해서 사용되는 방식

        - URL에 변수(데이터)를 포함시켜 요청한다.
        - 데이터를 Header(헤더)에 포함하여 전송한다.
        - URL에 데이터가 노출되어 보안에 취약하다.
        - 캐싱할 수 있다.

        GET 방식은 간단한 데이터를 URL에 넣도록 설계된 방식으로 데이터를 보내는 양에 한계가 있습니다.
        HTTP 자체는 GET 방식의 URL 길이에 제약을 두고 있지는 않지만, 브라우저에서 최대 길이를 제한하고 있으며 URL형식에 맞지 않는 파라미터 이름이나 값은 인코딩되어 전달해야 합니다.
        (만약 여기서 보내는 길이가 너무 길은 경우 초과데이터는 절단됩니다.)
        특별히 전송하는 데이터가 없으므로 GET방식에서 바디는 보통 빈 상태로 전송이 되며, 헤더의 내용 중 Body의 데이터를 설명하는 Content-type 헤더필드도 들어가지 않습니다.

    - POST
        데이터를 서버로 제출하여 추가 또는 수정하기 위해서 사용하는 방식

        - URL에 변수(데이터)를 노출하지 않고 요청한다.
        - 데이터를 Body(바디)에 포함시킨다.
        - URL에 데이터가 노출되지 않아서 기본 보안은 되어있다.
        - 캐싱할 수 없다.

        GET방식은 URL에 데이터를 붙여서 전송하는 반면에 POST방식은 BODY에 데이터를 넣어서 전송합니다.
        따라서 헤더필드 중 Body의 데이터를 설명하는 Content-Type이라는 헤더 필드가 들어가고 어떠한 데이터 타입인지를 명시해주어야 합니다.
        데이터를 Body에 포함시키는 이점 때문에 메세지 길이의 제한은 없지만 최대 요청을 받는 시간인 Time Out이 존재하므로 클라이언트에서 페이지를 요청하고 기다리는 시간이 존재합니다.
        실제로 상황에서 POST 방식은 URL에 데이터가 노출되지 않으므로 즐겨찾기나 캐싱이 불가능하지만 쿼리스트링(문자열)데이터 뿐만 아니라, 라디오 버튼, 텍스트 박스와 같은 객체들의 값도 전송이 가능합니다.


- PUT과 POST의 차이가 무엇인가요?
    - PUT은 모든 리소스를 대체하기 위해 사용합니다. POST는 리소스 생성을 목적으로 하는 경우가 많기 때문에 멱등하지 않습니다.
      멱등하다란 매번 똑같은 요청을 해도 늘 같은 결과를 반환하는 것을 말합니다.


- PUT 과 PATCH의 차이는 무엇인가요?
    - PUT 은 모든 리소스를 대체하지만 PATCH는 일부 리소스만 대체해버립니다.


- OSI 7 layer와 각 계층에 대해 아는대로 설명해주세요.
    7 계층(응용 계층) : 사용자에게 통신을 위한 서비스 제공. 인터페이스 역할
    6 계층(표현 계층) : 데이터의 형식(Format)을 정의하는 계층 (코드 간의 번역을 담당)
    5 계층(세션 계층) : 컴퓨터끼리 통신을 하기 위해 세션을 만드는 계층
    4 계층(전송 계층) : 최종 수신 프로세스로 데이터의 전송을 담당하는 계층 (단위 :Segment) (ex. TCP, UDP)
    3 계층(네트워크 계층) : 패킷을 목적지까지 가장 빠른 길로 전송하기 위한 계층 (단위 :Packet) (ex. Router)
    2 계층(데이터링크 계층) : 데이터의 물리적인 전송과 에러 검출, 흐름 제어를 담당하는 계층 (단위 :frame) (ex. 이더넷)
    1 계층(물리 계층) : 데이터를 전기 신호로 바꾸어주는 계층 (단위 :bit) (장비: 케이블,리피터,허브)

    - 응용계층은 사용자에게 네트워크를 사용할 수 있도록 인터페이스를 제공하는 역할을 합니다. 주요 프로토콜은 http가 있습니다.
    - 표현 계층은 송신지와 수신지가 서로 사용할 수 있도록 데이터의 형식을 맞추는 역할입니다.
    - 세션 게층은 송수신측에 세션을 연결하고 유지하는 역할을 수행합니다. 주요 프로토콜은 ssh가 있습니다.
    - 전송 계층은 패킷전송의 유효함을 체크하고 재전송 하는 신뢰성 있게 전달하는 역할을 수행하며 tcp 가 있습니다.
    - 네트워크 계층은 목적지로 패킷을 전달하는 경로 선택 및 중계역할을 합니다.
    - 데이터 링크 계층은 프레임을 전달하며 오류제어의 역할이 있습니다.
    - 물리 계층은 전기적 신호로 데이터를 보내는 역할을 합니다