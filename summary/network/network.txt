- HTTP 가 무엇인가요?
    - 서버와 클라이언트 모델을 따르고 웹상에서 Request 와 Response 구조로 메세지를 주고받을 수 있는 프로토콜 입니다.
      TCP/IP를 기반으로 동작하며 가장 큰 특징은 Connectionless 와 StateLess 입니다.

    - HyperText Transport
    - Protocol의 약자로 웹서버와 클라이언트 간의 문서를 교환하기 위한 통신규약
    - World Wide Web(WWW)의 분산되어 있는 Server와 Client 간에 Hypertext를 이용한 정보교환이 가능하도록 하는 통신 규약
    - HTTP는 웹에서만 사용하는 Protocol로 TCP/IP 기반으로 한 지점에서 다른 지점(보통 클라이언트와 서버)으로 요청과 응답을 전송한다.


- HTTP의 특징
    - HTTP는 상태 정보를 저장하지 않는 Stateless의 특징과 클라이언트의 요청에 맞는 응답을 보낸 후 연결을 끊는 Connectionless의 특징을 가지고 있습니다. ??
    - HTTP 메시지는 HTTP Server와 HTTP Client에 의해서 해석
    - TCP/IP 프로토콜의 Application 계층에 위치
    - TCP Protocol을 이용한다(Default Port 80)
    - 현재 Version 1.1 (RFC 2616)


- 연결지향적인 특징이 있다고 했는데 그게 무엇인가요?
    - 서로 연결되어 있는 것과 같은 특징을 말합니다. TCP는 이를 위해서 3 way handshaking을 제공합니다. 실제로 연결된 상태는 아니고 논리적으로 연결되어 있음을 의미합니다.


- HTTP의 특성 중 비연결성 프로토콜이 무엇인가?
    - 클라이언트와 서버가 한 번 연결을 맺은 후, 클라이언트 요청에 대해 서버가 응답을 마치면 맺었던 연결을 끊어 버리는 프로토콜이다.
      수십 만 명이 웹 서비스를 사용하더라도 접속 유지는 최소한으로 할 수 있기 때문에 더 많은 유저의 요청을 처리할 수 있지만,
      클라이언트의 이전 상태를 알 수 없어서 Stateless하다는 특징이 있다.


- HTTP의 특성 중 무상태가 무엇인가?
    - 비연결적인 특성으로 연결이 해제됨과 동시에 서버와 클라이언트가 이전에 요청한 결과에 대해서 잊어버리게 된다. 즉, 클라이언트가 이전 요청과
      같은 데이터를 원한다고 하더라도 다시 서버에 연결을 하여 동일한 요청을 시도해야 한다. HTTP는 이러한 무상태 특성으로 인해 독립적인 쌍의 요청과
      응답을 처리하기 때문에, 단순하고 상태를 저장해야 하는 서버의 부담을 줄일 수 있다.


- HTTP 1.1
    - HTTP 1.0의 성능 개선에 중점을 두었다.
    - HTTP 1.0의 문제점
        - 단순한 OPEN, OPERATION, CLOSE
        - 매번 필요할 때마다 연결(비 지속성 연결방식) → 성능의 저하
        - 한번에 얻어서 가져올 수 있는 데이터 양이 제한
        - URL의 크기도 작으며, 캐시 기능이 미흡함(Last-Modified에 의존)
        - GET/HEAD/POST method만 허용

    - HTTP 1.1의 개선
        - 지속적인 연결을 해 주는 persistent connection 지원
        - multiple request 처리 가능
        - reqeust/response가 pipeline 방식으로 진행
        - proxy server와 캐시 기능 향상(Cache-Control)
        - GET, HEAD, POST, OPTIONS, DELETE, TRACE, CONNECT 메소드 허용


- HTTP 1.0과 HTTP 2.0의 차이를 말해주세요
    - HTTP 1.0
        - HTTP 버전 정보, 상태 코드 라인, HTTP 헤더 개념 추가
        - 1개의 요청과 1개의 응답이 1개의 Connection과 대응된다는 단점
            - 매번 새로운 연결로 성능 저하
            - 서버 부하 비용 증가
            - 이것을 보완하기 위해 등장한 것이 HTTP 1.1

    - HTTP 1.1
        - Persistent Connection이라는 개념을 도입
            - 지정한 timeout 동안 커넥션을 닫지 않는 방식
            - 특정 시간동안 여러 요청이 한 커넥션을 사용
            - 이전 HTTP 1.0과 비교했을 때 네트워크 사용시간이 줄어드는 것

        - 더 나아가 Pipeline이라는 기법이 도입
            - 하나의 커넥션에서 응답을 기다리지 않고 여러 요청을 연속적으로 보내 그 순서에 맞춰 응답을 받는 방식으로 지연 시간을 줄이는 방법.

        - 단점
            - HOL Blocking
            - RTT(Round Trip Time) 증가
            - 무거운 Header 구조

    - HTTP 2.0
        - HTTP 메시지 전송 방식의 변화
            - 바이너리 프레이밍 계층 사용
                - 바이너리로 인코딩을 하게 됨으로 파싱이나 전송 속도가 증가하고 오류가 발생할 가능성이 감소

        - Multiplexed Streams
            - Connection 한 개로 동시에 여러 개의 메시지를 주고 받을 수 있으며 응답은 순서에 상관없이 Stream으로 주고 받음

        - Stream Priortization
            - 리소스 간의 의존관계에 따른 우선순위를 설정하여 리소스 로드 문제를 해결

        - Server Push
            - 서버는 클라이언트가 요청하지 않은 리소스를 사전에 푸쉬를 통해 전송할 수 있다.

        - Header Compression
            - 헤더 정보를 압축


- http 1 2 3 차이 ??
    - HTTP 1.1.는 기본적으로 Connection당 하나의 요청을 처리 하도록 설계되어 있어 동시전송이 불가능하고 요청과 응답이 순차적으로 이루어 지게된다.
    - http2는 동시에 여러 리소스를 받아올 수 있게 되었다.
    - 동시에 리소스를 받아 올 수 있게된 기술적 기반은 기존의 http1은 플레인텍스트로 구성되어 있었지만 http2에서는 데이터를 전송할 때 , 바이너리로 인코딩하여 전송하게 되었습니다.
    - 바이너리 포맷의 데이터를 사용하게 되어 , 이전에는 한 뭉태기로 모여있던 데이터를 프레임이라는 단위로 나눠서 관리/ 전송할 수 있게 되었습니다.
    - http2에서는 스트림 하나가 다수개의 요청과 응답을 처리 할 수 있는 구조로 바뀌었습니다.
    - 동시에 여러 메세지를 처리할 수 있게 되었고 응답 프레임들은 요청순서에 상관없이 만들어진 순서대로 클라이언트에 전달될 수 잇게 되었습니다.
    - 이렇게 http1때 처럼 중간에 응답이 막히면 , 대기하고 있던 response들이 모두 기다려야하는 HeadOfBlocking 이슈에서 벗어날 수 있게 되었습니다.
    - 3버전에서는 그동안 변하지 않고 TCP를 기반으로 설계되어 왔던 토대를 모두 버리고, UDP에 근간을 두는 선택


- HTTP Connection
    - 커넥션 관리는 HTTP의 주요 주제이다. 대규모로 커넥션을 열고 유지하는 것은 웹 사이트 혹은 웹 애플리케이션의 성능에 많은 영향을 준다.
    - HTTP/1.x에는 몇 가지 모델이 존재한다.

    - 단기 커넥션
        - HTTP 본래의 모델이자 HTTP/1.0의 기본 커넥션은 단기 커넥션이다.
        - 각각의 HTTP 요청은 각각의 커넥션 상에서 실행된다. 이는 TCP 핸드 셰이크는 각 HTTP 요청 전에 발생하고, 이들이 직렬화됨을 의미한다.
        - 단기 커넥션들은 TCP의 이러한 효율적인 특성을 사용하지 않게 하며 예열되지 않은 새로운 연결을 통해 지속적으로 전송함으로써 성능이 최적 상태보다 저하된다.
        - 단점
            1) 새로운 연결을 맺는데 드는 시간이 상당하다
            2) TCP 기반 커넥션의 성능은 오직 커넥션이 예열된 상태일 때만 나아진다는 것이다.

    - 영속적인 커넥션
        - 위의 문제를 완화시키기 위해 HTTP/1.1보다도 앞서 영속적인 커넥션의 컨셉이 만들어졌다.
        - 연결을 열어놓고 여러 요청에 재사용함으로써, 새로운 TCP 핸드셰이크를 하는 비용을 아끼고 TCP의 성능 향상 기능을 활용할 수 있다.
        - 유휴 상태일때에도 서버 리소스를 소비하며 과부하 상태에서는 DoS attacks을 당할 수 있다.

    - 병렬 커넥션
        - 클라이언트가 여러 개의 커넥션을 맺음으로써 여러 개의 HTTP 트랜잭션을 병렬로 처리할 수 있게 한다.
        - 병렬 커넥션은 페이지를 더 빠르게 내려받는다. 하나의 커넥션으로 객체들을 로드할 때의 대역폭 제한과 대기시간을 줄일 수 있다면 더 빠르게 로드할 수 있다.
        - 하지만, 병렬 커넥션이 항상 더 빠르지는 않다.
            - 클라이언트의 네트워크 대역폭이 좁을 때는 대부분 시간을 데이터 전송하는 데만 쓸 것
            - 다수의 커넥션은 메모리를 많이 소모하고 자체적인 성능 문제를 발생
            - 병렬 커넥션이 실제로 페이지를 더 빠르게 내려받는 것은 아니지만 화면에 여러 개의 객체가 동시에 보이면서 내려받고 있는 상황을 볼 수 있기 때문에
              사용자는 더 빠르게 내려받고 있는 것 처럼 느낄 수 있다.

    - HTTP 파이프라이닝
        - 기본적으로 HTTP 요청은 순차적이다. 현재의 요청에 대한 응답을 받고 나서야 다음 요청을 실시한다. 네트워크 지연과 대역폭 제한에 걸려 다음 요청을 보내는 데까지 상당한 딜레이가 발생할 수 있다.
        - 파이프라이닝이란 같은 영속적인 커넥션을 통해서 응답을 기다리지 않고 요청을 연속적으로 보내는 기능이다.
        - 이것은 커넥션의 지연을 회피하고자 하는 방법


- HTTPS의 작동 방식에 대해 설명해주세요
    - HTTP는 평문 데이터를 전송하는 프로토콜이기 때문에, HTTP로 중요한 정보를 주고 받으면 제 3자에 의해 조회될 수 있습니다.
    - 이러한 문제를 해결하기 위해 HTTP에 암호화가 추가된 프로토콜이 HTTPS입니다.
    - HTTPS는 SSL의 껍질을 덮어쓴 HTTP라고 할 수 있습니다.
        ※ SSL(Secure Socket Layer) 인터넷을 통해 전달되는 정보를 보호하기 위해 개발한 통신 규약
    - HTTP는 원래 TCP와 직접 통신했지만, HTTPS에서 HTTP는 SSL과 통신하고 SSL이 TCP와 통신함으로써 암호화와 증명서, 안전성 보호를 이용할 수 있게 됩니다.

    - HTTP의 보안처리가 된 버전이 HTTPS
    - TCP 위에 SSL/TLS 층을 추가하여 암호화, 인증 그리고 무결성 보장을 통해 더 안전하게 만들어주는 프로토콜
    - HTTP 프로토콜만으로 통신을 수행하면, 다음과 같이 평문 데이터가 모두 노출이 된다. 즉, 암호화되지 않은 데이터를 전송하기 때문에
      서버와 클라이언트가 주고 받는 메시지를 외부에서 볼 수 있기 때문에 보안에 취약하다. 이러한 취약점을 보완하고자 만들어진 것이 바로 HTTPS

    - SSL HandShaking
        (1) 클라이언트가 먼저 서버에 접속해서 말을 건넨다. Client Hello
            - 브라우저가 사용하는 SSL 혹은 TLS 버전 정보
            - 브라우저가 지원하는 암호화 방식 모음(cipher suite)
            - 브라우저가 순간적으로 생성한 임의의 난수(숫자) ...

        (2) 서버 또한 위의 인사에 응답하면서, 다음 정보를 클라이언트에 제공한다. Sever Hello
            - 브라우저의 암호화 방식 정보 중에서, 서버가 지원하고 선택한 암호화 방식(cipher suite)
            - 서버의 공개키가 담긴 SSL 인증서. 인증서는 CA(Certificate Authority)의 비밀키로 암호화되어 발급된 상태이다.
            - 서버가 순간적으로 생성한 임의의 난수(숫자)

        (3) 브라우저는 서버의 SSL 인증서가 믿을만한지 확인한다.
            - 클라이언트는 서버의 인증서가 CA에 의해서 발급된 것인지를 확인하기 위해서 클라이언트에 내장된 CA 리스트를 확인
                - 클라이언트에 내장된 CA의 공개키를 이용해서 인증서를 복호화
                - 복호화에 성공했다면 인증서는 CA의 개인키로 암호화된 문서임이 암시적으로 보증된 것

        (4) 브라우저는 자신이 생성한 난수와 서버에서 보내준 난수를 사용하여 premaster secret을 만든다.
            - 클라이언트는 자신이 만든 무작위 데이터(random data)와 서버쪽에서 전송된 무작위 데이터(random data)를 조합하여 premaster secret 키를 생성
            - 이 키를 서버로 전송할 때 인증서에서 받았던 키를 이용하여 공개키 방식 암호화

        (5) 서버는 사이트의 개인키로, 브라우저가 보낸 premaster secret 값을 복호화 한다.

        (6) 서버/클라이언트는 SSL handshake를 종료하고 HTTPS 통신을 시작한다.


- TCP가 무엇인가요?
    - 인터넷 상에서 데이터를 주고 받기 위해 사용하는 전송계층의 프로토콜입니다. 기존 IP방식에 연결지향적인 특징이 더해졌습니다.


- IP를 언급하셨는데 TCP와 IP의 차이가 무엇인가요?
    - IP는 출발지 IP와 목적지 IP 정보만 있습니다. 하지만 출발지 IP와 목적지 IP만 있다면 중간에 패킷이 유실되어도 패킷을 받는 입장에서는 유실되었는지 알 길이 없습니다.
      이를 보완하기 위한 정보들이 TCP헤더에 포함되어 있습니다. 전송제어, 순서정보, 검증정보 등이 포함되어 있어서 데이터를 받는 입장에서는
      어떤 데이터가 유실되었고 순서가 맞지 않는 지 알 수 있습니다.
    - 또한 TCP는 출발지 PORT와 목적지 PORT가 있는데 이는 같은 IP 내에서 다른 프로세스들을 구분해줍니다.
    - 결론은 IP는 출발지IP와 목적지IP만 가진 프로토콜이며 TCP는 그외 PORT정보와 여러 제어정보를 포함하고 있다는 차이가 있습니다.


- 3 way handshake을 시작으로 연결종료까지 설명해주세요 ??
    - 3 way handshake는 TCP/IP 프로토콜로 통신하기 전에 클라이언트와 서버의 일종의 세션을 수립하는 과정입니다.
        1) 클라이언트가 서버에게 SYN 을 보냅니다.
        2) 서버는 클라이언트에게 ACK + SYN 을 보냅니다.
        3) 클라이언트는 서버에게 ACK를 보냅니다.

        이러한 3-way handshake를 통해서 클라이언트와 서버는 난수로 구성된 일련번호를 주고 받습니다.
        일련번호를 통해 데이터의 순서와 정확성을 보증합니다.

        4) 서버와 클라이언트는 데이터를 주고 받습니다.

        연결을 종료하기 위해서는 4-way handshake를 통해 종료합니다.

        5) 클라이언트에서 서버로 FIN을 보냅니다.
        6) 서버는 클라이언트로 ACK를 보내고 서버 내 process에게 EOF를 보낸다음 종료될때까지 대기합니다.
        7) 서버의 process가 종료되면 클라이언트에게 FIN을 보냅니다.
        8) 클라이언트가 ACK를 서버에게 보냄으로써 연결이 종료됩니다.

        * SYN : 다른 컴퓨터로 전송 된 TCP 패킷으로 연결이 이루어 지도록 요청합니다.
          ACK : 승인, 다른 컴퓨터 나 네트워크 장치가 다른 컴퓨터에 SYN / ACK 또는 다른 요청을 보낸 것을 확인한 응답


- 3-way-HandShake
    두 호스트 간에 연결을 맺고 최종적인 통신 목적지까지 데이터를 전달하는 기능을 한다 먼저 정확한 전송을 보장하기 위해 상대방 컴퓨터와 사전에
    세션을 수립하는 과정을 의미 이때 통신을 시작할 때 거치는 과정을 3 Way Handshake, 통신을 마칠 때 거치는 과정을 4 Way Handshake라고 한다

    TCP는 전송계층에 속해있다.
    전송 계층에는 크게 TCP(Transmission Control Protocol) 와 UDP(User Datagram Protocol) 2가지 프로토콜이 있다

    SYN은 'synchronize sequence numbers', 그리고 ACK는'acknowledgment' 의 약자이다.

    3 Way Handshake
        [STEP 1]
        A클라이언트는 B서버에 접속을 요청하는 SYN 패킷을 보낸다.
        이때 A클라이언트는 SYN 을 보내고 SYN/ACK 응답을 기다리는 SYN_SENT 상태, B서버는 Wait for Client 상태이다.

        [STEP 2]
        B서버는 SYN요청을 받고 A클라이언트에게 요청을 수락한다는 ACK 와 SYN flag 가 설정된 패킷을 발송하고
        A가 다시 ACK으로 응답하기를 기다린다. 이때 B서버는 SYN_RECEIVED 상태가 된다.

        [STEP 3]
        A클라이언트는 B서버에게 ACK을 보내고 이후로부터는 연결이 이루어지고 데이터가 오가게 되는것이다.
        이때의 B서버 상태가 ESTABLISHED 이다.
        위와 같은 방식으로 통신하는것이 신뢰성 있는 연결을 맺어 준다는 TCP의 3 Way handshake 방식이다.

    4 Way Handshake
        [STEP 1]
        클라이언트가 연결을 종료하겠다는 FIN플래그를 전송한다. 이때 A클라이언트는 FIN-WAIT 상태가 된다.

        [STEP 2]
        B서버는 FIN플래그를 받고, 일단 확인메시지 ACK 보내고 자신의 통신이 끝날때까지 기다리는데 이 상태가
        B서버의 CLOSE_WAIT상태다.

        [STEP 3]
        연결을 종료할 준비가 되면, 연결해지를 위한 준비가 되었음을 알리기 위해 클라이언트에게 FIN플래그를 전송한다. 이때 B서버의 상태는 LAST-ACK이다.

        [STEP 4]
        클라이언트는 해지준비가 되었다는 ACK를 확인했다는 메시지를 보낸다.
        A클라이언트의 상태가 FIN-WAIT ->TIME-WAIT 으로 변경된다.


- TCP와 UDP의 차이를 설명해주세요.
    - TCP는 연결형 서비스로 3-way handshaking 과정을 통해 연결을 설정하기 때문에 높은 신뢰성을 보장하지만, 속도가 비교적 느리다는 단점이 있습니다.
    - UDP는 비연결형 서비스로 3-way handshaking을 사용하지 않기 때문에 신뢰성이 떨어지는 단점이 있지만, 데이터 수신 여부를 확인하지 않기 때문에 속도가 빠르다는 장점이 있습니다.

    - TCP는 신뢰성이 중요한 파일 교환과 같은 경우에 쓰이고 UDP는 실시간성이 중요한 스트리밍에 자주 사용됩니다.

    - TCP는 3 way-handshaking 과정을 통해 연결을 설정하고, 4 way-handshaking 과정을 통해 연결을 해제합니다.
        - 4 way-handshaking
            1. 먼저 Open 한 클라이언트가 SYN(내 말 들려?)를 보내고 SYN_SENT 상태로 대기한다.
            2. 서버는 SYN-RECEIVED 상태로 바꾸고 SYN과 응답 ACK(어 잘 들려! 내 말은 들려?)를 보낸다.
            3. SYN과 응답 ACK를 받은 클라이언트는 ESTABLISHED 상태로 변경하고 서버에게 응답 ACK(잘 들려!)를 보낸다.
            4. 응답 ACK를 받은 서버는 ESTABLISHED 상태로 변경한다.


- TCP 에서 제공하는 흐름제어와 오류제어에 대해서 설명해주세요
    - 흐름제어는 데이터를 보내는 속도와 받는 속도를 조절하는 것을 말합니다. 오류제어는 훼손된 세그먼트를 감지 및 재전송하고 순서에 맞지 않게 들어온 패킷에 대해서 제어합니다.


- TCP 상태에서 timeout wait / close wat 상태에 대해서 말해보아라(tcp 종료 4way handshake)
    CLOSE_WAIT : Close 명령을 실행할 때까지 대기하는 상태
    TIME_WAIT : 연결은 종료되었지만 분실되었을지 모를 세그먼트를 위해 당분간 소켓을 열어둠


- 브라우저에 naver.com 이라는 url를 치고 엔터를 누르면 내부적으로 어떻게 동작하는지 설명해주세요.
    1. 사용자가 웹 브라우저의 검색창에 특정 사이트의 주소를 입력한다.
        - 웹 브라우저가 DNS에게 특정 사이트의 (도메인)주소를 요청한다.
    2. DNS가 웹 브라우저에게 사이트의 IP 주소를 응답한다.
    3. 웹 브라우저가 웹 서버에게 IP 주소를 이용하여 html 문서를 요청한다.
    4. 웹 서버는 바로 웹 페이지를 공급하지 못하고, 웹 애플리케이션 서버와 데이터 베이스에서 웹 페이지 작업을 처리한다.
    5. 작업 처리 결과를 웹 서버로 보낸다.
    6. 웹 서버는 웹 브라우저에게 html 문서 결과를 응답한다. 그리고 웹 브라우저는 화면에 웹 페이지를 출력한다.


- www.google.com  에 접속하는 과정을 설명해주세요.
    1. 사용자가 브라우저에서 URL을 입력합니다.
    2. 응용계층에서 Request Message를 생성합니다.
    3. 응용계층에서 DNS 서버에 URL에 해당하는 IP주소를 검색합니다.
    4. HTTP요청 메세지를 완성하고 TCP 전송계층에 전달합니다.
    5. TCP 전송계층에서 TCP 헤더를 추가하고 IP계층에 IP헤더를 추가한 뒤 2계층과 1계층을 거쳐 서버로 패킷을 보냅니다.
    6. 서버의 전송계층에서 패킷을 UNPACK한 후 메세지를 복원합니다.
    7. 서버의 HTTP URL을 통해 응용계층에서 처리한 후 Response 메세지를 생성합니다.
    8. Request Message의 정보를 이용해 TCP 헤더와 IP헤더를 추가합니다.
    9. 2계층과 1계층을 거쳐 다시 클라이언트로 패킷을 보냅니다.
    10. 클라이언트는 Response Message가 브라우저로 전달되면  HTML 랜더링을 통해 모니터에 보여집니다.


- Connection Timeout과 Read Timeout의 차이에 대해 설명해주세요.
    - 서버 자체에 클라이언트가 어떤 사유로 접근을 실패했을 시 적용되는 것이 Connection Timeout입니다.
      즉, 접근을 시도하는 시간 제한이 Connection Timeout 되는 것을 말합니다.

    - 클라이언트가 서버에 접속을 성공 했으나 서버가 로직을 수행하는 시간이 너무 길어 제대로 응답을 못 준 상태에서 클라이언트가 연결을 해제하는 것이 Read Timeout입니다.
    - 이 경우는 클라이언트는 해당 상황을 오류로 인지하고, 서버는 계속 로직을 수행하고 있어 성공으로 인지해
      양 사이드간 싱크가 맞지 않아 문제가 발생할 확률이 높습니다.


- connection timeout , socket timeout , read timeout
    - connection timeout
        ConnectionTimeout 이란 3-way HandShake가 정상적으로 수행되어 서버에 연결되기까지 소요된시간이다

    - socket timeout
        SocketTimeout 이란 데이터를 여러 개의 패킷으로 나누어 보낼때 각 패킷간의 시간 Gap을 이야기한다

    - read timeout
        Connection 맺은 후 Response(응답)을 받기까지 소요될 시간의 임계치이다


- Request 구조는 어떻게 되어있나요?
    - Start line , Headers , Body 로 크게 3가지로 구성되어 있습니다.
    - Start line 에는 Methods , Path , Protocol 을 명시합니다.
    - Headers 에는 여러 정보가 있지만 대표적으로 Host와 Accept-Language가 있습니다.

    ex)
    GET /search HTTP/1.1   (methods , path , protocol)
    Host : www.google.com
    Accept-Language : ko, ko-KR


- Response 구조는 어떻게 되어있나요?
    - Status line , Headers , Body로 구성되어 있습니다.
    - Status line 에는 HttpVersion , status Code, status message 가 있습니다.

    ex)
    HTTP/1.1 200 OK
    Date : Mon, 07 Feb 2022 11:22:01 GMT
    Server : Apache


- 쿠키와 세션을 사용하는 이유가 무엇인가요?
    - HTTP의 비연결성, 비상태성이라는 특징때문에 클라이언트가 누구인지 어떤 권한을 가졌는지 등 기록하지 않기 때문에 필요합니다.


- 쿠키란 무엇인가요?
    - 쿠키란 일종의 클라이언트가 누구인지 , 어떤 상태인지등이 포함된 정보를 보관하는 것을 말합니다.
    - 쿠키를 통해 로그인을 하고 이후 데이터에 접근하는 방법은 아래와 같습니다.
        1) 클라이언트가 로그인을 시도합니다.
        2) 서버에서는 클라이언트 정보의 유효성을 판단하고 Response에 set-cookie라는 키에 쿠키값을 넣어서 클라이언트에게 보냅니다.
        3) 클라이언트는 Response 의 set-cookie 라는 키값에 해당되는 값을 브라우저의 cookie storage(쿠키저장소)에 저장합니다.
        4) 이후 클라이언트는 요청하는 메세지의 header에 cookie값을 넣어서 보내면 서버 입장에서는 어떤 클라이언트에서 온 요청인지 알 수 있게 됩니다.


- 쿠키의 단점은 무엇이 있을까요?
    - 쿠키에 클라이언트의 정보들이 존재하기 때문에 쿠키를 탈취당하면 클라이언트의 정보가 유출 될수 있다는 단점이 있습니다.
    - 클라이언트 정보를 쿠키에 보관하는 것이 아닌 세션ID를 보관하여 보완성을 높인 세션을 사용할 수 있습니다.


- 쿠키는 언제 사용하나요?
    - 쿠키는 쇼핑몰 장바구니기능이나 자동으로 아이디 패스워드를 입력해주는 기능등 브라우저 사용자의 정보를 입력해줄 때도 사용합니다.


- 그렇다면 세션은 무엇인가요?
    - 세션은 기본적으로 쿠키를 이용해서 구현합니다. 클라이언트를 구분하기 위해 각 클라이언트에게 세션 ID를 부여하고 클라이언트는 쿠키에 세션ID를 저장합니다.
    - 세션을 이용하여 로그인을 하고 이후 데이터에 접근하는 방법은 아래와 같습니다.
        1) 클라이언트가 로그인을 시도합니다.
        2) 서버에서는 클라이언트의 유효성을 판단하고 Response에 set-cookie 라는 키에 세션ID를 저장하고 서버는 세션ID에 해당하는 유저 정보를 메모리에 따로 저장합니다. (DB에 저장할 수도 있음) 그리고 클라이언트에게 전송합니다.
        3) 클라이언트는 Response의 set-cookie 라는 키값에 해당되는 값을 브라우저의 cookie storage에 저장합니다.
        4) 이후 클라이언트는 세션ID를 헤더에 포함 시켜서 요청을 보내고 서버는 세션ID를 가지고 어떤 유저인지 검색한 후 이후 로직을 처리합니다.


- 세션의 단점은 무엇이 있을 까요?
    - 세션은 쿠키보다 보안성은 좋지만 서버에 클라이언트의 접속 정보들을 계속 저장해야하기 때문에 트래픽이 많아진다면 서버 메모리에 과부하가 올 수도 있습니다.
    - session hijacking을 통해 세션 ID가 노출될 경우에 클라이언트가 해커인지 알 방법이 없습니다. 따라서 세션ID의 주기를 짧게 가져가거나 HTTPS를 통해 보안을 강화합니다.
    - session ID를 충분히 큰값으로 설정하는 것도 효과가 있습니다. 왜냐하면 해커입장에서 session ID가 간단하다면 임의의 session ID를 계속 탐색하여 우연히 session ID를 발견할 수도 있기 때문입니다.


- 쿠키 vs 세션 vs 캐시
    - 쿠키와 세션을 사용하는 이유가 뭘까?
      그것은 바로 HTTP 프로토콜의 특징이자 약점을 보완하기 위해서 일 것이다.

    - HTTP 프로토콜의 특징
        1. Connectionless 프로토콜 (비연결 지향)
            - 클라이언트가 서버에 요청(Reqeust)을 했을 때, 그 요청에 맞는 응답(Response)을 보낸 후 연결을 끊는 처리방식이다.
            - 비연결지향이라는 특성 덕분에 계속해서 통신 연결을 유지하지 않기 때문에 리소스 낭비가 줄어드는 것은 장점이지만 통신할 때마다
              새로운 커넥션을 열기 때문에 클라이언트는 내가 누구인지 인증을 계속해야 하는 단점이 생긴다.
        2. Stateless 프로토콜
            - 커넥션을 끊는 순간 클라이언트와 서버의 통신이 끝나며 상태 정보는 유지하지 않는 특성이 있다.
            - 클라이언트와 첫 번째 통신에서 데이터를 주고 받았다 해도, 두 번째 통신에서 이전 데이터를 유지하지 않는다.
                - 정보가 유지되지 않으면, 매번 페이지를 이동할 때마다 로그인을 다시 하거나, 상품을 선택했는데 구매 페이지에서 선택한
                  상품의 정보가 없거나 하는 등의 일이 발생할 수 있다.

        -> 따라서, Stateful한 경우를 대처하기 위해 쿠키와 세션을 사용한다!
           쿠키와 세션의 차이점은 크게 상태 정보의 저장 위치이다.
           쿠키는 '클라이언트(=로컬PC)에 저장하고 세션은 '서버'에 저장한다.

        -> 서버와 클라이언트가 통신을 할 때 통신이 연속적으로 이어지지 않고 한 번 통신이 되면 끊어진다.
           따라서 서버는 클라이언트가 누구인지 계속 인증을 해줘야 한다. 하지만 그것은 매우 귀찮고 번거로운 일이다.
           그런 번거로움을 해결하는 방법이 바로 쿠기와 세션이다.


    - 쿠키 Cookie
        - 정의
            - 어떠한 웹 사이트를 방문할 경우, 그 사이트가 사용하고 있는 서버에서 사용자의 컴퓨터에 저장하는 키와 값이 들어있는 작은 데이터 파일
            - HTTP에서 클라이언트의 상태 정보를 클라이언트의 PC에 저장하였다가 필요시 정보를 참조하거나 재사용할 수 있다.

        - 특징
            - 이름, 값, 만료일(저장기간), 경로 정보로 구성
            - 클라이언트에 총 300개의 쿠키를 저장
            - 하나의 도메인 당 20개의 쿠키를 가질 수 있다.
            - 하나의 쿠키는 4KB(=4096byte)까지 저장 가능
            - 쿠키는 사용자가 요청하지 않아도 브라우저가 Request 시에 Request Header에 넣어서 자동으로 전송

        - 동작 순서
            - 클라이언트가 페이지를 요청한다. (사용자가 웹사이트에 접근)
            - 웹 서버는 클라이언트가 보낸 Request-Header에 쿠키가 없음을 판별하고 통신 상태(UserId, Password, 조작상태, 방문횟수 등)을 저장한 쿠키를 response한다.
              생성된 쿠키를 헤더에 포함시켜 응답한다.
            - 넘겨받은 쿠키는 클라이언트가(웹 브라우저) 가지고 있다가(로컬 PC에 저장)다시 서버에 요청할 때 요청과 함께 HTTP 헤더에 쿠키를 넣어서 전송한다.
            - 서버에서는 쿠키 정보를 읽어 이전 상태 정보를 확인할 후 응답한다.

    - 세션 Session
        - 정의
            - 일정 시간 동안 같은 사용자(브라우저)로부터 들어오는 일련의 요구를 하나의 상태로 보고, 그 상태를 유지시키는 기술
            - 방문자가 웹 서버에 접속해 있는 상태를 하나의 단위로 보고 그것을 세션이라고 한다.

        - 특징
            - 웹 서버에 웹 컨테이너의 상태를 유지하기 위한 정보를 저장
            - 쿠키를 기반으로 두고 있지만, 쿠키와 달리 사용자 정보 저장을 서버 측에서 관리
            - 브라우저를 닫거나, 서버에서 세션을 삭제했을 때만 삭제가 되므로, 쿠키보다 비교적 보안이 좋다.
            - 각 클라이언트에 고유 Session ID를 부여한다. Session ID로 클라이언트를 구분해 각 요구에 맞는 서비스를 제공

        - 동작 순서
            - 클라이언트가 서버에 접속시, 세션 ID를 발급한다.
              서버가 응답할 때 HTTP 헤더(Set-Cookie)에 Session ID를 포함해서 전송
              쿠키에 Session ID를 JSESSIONID라는 이름으로 저장 (Set-Cookie: JSESSIONID=xslei13f)
            - 클라이언트는(웹 브라우저) 다시 페이지에 접속할때, 다음 요청 때 부여된 Session ID가 담겨 있는 쿠키를 HTTP 헤더에 넣어서 전송(Cookie: JSEESIONID=xslei13f)
            - 서버는 Request Header에 쿠키정보(세션ID)로 클라이언트를 판별

        - SESSION ID 보안의 취약점
            - 세션 해킹: 홈페이지 관리자의 세션 아이디를 탈취 => 쿠키값을 관리자의 세션 아이디로 변경한다. => 관리자 권한으로 이용
            - 예방법: 세션에 로그인 했을 때의 IP를 저장 => 페이지 이동 시마다, 현재 IP와 세션의 IP/브라우저 정보(UserAgent)가 같은지 검사

    - 쿠키와 세션의 차이
        - 쿠키와 세션은 비슷한 역할을 하며, 동작 원리도 비슷하다. 그 이유는 세션도 결국 쿠키를 사용하기 때문이다.
        - 큰 차이점은 사용자의 정보가 저장되는 위치이다. 쿠키는 서버의 자원을 전혀 사용하지 않으며, 세션은 서버의 자원을 사용한다.
        - 쿠키는 클라이언트 로컬에 저장되기 때문에 변질되거나 request에서 스니핑 당할 우려가 있어서 보안에 취약하지만 세션은 쿠키를 이용해서
          session-id만 저장하고 그것으로 구분하여 서버에서 처리하기 때문에 비교적 보안성이 높다
        - 라이프 사이클은 쿠키도 만료기간이 있지만 파일로 저장되기 때문에 브라우저를 종료해도 정보가 유지될 수 있다.
          또한 만료기간을 따로 지정해 쿠키를 삭제할 때까지 유지할 수도 있다.
        - 반면에 세션도 만료기간을 정할 수 있지만, 브라우저가 종료되면 만료기간에 상관없이 삭제된다.
        - 속도 면에서 쿠키가 더 우수하며 쿠키는 쿠키에 정보가 있기 때문에 서버에 요청 시 속도가 빠르고 세션은 정보가 서버에 있기 때문에 처리가 요구되어 비교적 느린 속도를 낸다

    - 세션을 사용하면 좋은데 왜 쿠키를 사용할까?
        - 세션이 쿠키에 비해 보안이 높은 편이나 쿠키를 사용하는 이유는 세션은 서버에 저장되고, 서버의 자원을 사용하기에 서버 자원에 한계가 있다.
        - 이로 인해 속도가 느려질 수 있고 자원관리 차원에서 쿠키와 세션을 적절한 요소 및 기능에 병행 사용하여 서버 자원의 낭비를 방지하며 웹 사이트의 속도를 높일 수 있다.

    - 캐시 Cache
        - 정의
            - 캐시는 웹 페이지 요소를 저장하기 위한 임시 저장소이다. 쿠키/세션은 정보를 저장하기 위해 사용된다.
            - 캐시는 웹 페이지를 빠르게 렌더링할 수 있도록 도와주고 쿠키/세션은 사용자의 인증을 도와준다.

        - 특징
            - 저장 공간이 작고 비용이 비싼 대신 빠른 성능을 제공
            - 같은 웹 페이지에 접속할 때 사용자의 PC에서 로드하므로 서버를 거치지 않아도 된다.
            - 이전에 사용된 데이터가 다시 사용될 가능성이 많으면 캐시 서버에 있는 데이터를 사용한다.
              그래서 다시 사용될 확률이 있는 데이터들이 빠르게 접근할 수 있어진다. (페이지 로딩 속도 ↑)
            - 캐시 히트(hit): 캐시를 사용할 수 있는 경우 (ex: 이전에 왔던 요청이랑 같은 게 왔을 때)
              캐시 미스(miss): 캐시를 사용할 수 없는 경우 (ex: 웹서버로 처음 요청했을 때)


- REST API와 HTTP METHOD
    - REST API는 웹에서 데이터를 전송 및 처리하는 방법을 정의한 인터페이스
    - HTTP METHOD를 통해 해당 자원에 대한 CRUD Operation을 적용하여 아래와 같이 사용

    - REST 구성
        - 자원(RESOURCE) - URI
            - 자원을 구별하는 ID는 /orders/order_id/1와 같은 HTTP URI이다.
        - 행위(Verb) - HTTP METHOD
            - HTTP 프로토콜의 Method를 사용
        - 표현(Representations)
            - Client가 자원의 상태(정보)에 대한 조작을 요청하면 Server는 이에 적절한 응답
            - 현재는 JSON으로 주고 받는 것이 대부분

    - REST의 특징 ??
        1) Uniform (유니폼 인터페이스)
            - URI로 지정한 리소스에 대한 조작을 통일되고 한정적인 인터페이스로 수행하는 아키텍처 스타일
        2) Stateless (무상태성)
            - 세션 정보나 쿠키정보를 별도로 저장하고 관리하지 않기 때문에 API 서버는 들어오는 요청만을 단순히 처리
        3) Cacheable (캐시 가능)
            - HTTP가 가진 캐싱 기능이 적용 가능
            - Last-Modified 태그나 E-Tag를 이용하면 캐싱 구현이 가능
        4) Self-Descriptiveness (자체 표현 구조)
            - REST API 메시지만 보고도 이를 쉽게 이해 할 수 있는 자체 표현 구조
        5) Client-Server 구조
            - REST 서버는 API 제공, 클라이언트는 사용자 인증이나 컨텍스트(세션, 로그인 정보)등을 직접 관리하는 구조로 각각의 역할이 확실히 구분
              클라이언트와 서버에서 개발해야 할 내용이 명확해지고 서로간 의존성이 줄어들게 된다.
        6) 계층형 구조
            - 다중 계층으로 구성될 수 있으며 보안, 로드 밸런싱, 암호화 계층을 추가해 구조상의 유연성을 둘 수 있다.
            - PROXY, 게이트웨이 같은 네트워크 기반의 중간매체를 사용할 수 있게 한다.

    - REST의 장점 ??
        - HTTP 프로토콜의 인프라를 그대로 사용하므로 REST API 사용을 위한 별도의 인프라를 구축할 필요가 없다.
        - HTTP 표준 프로토콜에 따르는 모든 플랫폼에서 사용이 가능
        - REST API 메시지가 의도하는 바를 명확하게 나타내므로 의도하는 바를 쉽게 파악할 수 있다.
        - 서버와 클라이언트의 역할을 명확하게 분리

    - REST의 단점 ??
        - HTTP Method 형태가 제한적
            REST는 HTTP 메소드를 이용하여 URI를 표현합니다. 이러한 표현은 쉬운 사용이 가능하다는 장점이 있지만 반대로 메소드 형태가 제한적인 단점이 있습니다.
        - 구형 브라우저가 아직 제대로 지원해주지 못하는 부분이 존재합니다.
            (PUT, DELETE를 사용하지 못하는 점)
        - 표준이 자체가 존재하지 않아 정의가 필요합니다.
        - 브라우저를 통해 테스트할 일이 많은 서비스라면 쉽게 고칠 수 있는 URL보다 Header 정보의 값을 처리해야 하므로 전문성이 요구

    - 왜 RESTful APIs를 만드는 것일까 ??
        - Client Side를 정형화된 플랫폼이 아닌 모바일, PC, 애플리케이션 등 플랫폼에 제약을 두지 않는 것을 목표로 했기 때문
        - 2010년 이전만 해도 Server Side에서 데이터를 전달해주는 Client 프로그램의 대상은 PC 브라우저로 그 대상이 명확
        - 하지만 스마트 기기들이 등장하면서 TV, 스마트 폰, 테블릿 등 Client 프로그램이 다양화되고 그에 맞춰 Server를 일일이 만든다는 것은 꽤 비효율적인 일이 되어 버렸다.
        - 이런 과정에서 개발자들은 Client Side를 전혀 고려하지 않고 메시지 기반, XML, JSON과 같은 Client에서 바로 객체로 치환 가능한 형태의
          데이터 통신을 지향하게 되면서 Server와 Client의 역할을 분리하게 되었다.

    - HTTP Methods
        - GET
            - 데이터를 읽을 때
            - GET 요청은 idempotent 하다.
            - 데이터를 조회하는 것이기 때문에 요청시에 Body 값과 Content-Type가 비워져있다.
            - 조회할 데이터에 대한 정보는 URL을 통해서 파라미터를 받는다.
            - 데이터 조회에 성공한다면 Body 값에 데이터 값을 저장하여 성공 응답을 보낸다.
            - GET은 캐싱이 가능하여 같은 데이터를 한번 더 조회할 경우에 저장한 값을 사용하여 조회 속도가 빨라진다.
              (이미지 같은 정적 컨텐츠는 데이터 양이 크고, 변경된 일이 적기 때문에 동일한 요청이 발생했을 경우 서버로 요청을 보내지 않고 캐시된 데이터를 사용)

        - POST
            - 새로운 리소스를 생성
            - BODY에다가 데이터를 넣어서 보낸다.
            - POST 요청은 idempotent 하지 않다.
            - 데이터를 생성하는 것이기 때문에 요청시에 Body 값과 Content-Type 값을 작성해야 한다.

        - PUT
            - 리소스를 생성 / 업데이트
            - POST와 PUT의 차이는 멱등성 idempotent에 있다.
            - PUT 요청은 idempotent 하다.

        - DELETE
            - 데이터를 삭제
            - 요청시에 Body 값과 Content-Type 값이 비워져있다.
            - URL을 통해서 어떠한 데이터를 삭제할지 파라미터를 받는다.
            - 데이터 삭제에 성공한다면 Body 값 없이 성공 응답만 보내게 된다.

        - POST vs PUT
            - POST는 요청 시 마다, 새로운 리소스가 생성된다.
            - PUT은 요청 시 마다. 같은 리소스를 반환한다. 물론, 리소스 안에 속성은 변경될 수 있다.


- Restful API에 대해 설명해주세요.
    - Rest 설계 규칙은 URI는 정보의 자원만 표현해야 하며, 자원의 상태와 행위는 HTTP Method에 명시하는걸 말합니다.


- 대부분 못 지키고 있는 REST 제약조건
    - Self-descriptive messages
        - 메시지가 스스로 설명되어야 한다는 것
        - 메시지의 모든 요소는 메시지만 보고 그 뜻을 알아야 한다는 것
        - link header에 명세를 확인할 수 있는 링크를 넣어 응답에 넘길 수도 있을 것

    - Hateoas
        - Hypermedia As The Engine Of Application State
        - 애플리케이션 상태는 Hyperlink를 이용해서 전이가 되어야한다
        - REST Api를 사용하는 클라이언트가 전적으로 서버와 동적인 상호작용이 가능하도록 하는 것을 의미
          이러한 방법은 클라이언트가 서버로부터 어떠한 요청을 할 때, 요청에 필요한 URI를 응답에 포함시켜 반환하는 것으로 가능하게 할 수 있습니다.
          Client 사이드에서는 "rel"의 이름으로 요청 URI를 사용하기 때문에 URI 수정이 발생하더라도 Client 사이드는 수정이 이루어지지 않는다.


- POST 방식이 GET 방식보다 보안 측면에서 더 좋다?
    - GET과 비교하여 URL에 데이터의 정보가 들어 있지 않으므로 조금 더 안전하다고 볼 수 있다.


- GET , POST 는 어떤 차이가 있나요?
    - GET은 주로 클라이언트가 서버에게 데이터를 조회하는 경우 사용합니다. URL 뒤에 쿼리 스트링을 추가하여 정보를 조회합니다.
      반면 POST는 클라이언트가 서버에게 주로 데이터를 생성하는 경우 사용합니다. 전달할 데이터를 BODY에 포함해서 요청합니다.

    - GET은 URL을 이용하여 캐싱한후 같은 요청에 대해 좀더 빠른 응답을 할 수 있습니다.
      반면 POST는 BODY의 내용을 캐싱해야하는데 이는 어렵기 때문에 캐싱을 하지 않습니다.


- GET과 POST의 비교 및 차이
    - GET
        어떠한 정보를 가져와서 조회하기 위해서 사용되는 방식

        - URL에 변수(데이터)를 포함시켜 요청한다.
        - 데이터를 Header(헤더)에 포함하여 전송한다.
        - URL에 데이터가 노출되어 보안에 취약하다.
        - 캐싱할 수 있다.

        GET 방식은 간단한 데이터를 URL에 넣도록 설계된 방식으로 데이터를 보내는 양에 한계가 있습니다.
        HTTP 자체는 GET 방식의 URL 길이에 제약을 두고 있지는 않지만, 브라우저에서 최대 길이를 제한하고 있으며 URL형식에 맞지 않는 파라미터 이름이나 값은 인코딩되어 전달해야 합니다.
        (만약 여기서 보내는 길이가 너무 길은 경우 초과데이터는 절단됩니다.)
        특별히 전송하는 데이터가 없으므로 GET방식에서 바디는 보통 빈 상태로 전송이 되며, 헤더의 내용 중 Body의 데이터를 설명하는 Content-type 헤더필드도 들어가지 않습니다.

    - POST
        데이터를 서버로 제출하여 추가 또는 수정하기 위해서 사용하는 방식

        - URL에 변수(데이터)를 노출하지 않고 요청한다.
        - 데이터를 Body(바디)에 포함시킨다.
        - URL에 데이터가 노출되지 않아서 기본 보안은 되어있다.
        - 캐싱할 수 없다.

        GET방식은 URL에 데이터를 붙여서 전송하는 반면에 POST방식은 BODY에 데이터를 넣어서 전송합니다.
        따라서 헤더필드 중 Body의 데이터를 설명하는 Content-Type이라는 헤더 필드가 들어가고 어떠한 데이터 타입인지를 명시해주어야 합니다.
        데이터를 Body에 포함시키는 이점 때문에 메세지 길이의 제한은 없지만 최대 요청을 받는 시간인 Time Out이 존재하므로 클라이언트에서 페이지를 요청하고 기다리는 시간이 존재합니다.
        실제로 상황에서 POST 방식은 URL에 데이터가 노출되지 않으므로 즐겨찾기나 캐싱이 불가능하지만 쿼리스트링(문자열)데이터 뿐만 아니라, 라디오 버튼, 텍스트 박스와 같은 객체들의 값도 전송이 가능합니다.


- PUT과 POST의 차이가 무엇인가요?
    - PUT은 모든 리소스를 대체하기 위해 사용합니다. POST는 리소스 생성을 목적으로 하는 경우가 많기 때문에 멱등하지 않습니다.
      멱등하다란 매번 똑같은 요청을 해도 늘 같은 결과를 반환하는 것을 말합니다.


- PUT 과 PATCH의 차이는 무엇인가요?
    - PUT 은 모든 리소스를 대체하지만 PATCH는 일부 리소스만 대체해버립니다.


- HTTP 메소드의 멱등성
    - HTTP 메소드의 멱등성이 필요한 이유
        HTTP 멱등성이 필요한 이유는 요청의 재시도 때문이다.
        만약 HTTP 요청이 멱등하다면, 요청이 실패한 경우에 주저없이 재시도 요청을 하면 된다. 하지만 만약 HTTP 요청이 멱등하지 않다면, 리소스가 이미 처리되었는데 중복 요청을 보낼 수 있다.

    - PATCH 메소드가 멱등하지 않은 이유
        예를 들어 name에 해당하는 값을 변경하고자 할 때 PATCH를 사용할 수 있다. 예를 들어 우리는 아래와 같이 요청을 N번 날려도 항상 동일한 결과를 응답받게 된다.
        그래서 PATCH를 멱등하다고 착각할 수 있는데, 문제는 PATCH가 보다 범용적으로 사용된다는 것이다. 예를 들어 “name” 필드를 보내면 값을 추가(append)하는 요청 역시 PATCH가 사용된다.
        그러면 PATCH 요청에 의한 결과는 매번 달라지게 될 것이다. 그러므로 PATCH 메소드는 항상 멱등하다고 볼 수 없다.

    - DELETE 메소드가 멱등한 이유
        예를 들어 자원이 있는 상태에서 우리가 다음과 같이 사용자 삭제 요청을 보냈다고 하자. 처음에는 성공 응답(200)을 받았지만, 동일한 요청을 보냈더니 에러 응답(404)을 받은 것이다.
        DELETE를 사용하면 클라이언트가 받는 응답 상태 코드가 달라질 수 있음에도 불구하고 DELETE 메소드는 멱등하다. 왜냐하면 멱등성의 기준이 “상태 코드”가 아니기 때문이다.
        멱등성은 “서버에 미치는 의도된 영향이 동일한가?” 이다.
        DELETE의 목적은 리소스를 삭제하여 서버에 리소스가 없도록 만드는 것이고, DELETE를 여러 번 호출해도 응답 상태와 무관하게 리소스가 없는 상태를 유지하도록 한다.
        그러므로 HTTP DELETE 메소드는 멱등한 것이다.
        결국 멱등성은 리소스 관점에서 생각하는 것이 중요하다. 여러 번 요청해도 리소스가 동일하다면 멱등한 것으로 봐도 된다.

- forward vs redirect
    - forward
        Web Container 차원에서 페이지의 이동만 존재
        실제로 웹 브라우저는 다른 페이지로 이동했음을 알 수 없습니다.
        그렇기 때문에 웹 브라우저에는 최초에 호출한 URL이 표시되고, 이동한 페이지의 URL 정보는 확인할 수 없습니다.
        또한 현재 실행중인 페이지와 forward에 의해 호출될 페이지는 Request 객체와 Response 객체를 공유합니다.

        Foward는 다음으로 이동 할 URL로 요청정보를 그대로 전달합니다.
        그렇기 때문에 사용자가 최초로 요청한 요청정보는 다음 URL에서도 유효합니다.

        예를 들어 게시판을 작성하는 과정이라고 할 때, 사용자가 보낸 요청 정보를 이용하여 글쓰기 기능을 수행한다고 할 때, forward를 사용하여
        응답 페이지를 부르면 다음과 같은 문제가 발생하게 됩니다. 만약 사용자가 실수 혹은 고의로 글쓰기 응답 페이지에서 새로고침을 누른다면,
        요청 정보가 그대로 살아있기 때문에 요청이 여러 번 전달되어 동일한 게시물이 여러 번 등록될 수 있습니다. 그렇기 때문에 게시판을 제작하는 과정에서는
        시스템에 변화가 생기지 않는 단순 조회 요청(글 목록 보기, 검색)의 경우 forward로 응답하는 것이 바람직합니다.

    - redirect
        Redirect는 Web Container로 명령이 들어오면, 웹 브라우저에게 다른 페이지로 이동하라고 명령을 내립니다.
        그러면 웹 브라우저는 URL을 지시된 주소로 바꾸고 해당 주소로 이동합니다.
        다른 웹 컨테이너에 있는 주소로 이동하며 새로운 페이지에서는 Request와 Response객체가 새롭게 생성됩니다.

        최초 요청을 받은 URL1에서 클라이언트에게 redirect할 URL2를 반환하고, 클라이언트에서는 새로운 요청을 생성하여 URL2에 다시 요청을 보냅니다.
        그러므로 처음 보냈던 최초의 Request와 Response 객체는 유효하지 않고 새롭게 생성되는 것

        예를 들어 게시판을 작성하는 과정이라고 할 때, 사용자가 보낸 요청 정보를 이용하여 글쓰기 기능을 수행한다고 할 때,
        redirect를 사용하여 응답 페이지를 부르면 사용자가 실수 혹은 고의로 글쓰기 응답 페이지에서 새로고침을 누른다고 하더라도,
        처음의 요청 정보는 존재하지 않으므로 게시물이 여러 번 등록되지 않습니다. 그렇기 때문에 시스템에 변화가 생기는 요청(회원가입, 글쓰기 등)의 경우에는 redirection을 사용하는 것이 바랍직합니다.

    - 어떤상황에 어떤 방식을 사용하여야 하는가
        시스템(세션,DB)에 변화가 생기는 요청(로그인,회원가입,글스기)의 경우에는 redirect
        시스템 에변가 생기지 않는 단산 조회요청의 경우 forward


- JWT 토큰에 대해 설명해주세요.
    - JWT는 JSON 포맷을 이용하는 Claim 기반의 웹 토큰이며, 토큰 자체를 정보로 사용하는 Self-Contained 방식으로 정보를 안전하게 전달
    - JWT는 헤더(Header).내용(Payload).서명(Signature)로 구성되며 각 파트를 점(.)으로 구분
        - 헤더(Header) : 토큰의 타입과 해시 암호화 알고리즘(방식지정)으로 이루어져 있다.
        - 내용(Payload) : 토큰에 사용자가 담고자 하는 정보를 담는다. 내용에는 Claim이 담겨있고, JSON(Key/Value)형태의 한 쌍으로 이루어져 있다.
        - 서명(Signature) : 토큰을 인코딩하거나 유효성 검증할 때 사용하는 고유한 암호화 코드이다. 헤더와 내용의 값을 인코딩한다.


- 세션 기반 인증과 토큰 기반 인증의 차이에 대해 얘기해주세요. ??
    - 세션 기반 인증은 클라이언트로부터 요청을 받으면 클라이언트의 상태 정보를 저장하므로 Stateful한 구조를 가지고,
      토큰 기반 인증은 상태 정보를 서버에 저장하지 않으므로 Stateless한 구조를 가집니다.


- 그렇다면 Stateful한 세션 기반의 인증 방식을 사용하게 된다면 어떠한 단점이 있을까요?
    1. 서버에 세션을 저장하기 때문에 사용자가 증가하면 서버에 과부하를 줄 수 있어 확장성이 낮습니다.
    2. 해커가 훔친 쿠키를 이용해 요청을 보내면 서버는 올바른 사용자가 보낸 요청인지 알 수 없습니다. (세션 하이재킹 공격)


- 그렇다면 세션 기반 인증과 토큰 기반 인증은 각각 어느 경우에 적합한가요?
    - 단일 도메인이라면 세션 기반 인증을 사용하고, 아니라면 토큰 기반 인증을 사용하는 것이 적합하다고 생각합니다.
    - 왜? - 세션을 관리할 때 사용되는 쿠키는 단일 도메인 및 서브 도메인에서만 작동하도록 설계되어 있기 때문에 여러 도메인에서 관리하는 것은 어렵습니다. (CORS 문제)


- 암호화
    - 단방향
        복호화가 불가능
        SHA256

    양방향
        복호화가 가능
        대칭키 방식
            특징 : 암복호화에 서로 동일한 키가 사용되는 암호화 방식. 그래서 키를 비공개한다.
            장점 : 속도가 빠르다.
            단점 : 키 배송 위험성 존재하여 송신 측에서 수신측에 암호 키를 전달하는 과정에서 노출우려가 있다.
            대표 : DES, AES

        비대칭키 방식
            특징 : 암복호화에 서로 다른 키가 사용되는 암호화 방식. 하나의 키는 공개키로 사용.
            장점 : 키 배송의 문제를 근본적으로 차단하여 안전성이 높다.
            단점 : 대칭키(비공개키)방식에 비해서 느리다.
            대표 : RSA


- 대칭키, 비대칭키 암호화 방식에 대해 설명해주세요.
    - 대칭키와 비대칭키는 양방향 암호화 방식

    - 대칭키는 암호화와 복호화에 같은 암호 키를 쓰는 알고리즘입니다.
      이는 중간에 누군가 암호 키를 가로채면 암호화된 정보가 유출될 수 있다는 단점이 있는데,
      이런 문제를 보완한 새로운 방식이 비대칭키(공개키)입니다.

    - 비대칭키는 암호화와 복호화할 때 키를 서로 다른 키로 사용하는 암호화 알고리즘입니다.
      타인에게 절대 노출되어서는 안되는 개인키(private key)와 공개적으로 개방되어 있는 공개키(public key)를 쌍으로 이룬 형태입니다.


- OSI 7 layer와 각 계층에 대해 아는대로 설명해주세요.
    7 계층(응용 계층) : 사용자에게 통신을 위한 서비스 제공. 인터페이스 역할
    6 계층(표현 계층) : 데이터의 형식(Format)을 정의하는 계층 (코드 간의 번역을 담당)
    5 계층(세션 계층) : 컴퓨터끼리 통신을 하기 위해 세션을 만드는 계층
    4 계층(전송 계층) : 최종 수신 프로세스로 데이터의 전송을 담당하는 계층 (단위 :Segment) (ex. TCP, UDP)
    3 계층(네트워크 계층) : 패킷을 목적지까지 가장 빠른 길로 전송하기 위한 계층 (단위 :Packet) (ex. Router)
    2 계층(데이터링크 계층) : 데이터의 물리적인 전송과 에러 검출, 흐름 제어를 담당하는 계층 (단위 :frame) (ex. 이더넷)
    1 계층(물리 계층) : 데이터를 전기 신호로 바꾸어주는 계층 (단위 :bit) (장비: 케이블,리피터,허브)


- 네트워크 7 layer
    - 응용계층, 표현계층, 세션계층, 전송계층, 네트워크계층, 데이터링크 계층 , 물리계층으로 이루워져 있습니다.
    - 응용계층은 사용자와 컴퓨터간의 연결을 제공할 수 있는 user 인터페이스를 제공하는 영역입니다.
    - 표현계층은 7계층에서 만들어진 데이터에 확장자를 붙여 어떤 유형의 데이터인지를 알려주는 계층이며 압축화,암호화를 수행합니다.
    - 세션계층은 통신 경로 확립이나 단절,전달방식을정합니다.
    - 전송계층은 데이터 전송 방식을 결정하고 ,포트번호를 구분하는 계층입니다.
    - 네트워크계층은 논리적 주소를 구분하고,목적지까지 최적경로를 결정해주는 계층입니다.
    - 데이터링크게층은 물리적 주소를 구분하고 데이터의 전송형태를 결정하는 계층입니다.
    - MAC주소를 통하여 통신을 할 수 있게 해준다.
    - 물리계층은 데이터를 비트로 변환하고 비트를 전기적 신호로 변화하여 전송합니다.

    - 응용계층은 사용자에게 네트워크를 사용할 수 있도록 인터페이스를 제공하는 역할을 합니다. 주요 프로토콜은 http가 있습니다.
    - 표현 계층은 송신지와 수신지가 서로 사용할 수 있도록 데이터의 형식을 맞추는 역할입니다.
    - 세션 게층은 송수신측에 세션을 연결하고 유지하는 역할을 수행합니다. 주요 프로토콜은 ssh가 있습니다.
    - 전송 계층은 패킷전송의 유효함을 체크하고 재전송 하는 신뢰성 있게 전달하는 역할을 수행하며 tcp 가 있습니다.
    - 네트워크 계층은 목적지로 패킷을 전달하는 경로 선택 및 중계역할을 합니다.
    - 데이터 링크 계층은 프레임을 전달하며 오류제어의 역할이 있습니다.
    - 물리 계층은 전기적 신호로 데이터를 보내는 역할을 합니다


- 파이프라이닝(Pipe Lining) 이란?
    - 응답 메시지가 도착하지 않은 상태에서 연속적인 요구 메시지를 서버에 전달
    - 이때 서버는 요구 메시지를 수신한 순서대로 응답 메시지를 클라이언트에 전달
    - 연결과 종료횟수를 줄임으로서 네트워크 자원의 절약
    - 발생하는 패킷의 숫자를 감소, 네트워크 트래픽 감소


- 공인(public) IP와 사설(private) IP의 차이에 대해 설명해주세요.
    - 공인 IP는 ISP(인터넷 서비스 공급자)가 제공하는 IP 주소이며, 외부에 공개되어 있는 IP주소 입니다.
    - 사설 IP는 일반 가정이나 회사 내 등에 할당된 네트워크 IP 주소이며, IPv4의 주소부족으로 인해 서브넷팅된 IP이기 때문에 라우터(공유기)에 의해 로컬 네트워크상의 PC나 장치에 할당됩니다.
      사설 IP 주소만으로는 인터넷에 직접 연결할 수 없고, 라우터를 통해 1개의 공인 IP를 할당하고, 라우터에 연결된 개인 PC는 사설 IP를 각각 할당 받아 인터넷에 접속 할 수 있습니다.


- Keep Alive
    http는 state less이며 connection less이다.
    즉 계속 연결되어 있는 상태가 아니라 하고싶은 말만하고 연결을 끊는다.
    이 방식을 채택하게된데는 바로 "여러 클라이언트의 접속"을 원활히 하기 위해서이다.
    하지만 당연히 비연결 지향이라는것은 단점역시 가지고 있다.
    인터넷에서 모든 데이터는 보내는데 생각보다 많은 비용을 지불한다.
    그래서  추가한 기능이 바로 keep alive이다.

    왼쪽의 경우를 보면 데이터를 주고 받을 때 열고 닫고를 반복한다.
    그러나 keep alive를 설정하면 데이터를 계속 주고 받을 수 있다. 바로 우리가 지정한 시간 내에서 말이다.
    데이터를 빈번하게 주고받아야한다면 좋은 선택이 될 수 있다.

    단 무조건 좋은 기능은 아니다.
    사실 keepalive는 오히려 성능 하락의 주범인 경우가 많다.
    사용자가 많다면 연결이 늘어나서 새로운 사용자를 받아들이지 못하는 경우가 빈번히 일어난다.
    그래서 사용자가 많고 유동이 많은 서비스에서는 사용이 권장되지 않는다.


- cors 설명, 어떻게 처리했는지   https://tecoble.techcourse.co.kr/post/2020-07-18-cors/   https://inpa.tistory.com/entry/WEB-%F0%9F%93%9A-CORS-%F0%9F%92%AF-%EC%A0%95%EB%A6%AC-%ED%95%B4%EA%B2%B0-%EB%B0%A9%EB%B2%95-%F0%9F%91%8F
    - 배경 및 정의
        기존 브라우저 정책은 서로 다른 도메인으로부터 리소스가 필요한 경우, 보안상의 이유로 다른 도메인의 리소스를 가져오는 것이 불가능했다. (SOP : Single-Origin-Policy)
        하지만 어플리케이션을 개선하고 쉽게 개발하기 위해선 다른 도메인에 요청을 보내는 일은 필연적이다. 이를 해결하고자 등장한 표준 기술이 CORS이다.

        CORS란 Cross Origin Resource Sharing 의 약자로 도메인이 다른 자원에 리소스를 요청할 때 접근 권한을 부여하는 메커니즘이다.
        쉽게 말하자면 친구의 물건을 쓰려면 친구가 제한하는 규약안에서 사용해야 하듯, 다른 도메인의 자원을 쓰려면 자원의 주인이 허락한 규약을 지켜야 하는 것이고 이러한 규약을 표준화한 것이 CORS 이다.
        여기서 말하는 도메인이란 Resource를 의미하며 프로토콜, 호스트, 포트를 의미한다. (ex. http : 프로토콜, localhost : 호스트, 8080: 포트)

    - 해결책
        1. Chrome 확장 프로그램 이용
            Chrome에서는 CORS 문제를 해결하기 위한 확장 프로그램을 제공해준다.
            해당 프로그램을 활성화 시키게 되면, 로컬(localhost) 환경에서 API를 테스트 시, CORS 문제를 해결할 수 있다.

        2. 프록시 사이트 이용하기
            프록시(Proxy)란 클라이언트와 서버 사이의 중계 대리점이라고 보면 된다.
            즉, 프론트에서 직접 서버에 리소스를 요청을 했더니 서버에서 따로 설정을 안해줘서 CORS 에러가 뜬다면, 모든 출처를 허용한 서버 대리점을 통해 요청을 하면 되는 것이다.
            다만 현재 무료 프록시 서버 대여 서비스들은 모두 악용 사례 때문에 api 요청 횟수 제한을 두어 실전에서는 사용하기 무리이다.
            따라서 테스트용이나 맛보기용으로 사용하되, 실전에서는 직접 프록시 서버를 구축하여 사용하여야 한다.

        3. 서버에서 Access-Control-Allow-Origin 헤더 세팅하기
            직접 서버에서 HTTP 헤더 설정을 통해 출처를 허용하게 설정하는 가장 정석적인 해결책이다.
            서버의 종류도 노드 서버, 스프링 서버, 아파치 서버 등 여러가지가 있으니, 각 서버의 문법에 맞게 위의 HTTP 헤더를 추가해 주면 된다.

            Spring 세팅
                - Configuration - 스프링 서버 전역적으로 CORS 설정
                - @CrossOrigin - 특정 컨트롤러에만 CORS 적용하고 싶을때

            Tomcat
                톰캣 폴더 경로의 conf/web.xml 혹은 webapps 내의 프로젝트 폴더 내 WEB-INF/web.xml 파일에 아래 헤더 설정을 추가


- http를 일반사람에 설명을 어떻게 할건가? 약자?

- http status 에 대해 설명해주세요

- http,https에 대한 동작의 차이점을 설명해주세요.

- restful api 설명해봐라, fetch가 뭔지 아는지

- http header안에 담긴 정보



