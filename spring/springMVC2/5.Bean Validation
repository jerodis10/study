5.Bean Validation
    5.1 Bean Validation - 소개
    5.2 Bean Validation - 시작
    5.3 Bean Validation - 스프링 적용
    5.4 Bean Validation - 에러코드
    5.5 Bean Validation - 오브젝트 오류
    5.6 Bean Validation - 한계
    5.7 Bean Validation - groups
    5.8 Form 전송 객체 분리 - 소개
    5.9 Bean Validation - HTTP 메시지 컨버터
    5.10 정리


    5.1 Bean Validation - 소개
        - 검증 기능을 지금처럼 매번 코드로 작성하는 것은 상당히 번거롭다. 특히 특정 필드에 대한 검증 로직은
          대부분 빈 값인지 아닌지, 특정 크기를 넘는지 아닌지와 같이 매우 일반적인 로직이다

        - 이런 검증 로직을 모든 프로젝트에 적용할 수 있게 공통화하고, 표준화 한 것이 바로 Bean Validation 이다.
          Bean Validation 을 잘 활용하면, 애노테이션 하나로 검증 로직을 매우 편리하게 적용할 수 있다.

        - Bean Validation 을 구현한 기술중에 일반적으로 사용하는 구현체는 하이버네이트 Validator이다. 이름이
          하이버네이트가 붙어서 그렇지 ORM 과는 관련이 없다.

    5.2 Bean Validation - 시작
        - build.gradle
          implementation 'org.springframework.boot:spring-boot-starter-validation'

        - Jakarta Bean Validation
          jakarta.validation-api : Bean Validation 인터페이스
          hibernate-validator 구현체

        - 검증 애노테이션
          @NotBlank : 빈값 + 공백만 있는 경우를 허용하지 않는다.
          @NotNull : null 을 허용하지 않는다.
          @Range(min = 1000, max = 1000000) : 범위 안의 값이어야 한다.
          @Max(9999) : 최대 9999까지만 허용한다.

        - 검증기 생성
          다음 코드와 같이 검증기를 생성한다. 이후 스프링과 통합하면 우리가 직접 이런 코드를 작성하지는
          않으므로, 이렇게 사용하는구나 정도만 참고하자.
          ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
          Validator validator = factory.getValidator();

        - 검증 실행
          검증 대상( item )을 직접 검증기에 넣고 그 결과를 받는다. Set 에는 ConstraintViolation 이라는 검증
          오류가 담긴다. 따라서 결과가 비어있으면 검증 오류가 없는 것이다.
          Set<ConstraintViolation<Item>> violations = validator.validate(item);

        - 정리
          이렇게 빈 검증기(Bean Validation)를 직접 사용하는 방법을 알아보았다. 아마 지금까지 배웠던 스프링
          MVC 검증 방법에 빈 검증기를 어떻게 적용하면 좋을지 여러가지 생각이 들 것이다. 스프링은 이미
          개발자를 위해 빈 검증기를 스프링에 완전히 통합해두었다.

    5.3 Bean Validation - 스프링 적용
        - 스프링 부트가 spring-boot-starter-validation 라이브러리를 넣으면 자동으로 Bean Validator 를
          인지하고 스프링에 통합한다.

        - 스프링 부트는 자동으로 글로벌 Validator 로 등록한다.
          LocalValidatorFactoryBean 을 글로벌 Validator 로 등록한다. 이 Validator 는 @NotNull 같은
          애노테이션을 보고 검증을 수행한다. 이렇게 글로벌 Validator 가 적용되어 있기 때문에, @Valid ,
          @Validated 만 적용하면 된다.
          검증 오류가 발생하면, FieldError , ObjectError 를 생성해서 BindingResult 에 담아준다.

        - 주의!
          다음과 같이 직접 글로벌 Validator 를 직접 등록하면 스프링 부트는 Bean Validator 를 글로벌
          Validator 로 등록하지 않는다. 따라서 애노테이션 기반의 빈 검증기가 동작하지 않는다.

        - 검증시 @Validated @Valid 둘다 사용가능하다.
          javax.validation.@Valid 를 사용하려면 build.gradle 의존관계 추가가 필요하다. (이전에 추가했다.)
          implementation 'org.springframework.boot:spring-boot-starter-validation'
          @Validated 는 스프링 전용 검증 애노테이션이고, @Valid 는 자바 표준 검증 애노테이션이다. 둘중
          아무거나 사용해도 동일하게 작동하지만, @Validated 는 내부에 groups 라는 기능을 포함하고 있다.

        - 검증 순서
            1. @ModelAttribute 각각의 필드에 타입 변환 시도
                - 성공하면 다음으로
                - 실패하면 typeMismatch 로 FieldError 추가
            2. Validator 적용

        - 바인딩에 성공한 필드만 Bean Validation 적용
          BeanValidator 는 바인딩에 실패한 필드는 BeanValidation 을 적용하지 않는다.
          생각해보면 타입 변환에 성공해서 바인딩에 성공한 필드여야 BeanValidation 적용이 의미 있다.
          (일단 모델 객체에 바인딩 받는 값이 정상으로 들어와야 검증도 의미가 있다.)
          @ModelAttribute 각각의 필드 타입 변환시도 변환에 성공한 필드만 BeanValidation 적용

    5.4 Bean Validation - 에러코드
        - 오류 코드가 애노테이션 이름으로 등록된다. 마치 typeMismatch 와 유사하다.

        - @NotBlank
          NotBlank.item.itemName
          NotBlank.itemName
          NotBlank.java.lang.String
          NotBlank

        - BeanValidation 메시지 찾는 순서
          1. 생성된 메시지 코드 순서대로 messageSource 에서 메시지 찾기
          2. 애노테이션의 message 속성 사용 @NotBlank(message = "공백! {0}")
          3. 라이브러리가 제공하는 기본 값 사용 공백일 수 없습니다.

    5.5 Bean Validation - 오브젝트 오류
        - 특정 필드 예외가 아닌 전체 예외
        - Bean Validation 에서 특정 필드( FieldError )가 아닌 해당 오브젝트 관련 오류( ObjectError )는
          어떻게 처리할 수 있을까? -> @ScriptAssert() 를 사용하면 된다.

        - 그런데 실제 사용해보면 제약이 많고 복잡하다. 그리고 실무에서는 검증 기능이 해당 객체의 범위를
          넘어서는 경우들도 종종 등장하는데, 그런 경우 대응이 어렵다.
          따라서 오브젝트 오류(글로벌 오류)의 경우 @ScriptAssert 을 억지로 사용하는 것 보다는 다음과 같이
          오브젝트 오류 관련 부분만 직접 자바 코드로 작성하는 것을 권장한다.

    5.6 Bean Validation - 한계
        - 결과적으로 item 은 등록과 수정에서 검증 조건의 충돌이 발생하고, 등록과 수정은 같은 BeanValidation
          을 적용할 수 없다. 이 문제를 어떻게 해결할 수 있을까?

    5.7 Bean Validation - groups
        - 동일한 모델 객체를 등록할 때와 수정할 때 각각 다르게 검증하는 방법을 알아보자.

        - 방법 2가지
          BeanValidation 의 groups 기능을 사용한다.
          Item 을 직접 사용하지 않고, ItemSaveForm, ItemUpdateForm 같은 폼 전송을 위한 별도의 모델
          객체를 만들어서 사용한다.

        - BeanValidation groups 기능 사용
            - 등록시에 검증할 기능과 수정시에 검증할 기능을 각각 그룹으로 나누어 적용할 수 있다.

        - @Valid 에는 groups 를 적용할 수 있는 기능이 없다. 따라서 groups 를 사용하려면 @Validated 를 사용해야 한다.

        - 사실 groups 기능은 실제 잘 사용되지는 않는데, 그 이유는 실무에서는 주로 다음에 등장하는 등록용 폼
          객체와 수정용 폼 객체를 분리해서 사용하기 때문이다.

    5.8 Form 전송 객체 분리 - 소개
        - 폼 데이터 전달에 Item 도메인 객체 사용
          HTML Form -> Item -> Controller -> Item -> Repository
          장점: Item 도메인 객체를 컨트롤러, 리포지토리 까지 직접 전달해서 중간에 Item 을 만드는 과정이
          없어서 간단하다.
          단점: 간단한 경우에만 적용할 수 있다. 수정시 검증이 중복될 수 있고, groups 를 사용해야 한다.

        - 폼 데이터 전달을 위한 별도의 객체 사용
          HTML Form -> ItemSaveForm -> Controller -> Item 생성 -> Repository
          장점: 전송하는 폼 데이터가 복잡해도 거기에 맞춘 별도의 폼 객체를 사용해서 데이터를 전달 받을 수
          있다. 보통 등록과, 수정용으로 별도의 폼 객체를 만들기 때문에 검증이 중복되지 않는다.
          단점: 폼 데이터를 기반으로 컨트롤러에서 Item 객체를 생성하는 변환 과정이 추가된다.

    5.9 Bean Validation - HTTP 메시지 컨버터
        - @Valid , @Validated 는 HttpMessageConverter ( @RequestBody )에도 적용할 수 있다.

        - API 의 경우 3가지 경우를 나누어 생각해야 한다.
          성공 요청: 성공
          실패 요청: JSON 을 객체로 생성하는 것 자체가 실패함
          검증 오류 요청: JSON 을 객체로 생성하는 것은 성공했고, 검증에서 실패함

        - @ModelAttribute vs @RequestBody
          HTTP 요청 파리미터를 처리하는 @ModelAttribute 는 각각의 필드 단위로 세밀하게 적용된다. 그래서
          특정 필드에 타입이 맞지 않는 오류가 발생해도 나머지 필드는 정상 처리할 수 있었다.
          HttpMessageConverter 는 @ModelAttribute 와 다르게 각각의 필드 단위로 적용되는 것이 아니라,
          전체 객체 단위로 적용된다.
          따라서 메시지 컨버터의 작동이 성공해서 Item 객체를 만들어야 @Valid , @Validated 가 적용된다.

          @ModelAttribute 는 필드 단위로 정교하게 바인딩이 적용된다. 특정 필드가 바인딩 되지 않아도 나머지
          필드는 정상 바인딩 되고, Validator 를 사용한 검증도 적용할 수 있다.
          @RequestBody 는 HttpMessageConverter 단계에서 JSON 데이터를 객체로 변경하지 못하면 이후
          단계 자체가 진행되지 않고 예외가 발생한다. 컨트롤러도 호출되지 않고, Validator 도 적용할 수 없다.