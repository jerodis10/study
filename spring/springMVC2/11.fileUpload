11.파일 업로드
    11.1 파일 업로드 소개
    11.2 서블릿과 파일 업로드1
    11.3 서블릿과 파일 업로드2
    11.4 스프링과 파일 업로드


    11.1 파일 업로드 소개
        - application/x-www-form-urlencoded 방식은 HTML 폼 데이터를 서버로 전송하는 가장 기본적인
          방법이다. Form 태그에 별도의 enctype 옵션이 없으면 웹 브라우저는 요청 HTTP 메시지의 헤더에 다음 내용을 추가한다.
        - Content-Type: application/x-www-form-urlencoded
        - 그리고 폼에 입력한 전송할 항목을 HTTP Body 에 문자로 username=kim&age=20 와 같이 & 로 구분해서 전송한다.
        - 파일을 업로드 하려면 파일은 문자가 아니라 바이너리 데이터를 전송해야 한다. 문자를 전송하는 이
          방식으로 파일을 전송하기는 어렵다. 그리고 또 한가지 문제가 더 있는데, 보통 폼을 전송할 때 파일만
          전송하는 것이 아니라는 점이다.

        - 이 문제를 해결하기 위해 HTTP 는 multipart/form-data 라는 전송 방식을 제공한다.
        - 이 방식을 사용하려면 Form 태그에 별도의 enctype="multipart/form-data" 를 지정해야 한다.
        - multipart/form-data 방식은 다른 종류의 여러 파일과 폼의 내용 함께 전송할 수 있다. (그래서 이름이 multipart 이다.)
        - 폼의 입력 결과로 생성된 HTTP 메시지를 보면 각각의 전송 항목이 구분이 되어있다. Content-
          Disposition 이라는 항목별 헤더가 추가되어 있고 여기에 부가 정보가 있다. 예제에서는 username ,
          age , file1 이 각각 분리되어 있고, 폼의 일반 데이터는 각 항목별로 문자가 전송되고, 파일의 경우 파일
          이름과 Content-Type 이 추가되고 바이너리 데이터가 전송된다.
        - multipart/form-data 는 이렇게 각각의 항목을 구분해서, 한번에 전송하는 것이다.

    11.2 서블릿과 파일 업로드1
        - logging.level.org.apache.coyote.http11=debug
          이 옵션을 사용하면 HTTP 요청 메시지를 확인할 수 있다.

        - spring.servlet.multipart.max-file-size=1MB
          spring.servlet.multipart.max-request-size=10MB

        - max-file-size : 파일 하나의 최대 사이즈, 기본 1MB
        - max-request-size : 멀티파트 요청 하나에 여러 파일을 업로드 할 수 있는데, 그 전체 합이다. 기본 10MB

        - spring.servlet.multipart.enabled 끄기  (기본 true)
          spring.servlet.multipart.enabled 옵션을 끄면 서블릿 컨테이너는 멀티파트와 관련된 처리를 하지 않는다.

        - spring.servlet.multipart.enabled 옵션을 켜면 스프링의 DispatcherServlet 에서 멀티파트
          리졸버( MultipartResolver )를 실행한다.
          멀티파트 리졸버는 멀티파트 요청인 경우 서블릿 컨테이너가 전달하는 일반적인 HttpServletRequest 를
          MultipartHttpServletRequest 로 변환해서 반환한다.
          MultipartHttpServletRequest 는 HttpServletRequest 의 자식 인터페이스이고, 멀티파트와 관련된
          추가 기능을 제공한다.

        - 스프링이 제공하는 기본 멀티파트 리졸버는 MultipartHttpServletRequest 인터페이스를 구현한
          StandardMultipartHttpServletRequest 를 반환한다.
          이제 컨트롤러에서 HttpServletRequest 대신에 MultipartHttpServletRequest 를 주입받을 수
          있는데, 이것을 사용하면 멀티파트와 관련된 여러가지 처리를 편리하게 할 수 있다. 그런데 이후 강의에서
          설명할 MultipartFile 이라는 것을 사용하는 것이 더 편하기 때문에 MultipartHttpServletRequest
          를 잘 사용하지는 않는다.

    11.3 서블릿과 파일 업로드2
        - application.properties
          file.dir=파일 업로드 경로 설정(예): /Users/kimyounghan/study/file/

        - 주의
          1. 꼭 해당 경로에 실제 폴더를 미리 만들어두자.
          2. application.properties 에서 설정할 때 마지막에 / (슬래시)가 포함된 것에 주의하자.

        - Part 주요 메서드
          part.getSubmittedFileName() : 클라이언트가 전달한 파일명
          part.getInputStream(): Part 의 전송 데이터를 읽을 수 있다.
          part.write(...): Part 를 통해 전송된 데이터를 저장할 수 있다.

        - 서블릿이 제공하는 Part 는 편하기는 하지만, HttpServletRequest 를 사용해야 하고, 추가로 파일
          부분만 구분하려면 여러가지 코드를 넣어야 한다. 이번에는 스프링이 이 부분을 얼마나 편리하게
          제공하는지 확인해보자.

    11.4 스프링과 파일 업로드
        - @RequestParam MultipartFile file
          업로드하는 HTML Form 의 name 에 맞추어 @RequestParam 을 적용하면 된다. 추가로
          @ModelAttribute 에서도 MultipartFile 을 동일하게 사용할 수 있다.

        - MultipartFile 주요 메서드
          file.getOriginalFilename() : 업로드 파일 명
          file.transferTo(...) : 파일 저장






