6.로그인 처리1 - 쿠키, 세션
    6.1 로그인 처리하기 - 쿠키 사용
    6.2 쿠키와 보안 문제
    6.3 로그인 처리하기 - 세션 동작 방식
    6.4 로그인 처리하기 - 세션 직접 만들기
    6.5 로그인 처리하기 - 서블릿 HTTP 세션1
    6.6 로그인 처리하기 - 서블릿 HTTP 세션2
    6.7 세션 정보와 타임아웃 설정


    * 패키지 구조 설계
        - domain
            - item
            - member
            - login
        - web
            - item
            - member
            - login

        - 도메인이 가장 중요하다.

        - 도메인 = 화면, UI, 기술 인프라 등등의 영역은 제외한 시스템이 구현해야 하는 핵심 비즈니스 업무 영역을 말함
          향후 web 을 다른 기술로 바꾸어도 도메인은 그대로 유지할 수 있어야 한다.
          이렇게 하려면 web 은 domain 을 알고있지만 domain 은 web 을 모르도록 설계해야 한다. 이것을 web 은
          domain 을 의존하지만, domain 은 web 을 의존하지 않는다고 표현한다. 예를 들어 web 패키지를 모두
          삭제해도 domain 에는 전혀 영향이 없도록 의존관계를 설계하는 것이 중요하다. 반대로 이야기하면
          domain 은 web 을 참조하면 안된다.


    6.1 로그인 처리하기 - 쿠키 사용
        - 쿠키에는 영속 쿠키와 세션 쿠키가 있다.
          영속 쿠키: 만료 날짜를 입력하면 해당 날짜까지 유지
          세션 쿠키: 만료 날짜를 생략하면 브라우저 종료시 까지만 유지

        - 브라우저 종료시 로그아웃이 되길 기대하므로, 우리에게 필요한 것은 세션 쿠키이다.

        - @CookieValue 를 사용하면 편리하게 쿠키를 조회할 수 있다.
          로그인 하지 않은 사용자도 홈에 접근할 수 있기 때문에 required = false 를 사용한다.

    6.2 쿠키와 보안 문제
        - 쿠키 값은 임의로 변경할 수 있다.
            - 클라이언트가 쿠키를 강제로 변경하면 다른 사용자가 된다.
            - 실제 웹브라우저 개발자모드 Application Cookie 변경으로 확인
            - Cookie: memberId=1 Cookie: memberId=2 (다른 사용자의 이름이 보임)

        - 쿠키에 보관된 정보는 훔쳐갈 수 있다.
            - 만약 쿠키에 개인정보나, 신용카드 정보가 있다면?
            - 이 정보가 웹 브라우저에도 보관되고, 네트워크 요청마다 계속 클라이언트에서 서버로 전달된다.
            - 쿠키의 정보가 나의 로컬 PC가 털릴 수도 있고, 네트워크 전송 구간에서 털릴 수도 있다.

        - 해커가 쿠키를 한번 훔쳐가면 평생 사용할 수 있다.
            - 해커가 쿠키를 훔쳐가서 그 쿠키로 악의적인 요청을 계속 시도할 수 있다.


        - 대안
            - 쿠키에 중요한 값을 노출하지 않고, 사용자 별로 예측 불가능한 임의의 토큰(랜덤 값)을 노출하고, 서버에서
              토큰과 사용자 id를 매핑해서 인식한다. 그리고 서버에서 토큰을 관리한다.
            - 토큰은 해커가 임의의 값을 넣어도 찾을 수 없도록 예상 불가능 해야 한다.
            - 해커가 토큰을 털어가도 시간이 지나면 사용할 수 없도록 서버에서 해당 토큰의 만료시간을 짧게(예: 30분)
              유지한다. 또는 해킹이 의심되는 경우 서버에서 해당 토큰을 강제로 제거하면 된다.

    6.3 로그인 처리하기 - 세션 동작 방식
        - 앞서 쿠키에 중요한 정보를 보관하는 방법은 여러가지 보안 이슈가 있었다. 이 문제를 해결하려면 결국
          중요한 정보를 모두 서버에 저장해야 한다. 그리고 클라이언트와 서버는 추정 불가능한 임의의 식별자
          값으로 연결해야 한다.

        - 이렇게 서버에 중요한 정보를 보관하고 연결을 유지하는 방법을 세션이라 한다.

        - UUID는 추정이 불가능하다.
          Cookie: mySessionId=zz0101xx-bab9-4b92-9b32-dadb280f4b61
          생성된 세션 ID와 세션에 보관할 값( memberA )을 서버의 세션 저장소에 보관한다.

        - 클라이언트와 서버는 결국 쿠키로 연결이 되어야 한다.
          서버는 클라이언트에 mySessionId 라는 이름으로 세션 ID 만 쿠키에 담아서 전달한다.
          클라이언트는 쿠키 저장소에 mySessionId 쿠키를 보관한다.

        - 여기서 중요한 포인트는 회원과 관련된 정보는 전혀 클라이언트에 전달하지 않는다는 것이다.
          오직 추정 불가능한 세션 ID만 쿠키를 통해 클라이언트에 전달한다.

        정리
            - 세션을 사용해서 서버에서 중요한 정보를 관리하게 되었다. 덕분에 다음과 같은 보안 문제들을 해결할 수 있다.
                - 쿠키 값을 변조 가능, 예상 불가능한 복잡한 세션Id를 사용한다.
                - 쿠키에 보관하는 정보는 클라이언트 해킹시 털릴 가능성이 있다. 세션Id가 털려도 여기에는 중요한 정보가 없다.
                - 쿠키 탈취 후 사용 해커가 토큰을 털어가도 시간이 지나면 사용할 수 없도록 서버에서 세션의
                  만료시간을 짧게(예: 30분) 유지한다. 또는 해킹이 의심되는 경우 서버에서 해당 세션을 강제로
                  제거하면 된다.

    6.4 로그인 처리하기 - 세션 직접 만들기
        - 세션 관리는 크게 다음 3가지 기능을 제공하면 된다.
            - 세션 생성
                - sessionId 생성 (임의의 추정 불가능한 랜덤 값)
                - 세션 저장소에 sessionId와 보관할 값 저장
                - sessionId로 응답 쿠키를 생성해서 클라이언트에 전달

            - 세션 조회
                - 클라이언트가 요청한 sessionId 쿠키의 값으로, 세션 저장소에 보관한 값 조회

            - 세션 만료
                - 클라이언트가 요청한 sessionId 쿠키의 값으로, 세션 저장소에 보관한 sessionId와 값 제거

    6.5 로그인 처리하기 - 서블릿 HTTP 세션1
        - 서블릿은 세션을 위해 HttpSession 이라는 기능을 제공하는데, 지금까지 나온 문제들을 해결해준다.
          우리가 직접 구현한 세션의 개념이 이미 구현되어 있고, 더 잘 구현되어 있다.

        - HttpSession 소개
          서블릿이 제공하는 HttpSession 도 결국 우리가 직접 만든 SessionManager 와 같은 방식으로 동작한다.
          서블릿을 통해 HttpSession 을 생성하면 다음과 같은 쿠키를 생성한다. 쿠키 이름이 JSESSIONID 이고,
          값은 추정 불가능한 랜덤 값이다.

        - 세션을 생성하려면 request.getSession(true) 를 사용하면 된다.
            - request.getSession(true)
              세션이 있으면 기존 세션을 반환한다.
              세션이 없으면 새로운 세션을 생성해서 반환한다.
            - request.getSession(false)
              세션이 있으면 기존 세션을 반환한다.
              세션이 없으면 새로운 세션을 생성하지 않는다. null 을 반환한다.

        - 세션에 데이터를 보관하는 방법은 request.setAttribute(..) 와 비슷하다. 하나의 세션에 여러 값을
          저장할 수 있다.

        - session.invalidate() : 세션을 제거한다.

    6.6 로그인 처리하기 - 서블릿 HTTP 세션2
        - 스프링은 세션을 더 편리하게 사용할 수 있도록 @SessionAttribute 을 지원한다.
        - @SessionAttribute(name = "loginMember", required = false) Member loginMember
        - 세션을 찾고, 세션에 들어있는 데이터를 찾는 번거로운 과정을 스프링이 한번에 편리하게 처리해주는 것을 확인할 수 있다.

        - TrackingModes
            - 이것은 웹 브라우저가 쿠키를 지원하지 않을 때 쿠키 대신 URL을  통해서 세션을 유지하는 방법이다. 이
              방법을 사용하려면 URL 에 이 값을 계속 포함해서 전달해야 한다. 타임리프 같은 템플릿은 엔진을 통해서
              링크를 걸면 jsessionid 를 URL 에 자동으로 포함해준다. 서버 입장에서 웹 브라우저가 쿠키를
              지원하는지 하지 않는지 최초에는 판단하지 못하므로, 쿠키 값도 전달하고, URL 에 jsessionid 도 함께
              전달한다.
              URL 전달 방식을 끄고 항상 쿠키를 통해서만 세션을 유지하고 싶으면 다음 옵션을 넣어주면 된다. 이렇게
              하면 URL 에 jsessionid 가 노출되지 않는다.

            - application.properties
              server.servlet.session.tracking-modes=cookie

    6.7 세션 정보와 타임아웃 설정
        - 세션은 사용자가 로그아웃을 직접 호출해서 session.invalidate() 가 호출 되는 경우에 삭제된다.
          그런데 대부분의 사용자는 로그아웃을 선택하지 않고, 그냥 웹 브라우저를 종료한다. 문제는 HTTP 가 비
          연결성(ConnectionLess)이므로 서버 입장에서는 해당 사용자가 웹 브라우저를 종료한 것인지 아닌지를
          인식할 수 없다. 따라서 서버에서 세션 데이터를 언제 삭제해야 하는지 판단하기가 어렵다.
          이 경우 남아있는 세션을 무한정 보관하면 다음과 같은 문제가 발생할 수 있다.

        - 세션의 종료 시점을 어떻게 정하면 좋을까? 가장 단순하게 생각해보면, 세션 생성 시점으로부터 30분
          정도로 잡으면 될 것 같다. 그런데 문제는 30분이 지나면 세션이 삭제되기 때문에, 열심히 사이트를
          돌아다니다가 또 로그인을 해서 세션을 생성해야 한다 그러니까 30분 마다 계속 로그인해야 하는
          번거로움이 발생한다.
          더 나은 대안은 세션 생성 시점이 아니라 사용자가 서버에 최근에 요청한 시간을 기준으로 30분 정도를
          유지해주는 것이다. 이렇게 하면 사용자가 서비스를 사용하고 있으면, 세션의 생존 시간이 30분으로 계속
          늘어나게 된다. 따라서 30분 마다 로그인해야 하는 번거로움이 사라진다. HttpSession 은 이 방식을
          사용한다.

        - application.properties
          server.servlet.session.timeout=60 : 60초, 기본은 1800(30분)
          (글로벌 설정은 분 단위로 설정해야 한다. 60(1분), 120(2분), ...)

        - 특정 세션 단위로 시간 설정
          session.setMaxInactiveInterval(1800); //1800초

        - 세션 타임아웃 발생
          세션의 타임아웃 시간은 해당 세션과 관련된 JSESSIONID 를 전달하는 HTTP 요청이 있으면 현재 시간으로
          다시 초기화 된다. 이렇게 초기화 되면 세션 타임아웃으로 설정한 시간동안 세션을 추가로 사용할 수 있다.
          session.getLastAccessedTime() : 최근 세션 접근 시간
          LastAccessedTime 이후로 timeout 시간이 지나면, WAS 가 내부에서 해당 세션을 제거한다.

        - 실무에서 주의할 점은 세션에는 최소한의 데이터만 보관해야 한다는 점이다. 보관한 데이터 용량 * 사용자
          수로 세션의 메모리 사용량이 급격하게 늘어나서 장애로 이어질 수 있다. 추가로 세션의 시간을 너무 길게
          가져가면 메모리 사용이 계속 누적 될 수 있으므로 적당한 시간을 선택하는 것이 필요하다. 기본이 30
          분이라는 것을 기준으로 고민하면 된다.
