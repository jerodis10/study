10.스프링 타입 컨버터
    10.1 스프링 타입 컨버터 소개
    10.2 타입 컨버터 - Converter
    10.3 컨버전 서비스 - ConversionService
    10.4 스프링에 Converter 적용하기
    10.5 뷰 템플릿에 컨버터 적용하기
    10.6 포맷터 - Formatter
    10.7 포맷터를 지원하는 컨버전 서비스
    10.8 포맷터 적용하기
    10.9 스프링이 제공하는 기본 포맷터


    10.1 스프링 타입 컨버터 소개
        - HTTP 요청 파라미터는 모두 문자로 처리된다. 따라서 요청 파라미터를 자바에서 다른 타입으로 변환해서
          사용하고 싶으면 다음과 같이 숫자 타입으로 변환하는 과정을 거쳐야 한다.
          String data = request.getParameter("data")

        - @RequestParam 을 사용하면 이 문자 10을 Integer 타입의 숫자 10으로 편리하게 받을 수 있다.
          이것은 스프링이 중간에서 타입을 변환해주었기 때문이다.

        - 스프링의 타입 변환 적용 예
            - 스프링 MVC 요청 파라미터
                - @RequestParam , @ModelAttribute , @PathVariable
            - @Value 등으로 YML 정보 읽기
            - XML 에 넣은 스프링 빈 정보를 변환
            - 뷰를 렌더링 할 때

        - 만약 개발자가 새로운 타입을 만들어서 변환하고 싶으면 어떻게 하면 될까?
          스프링은 확장 가능한 컨버터 인터페이스를 제공한다.
          개발자는 스프링에 추가적인 타입 변환이 필요하면 이 컨버터 인터페이스를 구현해서 등록하면 된다.
          이 컨버터 인터페이스는 모든 타입에 적용할 수 있다. 필요하면 X Y 타입으로 변환하는 컨버터
          인터페이스를 만들고, 또 Y X 타입으로 변환하는 컨버터 인터페이스를 만들어서 등록하면 된다.

    10.2 타입 컨버터 - Converter
        - 타입 컨버터 인터페이스가 단순해서 이해하기 어렵지 않을 것이다.
          그런데 이렇게 타입 컨버터를 하나하나 직접 사용하면, 개발자가 직접 컨버팅 하는 것과 큰 차이가 없다.
          타입 컨버터를 등록하고 관리하면서 편리하게 변환 기능을 제공하는 역할을 하는 무언가가 필요하다.

    10.3 컨버전 서비스 - ConversionService
        - 이렇게 타입 컨버터를 하나하나 직접 찾아서 타입 변환에 사용하는 것은 매우 불편하다. 그래서 스프링은
          개별 컨버터를 모아두고 그것들을 묶어서 편리하게 사용할 수 있는 기능을 제공하는데, 이것이 바로 컨버전
          서비스( ConversionService )이다.

        - DefaultConversionService 는 다음 두 인터페이스를 구현했다.
          ConversionService : 컨버터 사용에 초점
          ConverterRegistry : 컨버터 등록에 초점

    10.4 스프링에 Converter 적용하기
        - 처리 과정
          @RequestParam 은 @RequestParam 을 처리하는 ArgumentResolver 인
          RequestParamMethodArgumentResolver 에서 ConversionService 를 사용해서 타입을 변환한다. 부모
          클래스와 다양한 외부 클래스를 호출하는 등 복잡한 내부 과정을 거치기 때문에 대략 이렇게 처리되는
          것으로 이해해도 충분하다. 만약 더 깊이있게 확인하고 싶으면 IpPortConverter 에 디버그 브레이크
          포인트를 걸어서 확인해보자.

    10.5 뷰 템플릿에 컨버터 적용하기
        - 변수 표현식 : ${...}
          컨버전 서비스 적용 : ${{...}}

    10.6 포맷터 - Formatter
        - Converter 는 입력과 출력 타입에 제한이 없는, 범용 타입 변환 기능을 제공한다.

        - 이번에는 일반적인 웹 애플리케이션 환경을 생각해보자. 불린 타입을 숫자로 바꾸는 것 같은 범용 기능 보다는 개발자 입장에서는
          문자를 다른 타입으로 변환하거나, 다른 타입을 문자로 변환하는 상황이 대부분이다.

        - 이렇게 객체를 특정한 포멧에 맞추어 문자로 출력하거나 또는 그 반대의 역할을 하는 것에 특화된 기능이
          바로 포맷터( Formatter )이다. 포맷터는 컨버터의 특별한 버전으로 이해하면 된다.

        - Converter 는 범용(객체 객체)
        - Formatter 는 문자에 특화(객체 문자, 문자 객체) + 현지화(Locale)
          Converter 의 특별한 버전

        - 스프링은 용도에 따라 다양한 방식의 포맷터를 제공한다.
          Formatter 포맷터
          AnnotationFormatterFactory 필드의 타입이나 애노테이션 정보를 활용할 수 있는 포맷터

    10.7 포맷터를 지원하는 컨버전 서비스
        - 컨버전 서비스에는 컨버터만 등록할 수 있고, 포맷터를 등록할 수 는 없다.
        - 포맷터를 지원하는 컨버전 서비스를 사용하면 컨버전 서비스에 포맷터를 추가할 수 있다. 내부에서 어댑터
          패턴을 사용해서 Formatter 가 Converter 처럼 동작하도록 지원한다.

        - FormattingConversionService 는 포맷터를 지원하는 컨버전 서비스이다.
          DefaultFormattingConversionService 는 FormattingConversionService 에 기본적인 통화, 숫자
          관련 몇가지 기본 포맷터를 추가해서 제공한다.

        - FormattingConversionService 는 ConversionService 관련 기능을 상속받기 때문에 결과적으로
          컨버터도 포맷터도 모두 등록할 수 있다. 그리고 사용할 때는 ConversionService 가 제공하는 convert 를 사용하면 된다.
          추가로 스프링 부트는 DefaultFormattingConversionService 를 상속 받은 WebConversionService 를 내부에서 사용한다.

    10.8 포맷터 적용하기
        - 우선순위는 컨버터가 우선하므로 포맷터가 적용되지 않고, 컨버터가 적용된다.

    10.9 스프링이 제공하는 기본 포맷터
        - 스프링은 자바에서 기본으로 제공하는 타입들에 대해 수 많은 포맷터를 기본으로 제공한다.
        - 그런데 포맷터는 기본 형식이 지정되어 있기 때문에, 객체의 각 필드마다 다른 형식으로 포맷을 지정하기는 어렵다.

        - 스프링은 이런 문제를 해결하기 위해 애노테이션 기반으로 원하는 형식을 지정해서 사용할 수 있는 매우
          유용한 포맷터 두 가지를 기본으로 제공한다.
          @NumberFormat : 숫자 관련 형식 지정 포맷터 사용, NumberFormatAnnotationFormatterFactory
          @DateTimeFormat : 날짜 관련 형식 지정 포맷터 사용, Jsr310DateTimeFormatAnnotationFormatterFactory

        - 주의!
          메시지 컨버터( HttpMessageConverter )에는 컨버전 서비스가 적용되지 않는다.
          특히 객체를 JSON 으로 변환할 때 메시지 컨버터를 사용하면서 이 부분을 많이 오해하는데,
          HttpMessageConverter 의 역할은 HTTP 메시지 바디의 내용을 객체로 변환하거나 객체를 HTTP 메시지
          바디에 입력하는 것이다. 예를 들어서 JSON 을 객체로 변환하는 메시지 컨버터는 내부에서 Jackson 같은
          라이브러리를 사용한다. 객체를 JSON 으로 변환한다면 그 결과는 이 라이브러리에 달린 것이다. 따라서
          JSON 결과로 만들어지는 숫자나 날짜 포맷을 변경하고 싶으면 해당 라이브러리가 제공하는 설정을 통해서
          포맷을 지정해야 한다. 결과적으로 이것은 컨버전 서비스와 전혀 관계가 없다.






