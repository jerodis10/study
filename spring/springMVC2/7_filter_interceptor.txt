7.로그인 처리2 - 필터, 인터셉터
    7.1 서블릿 필터 - 소개
    7.2 서블릿 필터 - 요청 로그
    7.3 서블릿 필터 - 인증 체크
    7.4 스프링 인터셉터 - 소개
    7.5 스프링 인터셉터 - 요청 로그
    7.6 스프링 인터셉터 - 인증 체크
    7.7 ArgumentResolver 활용


    7.1 서블릿 필터 - 소개
        - 공통 관심사는 스프링의 AOP 로도 해결할 수 있지만, 웹과 관련된 공통 관심사는 지금부터 설명할
          서블릿 필터 또는 스프링 인터셉터를 사용하는 것이 좋다. 웹과 관련된 공통 관심사를 처리할 때는 HTTP 의
          헤더나 URL 의 정보들이 필요한데, 서블릿 필터나 스프링 인터셉터는 HttpServletRequest 를 제공한다.

        - 필터 흐름
          HTTP 요청 -> WAS -> 필터 -> 서블릿 -> 컨트롤러
            (참고로 스프링을 사용하는 경우 여기서 말하는 서블릿은 스프링의 디스패처 서블릿으로 생각하면 된다.)

        - 필터 제한
          HTTP 요청 -> WAS -> 필터 -> 서블릿 -> 컨트롤러 //로그인 사용자
          HTTP 요청 -> WAS -> 필터(적절하지 않은 요청이라 판단, 서블릿 호출X) //비 로그인 사용자

        - 필터 체인
          HTTP 요청 -> WAS -> 필터1 -> 필터2 -> 필터3 -> 서블릿 -> 컨트롤러

        - 필터 인터페이스를 구현하고 등록하면 서블릿 컨테이너가 필터를 싱글톤 객체로 생성하고, 관리한다.
          init(): 필터 초기화 메서드, 서블릿 컨테이너가 생성될 때 호출된다.
          doFilter(): 고객의 요청이 올 때 마다 해당 메서드가 호출된다. 필터의 로직을 구현하면 된다.
          destroy(): 필터 종료 메서드, 서블릿 컨테이너가 종료될 때 호출된다.

    7.2 서블릿 필터 - 요청 로그
        - public class LogFilter implements Filter {}
          필터를 사용하려면 필터 인터페이스를 구현해야 한다.

        - doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
          HTTP 요청이 오면 doFilter 가 호출된다.
          ServletRequest request 는 HTTP 요청이 아닌 경우까지 고려해서 만든 인터페이스이다. HTTP를
          사용하면 HttpServletRequest httpRequest = (HttpServletRequest) request; 와 같이
          다운 케스팅 하면 된다.

        - chain.doFilter(request, response);
          이 부분이 가장 중요하다. 다음 필터가 있으면 필터를 호출하고, 필터가 없으면 서블릿을 호출한다.
          만약 이 로직을 호출하지 않으면 다음 단계로 진행되지 않는다.

        - 필터를 등록하는 방법은 여러가지가 있지만, 스프링 부트를 사용한다면 FilterRegistrationBean 을
          사용해서 등록하면 된다.
            - setFilter(new LogFilter()) : 등록할 필터를 지정한다.
            - setOrder(1) : 필터는 체인으로 동작한다. 따라서 순서가 필요하다. 낮을 수록 먼저 동작한다.
            - addUrlPatterns("/*") : 필터를 적용할 URL 패턴을 지정한다. 한번에 여러 패턴을 지정할 수 있다.

        - @ServletComponentScan @WebFilter(filterName = "logFilter", urlPatterns = "/*") 로
          필터 등록이 가능하지만 필터 순서 조절이 안된다. 따라서 FilterRegistrationBean 을 사용하자.

    7.3 서블릿 필터 - 인증 체크
        - whitelist = {"/", "/members/add", "/login", "/logout","/css/*"};
          인증 필터를 적용해도 홈, 회원가입, 로그인 화면, css 같은 리소스에는 접근할 수 있어야 한다. 이렇게
          화이트 리스트 경로는 인증과 무관하게 항상 허용한다. 화이트 리스트를 제외한 나머지 모든 경로에는
          인증 체크 로직을 적용한다.
        - isLoginCheckPath(requestURI)
          화이트 리스트를 제외한 모든 경우에 인증 체크 로직을 적용한다.
        - httpResponse.sendRedirect("/login?redirectURL=" + requestURI);
          미인증 사용자는 로그인 화면으로 리다이렉트 한다. 그런데 로그인 이후에 다시 홈으로 이동해버리면,
          원하는 경로를 다시 찾아가야 하는 불편함이 있다. 예를 들어서 상품 관리 화면을 보려고 들어갔다가
          로그인 화면으로 이동하면, 로그인 이후에 다시 상품 관리 화면으로 들어가는 것이 좋다. 이런 부분이
          개발자 입장에서는 좀 귀찮을 수 있어도 사용자 입장으로 보면 편리한 기능이다. 이러한 기능을 위해
          현재 요청한 경로인 requestURI 를 /login 에 쿼리 파라미터로 함께 전달한다. 물론 /login
          컨트롤러에서 로그인 성공시 해당 경로로 이동하는 기능은 추가로 개발해야 한다.
        - return; 여기가 중요하다. 필터를 더는 진행하지 않는다. 이후 필터는 물론 서블릿, 컨트롤러가 더는
          호출되지 않는다. 앞서 redirect 를 사용했기 때문에 redirect 가 응답으로 적용되고 요청이 끝난다.

        - 로그인 체크 필터에서, 미인증 사용자는 요청 경로를 포함해서 /login 에 redirectURL 요청 파라미터를
          추가해서 요청했다. 이 값을 사용해서 로그인 성공시 해당 경로로 고객을 redirect 한다.

    7.4 스프링 인터셉터 - 소개
        - 서블릿 필터가 서블릿이 제공하는 기술이라면, 스프링 인터셉터는 스프링 MVC 가 제공하는 기술이다.
          웹과 관련된 공통 관심 사항을 처리하지만, 적용되는 순서와 범위, 그리고 사용방법이 다르다.

        - 스프링 인터셉터 흐름
          HTTP 요청 -> WAS -> 필터 -> 서블릿 -> 스프링 인터셉터 -> 컨트롤러

        - 스프링 인터셉터는 디스패처 서블릿과 컨트롤러 사이에서 컨트롤러 호출 직전에 호출 된다.
          스프링 인터셉터는 스프링 MVC 가 제공하는 기능이기 때문에 결국 디스패처 서블릿 이후에 등장하게 된다.
          스프링 인터셉터에도 URL 패턴을 적용할 수 있는데, 서블릿 URL 패턴과는 다르고, 매우 정밀하게 설정할 수 있다.

        - 스프링 인터셉터 제한
          HTTP 요청 -> WAS -> 필터 -> 서블릿 -> 스프링 인터셉터 -> 컨트롤러 //로그인 사용자
          HTTP 요청 -> WAS -> 필터 -> 서블릿 -> 스프링 인터셉터(적절하지 않은 요청이라 판단, 컨트롤러 호출 X) // 비 로그인 사용자

        - 스프링 인터셉터 체인
          HTTP 요청 -> WAS -> 필터 -> 서블릿 -> 인터셉터1 -> 인터셉터2 -> 컨트롤러

        - 스프링의 인터셉터를 사용하려면 HandlerInterceptor 인터페이스를 구현하면 된다.

        - 서블릿 필터의 경우 단순하게 doFilter() 하나만 제공된다. 인터셉터는 컨트롤러 호출 전( preHandle ),
          호출 후( postHandle ), 요청 완료 이후( afterCompletion )와 같이 단계적으로 잘 세분화 되어 있다.

        - 서블릿 필터의 경우 단순히 request , response 만 제공했지만, 인터셉터는 어떤 컨트롤러( handler )가
          호출되는지 호출 정보도 받을 수 있다. 그리고 어떤 modelAndView 가 반환되는지 응답 정보도 받을 수 있다.

        - 정상 흐름
            - preHandle : 컨트롤러 호출 전에 호출된다. (더 정확히는 핸들러 어댑터 호출 전에 호출된다.)
                - preHandle 의 응답값이 true 이면 다음으로 진행하고, false 이면 더는 진행하지 않는다. false
                  인 경우 나머지 인터셉터는 물론이고, 핸들러 어댑터도 호출되지 않는다. 그림에서 1번에서 끝이 나버린다.
            - postHandle : 컨트롤러 호출 후에 호출된다. (더 정확히는 핸들러 어댑터 호출 후에 호출된다.)
            - afterCompletion : 뷰가 렌더링 된 이후에 호출된다.

        - 스프링 인터셉터 예외 상황
            - preHandle : 컨트롤러 호출 전에 호출된다.
            - postHandle : 컨트롤러에서 예외가 발생하면 postHandle 은 호출되지 않는다.
            - afterCompletion : afterCompletion 은 항상 호출된다. 이 경우 예외( ex )를 파라미터로 받아서 어떤
              예외가 발생했는지 로그로 출력할 수 있다.

        => 인터셉터는 스프링 MVC 구조에 특화된 필터 기능을 제공한다고 이해하면 된다. 스프링 MVC 를 사용하고,
           특별히 필터를 꼭 사용해야 하는 상황이 아니라면 인터셉터를 사용하는 것이 더 편리하다.

    7.5 스프링 인터셉터 - 요청 로그
        - request.setAttribute(LOG_ID, uuid)
          서블릿 필터의 경우 지역변수로 해결이 가능하지만, 스프링 인터셉터는 호출 시점이 완전히 분리되어
          있다. 따라서 preHandle 에서 지정한 값을 postHandle , afterCompletion 에서 함께 사용하려면
          어딘가에 담아두어야 한다. LogInterceptor 도 싱글톤 처럼 사용되기 때문에 맴버변수를 사용하면
          위험하다. 따라서 request 에 담아두었다. 이 값은 afterCompletion 에서
          request.getAttribute(LOG_ID) 로 찾아서 사용한다.
        - return true
          true 면 정상 호출이다. 다음 인터셉터나 컨트롤러가 호출된다.

        - HandlerMethod
          핸들러 정보는 어떤 핸들러 매핑을 사용하는가에 따라 달라진다. 스프링을 사용하면 일반적으로
          @Controller , @RequestMapping 을 활용한 핸들러 매핑을 사용하는데, 이 경우 핸들러 정보로
          HandlerMethod 가 넘어온다.

        - ResourceHttpRequestHandler
          @Controller 가 아니라 /resources/static 와 같은 정적 리소스가 호출 되는 경우
          ResourceHttpRequestHandler 가 핸들러 정보로 넘어오기 때문에 타입에 따라서 처리가 필요하다.

        - WebConfig - 인터셉터 등록
          @Configuration
          public class WebConfig implements WebMvcConfigurer {
          @Override
          public void addInterceptors(InterceptorRegistry registry) {
          registry.addInterceptor(new LogInterceptor())
          .order(1)
          .addPathPatterns("/**")
          .excludePathPatterns("/css/**", "/*.ico", "/error");
          }
          //...
          }

        - 필터와 비교해보면 인터셉터는 addPathPatterns , excludePathPatterns 로 매우 정밀하게 URL
          패턴을 지정할 수 있다.

    7.6 스프링 인터셉터 - 인증 체크
        - 인증이라는 것은 컨트롤러 호출 전에만 호출되면 된다. 따라서 preHandle 만 구현하면 된다.4

    7.7 ArgumentResolver 활용
        - MVC1편 6. 스프링 MVC - 기본 기능 요청 매핑 헨들러 어뎁터 구조에서 ArgumentResolver 를 학습했다.
          이번 시간에는 해당 기능을 사용해서 로그인 회원을 조금 편리하게 찾아보자.

        - @Login 애노테이션이 있으면 직접 만든 ArgumentResolver 가 동작해서 자동으로 세션에 있는 로그인
          회원을 찾아주고, 만약 세션에 없다면 null 을 반환하도록 개발해보자.

        - @Target(ElementType.PARAMETER) : 파라미터에만 사용
          @Retention(RetentionPolicy.RUNTIME) : 리플렉션 등을 활용할 수 있도록 런타임까지 애노테이션
          정보가 남아있음

        - supportsParameter() : @Login 애노테이션이 있으면서 Member 타입이면 해당 ArgumentResolver 가 사용된다.
        - resolveArgument() : 컨트롤러 호출 직전에 호출 되어서 필요한 파라미터 정보를 생성해준다. 여기서는
          세션에 있는 로그인 회원 정보인 member 객체를 찾아서 반환해준다. 이후 스프링 MVC 는 컨트롤러의
          메서드를 호출하면서 여기에서 반환된 member 객체를 파라미터에 전달해준다.

        - 앞서 개발한 LoginMemberArgumentResolver 를 등록하자.
            - @Configuration
              public class WebConfig implements WebMvcConfigurer {
              @Override
              public void addArgumentResolvers(List<HandlerMethodArgumentResolver>
              resolvers) {
              resolvers.add(new LoginMemberArgumentResolver());
              }
              //...
              }

        - 실행해보면, 결과는 동일하지만, 더 편리하게 로그인 회원 정보를 조회할 수 있다. 이렇게
          ArgumentResolver 를 활용하면 공통 작업이 필요할 때 컨트롤러를 더욱 편리하게 사용할 수 있다.








