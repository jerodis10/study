9.API 예외 처리
    9.1 API 예외 처리 - 시작
    9.2 API 예외 처리 - 스프링 부트 기본 오류 처리
    9.3 API 예외 처리 - HandlerExceptionResolver 시작
    9.4 API 예외 처리 - HandlerExceptionResolver 활용
    9.5 API 예외 처리 - 스프링이 제공하는 ExceptionResolver1
    9.6 API 예외 처리 - 스프링이 제공하는 ExceptionResolver2
    9.7 API 예외 처리 - @ExceptionHandler
    9.8 API 예외 처리 - @ControllerAdvice


    9.1 API 예외 처리 - 시작
        - API 의 경우에는 생각할 내용이 더 많다. 오류 페이지는 단순히 고객에게 오류 화면을 보여주고
          끝이지만, API 는 각 오류 상황에 맞는 오류 응답 스펙을 정하고, JSON 으로 데이터를 내려주어야 한다.

        - produces = MediaType.APPLICATION_JSON_VALUE 의 뜻은 클라이언트가 요청하는 HTTP Header 의
          Accept 의 값이 application/json 일 때 해당 메서드가 호출된다는 것이다. 결국 클라어인트가 받고
          싶은 미디어타입이 json 이면 이 컨트롤러의 메서드가 호출된다.

        - 응답 데이터를 위해서 Map 을 만들고 status , message 키에 값을 할당했다. Jackson 라이브러리는
          Map 을 JSON 구조로 변환할 수 있다.

        - ResponseEntity 를 사용해서 응답하기 때문에 메시지 컨버터가 동작하면서 클라이언트에 JSON 이 반환된다.

    9.2 API 예외 처리 - 스프링 부트 기본 오류 처리
        - API 예외 처리도 스프링 부트가 제공하는 기본 오류 방식을 사용할 수 있다.
          스프링 부트가 제공하는 BasicErrorController 코드를 보자.

        - /error 동일한 경로를 처리하는 errorHtml() , error() 두 메서드를 확인할 수 있다.

        - errorHtml() : produces = MediaType.TEXT_HTML_VALUE : 클라이언트 요청의 Accept 해더 값이
          text/html 인 경우에는 errorHtml() 을 호출해서 view 를 제공한다.

        - error() : 그외 경우에 호출되고 ResponseEntity 로 HTTP Body 에 JSON 데이터를 반환한다.

        - 스프링 부트가 제공하는 BasicErrorController 는 HTML 페이지를 제공하는 경우에는 매우 편리하다.
          4xx, 5xx 등등 모두 잘 처리해준다. 그런데 API 오류 처리는 다른 차원의 이야기이다. API 마다, 각각의
          컨트롤러나 예외마다 서로 다른 응답 결과를 출력해야 할 수도 있다. 예를 들어서 회원과 관련된 API 에서
          예외가 발생할 때 응답과, 상품과 관련된 API 에서 발생하는 예외에 따라 그 결과가 달라질 수 있다.
          결과적으로 매우 세밀하고 복잡하다. 따라서 이 방법은 HTML 화면을 처리할 때 사용하고, API 는 오류
          처리는 뒤에서 설명할 @ExceptionHandler 를 사용하자.

    9.3 API 예외 처리 - HandlerExceptionResolver 시작
        - 목표
          예외가 발생해서 서블릿을 넘어 WAS 까지 예외가 전달되면 HTTP 상태코드가 500으로 처리된다.
          발생하는 예외에 따라서 400, 404 등등 다른 상태코드도 처리하고 싶다.
          오류 메시지, 형식등을 API 마다 다르게 처리하고 싶다.

        - HandlerExceptionResolver
          스프링 MVC 는 컨트롤러(핸들러) 밖으로 예외가 던져진 경우 예외를 해결하고, 동작을 새로 정의할 수 있는
          방법을 제공한다. 컨트롤러 밖으로 던져진 예외를 해결하고, 동작 방식을 변경하고 싶으면
          HandlerExceptionResolver 를 사용하면 된다. 줄여서 ExceptionResolver 라 한다.

        - ExceptionResolver 가 ModelAndView 를 반환하는 이유는 마치 try, catch 를 하듯이, Exception 을
          처리해서 정상 흐름 처럼 변경하는 것이 목적이다. 이름 그대로 Exception 을 Resolver(해결)하는 것이
          목적이다.

        - 반환 값에 따른 동작 방식
            - HandlerExceptionResolver 의 반환 값에 따른 DispatcherServlet 의 동작 방식은 다음과 같다.

            - 빈 ModelAndView
                - new ModelAndView() 처럼 빈 ModelAndView 를 반환하면 뷰를 렌더링 하지
                  않고, 정상 흐름으로 서블릿이 리턴된다.

            - ModelAndView 지정
                - ModelAndView 에 View , Model 등의 정보를 지정해서 반환하면 뷰를 렌더링 한다.

            - null
                - null 을 반환하면, 다음 ExceptionResolver 를 찾아서 실행한다. 만약 처리할 수 있는
                  ExceptionResolver 가 없으면 예외 처리가 안되고, 기존에 발생한 예외를 서블릿 밖으로 던진다.

        - ExceptionResolver 활용
            - 예외 상태 코드 변환
                - 예외를 response.sendError(xxx) 호출로 변경해서 서블릿에서 상태 코드에 따른 오류를 처리하도록 위임
                - 이후 WAS 는 서블릿 오류 페이지를 찾아서 내부 호출, 예를 들어서 스프링 부트가 기본으로 설정한 /error 가 호출됨

            - 뷰 템플릿 처리
                - ModelAndView 에 값을 채워서 예외에 따른 새로운 오류 화면 뷰 렌더링 해서 고객에게 제공

            - API 응답 처리
                - response.getWriter().println("hello"); 처럼 HTTP 응답 바디에 직접 데이터를 넣어주는
                  것도 가능하다. 여기에 JSON 으로 응답하면 API 응답 처리를 할 수 있다.

        - WebConfig - 수정
            - WebMvcConfigurer 를 통해 등록
            - configureHandlerExceptionResolvers(..) 를 사용하면 스프링이 기본으로 등록하는
              ExceptionResolver 가 제거되므로 주의, extendHandlerExceptionResolvers 를 사용하자.

    9.4 API 예외 처리 - HandlerExceptionResolver 활용
        - ExceptionResolver 를 사용하면 컨트롤러에서 예외가 발생해도 ExceptionResolver 에서 예외를 처리해버린다.
          따라서 예외가 발생해도 서블릿 컨테이너까지 예외가 전달되지 않고, 스프링 MVC 에서 예외 처리는 끝이 난다.
          결과적으로 WAS 입장에서는 정상 처리가 된 것이다. 이렇게 예외를 이곳에서 모두 처리할 수 있다는 것이 핵심이다.

    9.5 API 예외 처리 - 스프링이 제공하는 ExceptionResolver1
        - 스프링 부트가 기본으로 제공하는 ExceptionResolver 는 다음과 같다.
          HandlerExceptionResolverComposite 에 다음 순서로 등록
          1. ExceptionHandlerExceptionResolver
          2. ResponseStatusExceptionResolver
          3. DefaultHandlerExceptionResolver 우선 순위가 가장 낮다.

        - ExceptionHandlerExceptionResolver
          @ExceptionHandler 을 처리한다. API 예외 처리는 대부분 이 기능으로 해결한다. 조금 뒤에 자세히
          설명한다.

        - ResponseStatusExceptionResolver
          HTTP 상태 코드를 지정해준다.
          예) @ResponseStatus(value = HttpStatus.NOT_FOUND)

        - DefaultHandlerExceptionResolver
          스프링 내부 기본 예외를 처리한다.

        - ResponseStatusExceptionResolver
            - @ResponseStatus 가 달려있는 예외
              ResponseStatusException 예외

            - ResponseStatusExceptionResolver 코드를 확인해보면 결국 response.sendError(statusCode,
              resolvedReason) 를 호출하는 것을 확인할 수 있다.
              sendError(400) 를 호출했기 때문에 WAS 에서 다시 오류 페이지( /error )를 내부 요청한다.

            - reason 을 MessageSource 에서 찾는 기능도 제공한다. reason = "error.bad"
              @ResponseStatus(code = HttpStatus.BAD_REQUEST, reason = "error.bad")

            - @ResponseStatus 는 개발자가 직접 변경할 수 없는 예외에는 적용할 수 없다. (애노테이션을 직접 넣어야
              하는데, 내가 코드를 수정할 수 없는 라이브러리의 예외 코드 같은 곳에는 적용할 수 없다.)
              추가로 애노테이션을 사용하기 때문에 조건에 따라 동적으로 변경하는 것도 어렵다. 이때는
              ResponseStatusException 예외를 사용하면 된다.

    9.6 API 예외 처리 - 스프링이 제공하는 ExceptionResolver2
        - DefaultHandlerExceptionResolver.handleTypeMismatch 를 보면 다음과 같은 코드를 확인할 수 있다.
          response.sendError(HttpServletResponse.SC_BAD_REQUEST) (400)
          결국 response.sendError() 를 통해서 문제를 해결한다.
          sendError(400) 를 호출했기 때문에 WAS 에서 다시 오류 페이지( /error )를 내부 요청한다.

    9.7 API 예외 처리 - @ExceptionHandler
        - 회원을 처리하는 컨트롤러에서 발생하는 RuntimeException 예외와 상품을 관리하는 컨트롤러에서 발생하는 동일한
          RuntimeException 예외를 서로 다른 방식으로 처리하고 싶다면 어떻게 해야할까?

        - @ExceptionHandler
          스프링은 API 예외 처리 문제를 해결하기 위해 @ExceptionHandler 라는 애노테이션을 사용하는 매우
          편리한 예외 처리 기능을 제공하는데, 이것이 바로 ExceptionHandlerExceptionResolver 이다.
          스프링은 ExceptionHandlerExceptionResolver 를 기본으로 제공하고, 기본으로 제공하는
          ExceptionResolver 중에 우선순위도 가장 높다. 실무에서 API 예외 처리는 대부분 이 기능을 사용한다.

        - @ExceptionHandler 애노테이션을 선언하고, 해당 컨트롤러에서 처리하고 싶은 예외를 지정해주면 된다.
          해당 컨트롤러에서 예외가 발생하면 이 메서드가 호출된다. 참고로 지정한 예외 또는 그 예외의 자식
          클래스는 모두 잡을 수 있다.

        - @ExceptionHandler 에 지정한 부모 클래스는 자식 클래스까지 처리할 수 있다. 따라서 자식예외가 발생하면 부모예외처리() ,
          자식예외처리() 둘다 호출 대상이 된다. 그런데 둘 중 더 자세한 것이 우선권을 가지므로 자식예외처리() 가 호출된다. 물론 부모예외가
          호출되면 부모예외처리() 만 호출 대상이 되므로 부모예외처리() 가 호출된다.

        - @ExceptionHandler 에는 마치 스프링의 컨트롤러의 파라미터 응답처럼 다양한 파라미터와 응답을 지정할 수 있다.

        - ResponseEntity 를 사용하면 HTTP 응답 코드를 프로그래밍해서 동적으로 변경할 수 있다. 앞서 살펴본
          @ResponseStatus 는 애노테이션이므로 HTTP 응답 코드를 동적으로 변경할 수 없다.

    9.8 API 예외 처리 - @ControllerAdvice
        - @ExceptionHandler 를 사용해서 예외를 깔끔하게 처리할 수 있게 되었지만, 정상 코드와 예외 처리
          코드가 하나의 컨트롤러에 섞여 있다. @ControllerAdvice 또는 @RestControllerAdvice 를 사용하면 둘을 분리할 수 있다.

        - @ControllerAdvice
            - @ControllerAdvice 는 대상으로 지정한 여러 컨트롤러에 @ExceptionHandler , @InitBinder 기능을
              부여해주는 역할을 한다.

            - @ControllerAdvice 에 대상을 지정하지 않으면 모든 컨트롤러에 적용된다. (글로벌 적용)

            - @RestControllerAdvice 는 @ControllerAdvice 와 같고, @ResponseBody 가 추가되어 있다.
              @Controller , @RestController 의 차이와 같다.

            - 대상 컨트롤러 지정 방법
              // Target all Controllers annotated with @RestController
              @ControllerAdvice(annotations = RestController.class)
              public class ExampleAdvice1 {}

              // Target all Controllers within specific packages
              @ControllerAdvice("org.example.controllers")
              public class ExampleAdvice2 {}

              // Target all Controllers assignable to specific classes
              @ControllerAdvice(assignableTypes = {ControllerInterface.class,
              AbstractController.class})
              public class ExampleAdvice3 {}







