4.Validation
    4.1 BindingResult1
    4.2 BindingResult2
    4.3 FieldError, ObjectError
    4.4 오류 코드와 메시지 처리1
    4.5 오류 코드와 메시지 처리2
    4.6 오류 코드와 메시지 처리3
    4.7 오류 코드와 메시지 처리4
    4.8 오류 코드와 메시지 처리5
    4.9 오류 코드와 메시지 처리6
    4.10 Validator 분리1
    4.11 Validator 분리2


    4.1 BindingResult1
        - BindingResult bindingResult 파라미터의 위치는 @ModelAttribute Item item 다음에 와야 한다.

        - 필드에 오류가 있으면 FieldError 객체를 생성해서 bindingResult 에 담아두면 된다.
          objectName : @ModelAttribute 이름
          field : 오류가 발생한 필드 이름
          defaultMessage : 오류 기본 메시지

        - 특정 필드를 넘어서는 오류가 있으면 ObjectError 객체를 생성해서 bindingResult 에 담아두면 된다.
          objectName : @ModelAttribute 의 이름
          defaultMessage : 오류 기본 메시지

        - 타임리프 스프링 검증 오류 통합 기능
            - 타임리프는 스프링의 BindingResult 를 활용해서 편리하게 검증 오류를 표현하는 기능을 제공한다.
              #fields : #fields 로 BindingResult 가 제공하는 검증 오류에 접근할 수 있다.
              th:errors : 해당 필드에 오류가 있는 경우에 태그를 출력한다. th:if 의 편의 버전이다.
              th:errorclass : th:field 에서 지정한 필드에 오류가 있으면 class 정보를 추가한다.

    4.2 BindingResult2
        - 스프링이 제공하는 검증 오류를 보관하는 객체이다. 검증 오류가 발생하면 여기에 보관하면 된다.
          BindingResult 가 있으면 @ModelAttribute 에 데이터 바인딩 시 오류가 발생해도 컨트롤러가
          호출된다!

        - 예) @ModelAttribute 에 바인딩 시 타입 오류가 발생하면?
          BindingResult 가 없으면 400 오류가 발생하면서 컨트롤러가 호출되지 않고, 오류 페이지로 이동한다.
          BindingResult 가 있으면 오류 정보( FieldError )를 BindingResult 에 담아서 컨트롤러를 정상 호출한다.

        - BindingResult 는 검증할 대상 바로 다음에 와야한다. 순서가 중요하다. 예를 들어서 @ModelAttribute
          Item item , 바로 다음에 BindingResult 가 와야 한다.
          BindingResult 는 Model 에 자동으로 포함된다.

        - BindingResult 와 Errors
            - BindingResult 는 인터페이스이고, Errors 인터페이스를 상속받고 있다.
              실제 넘어오는 구현체는 BeanPropertyBindingResult 라는 것인데, 둘다 구현하고 있으므로
              BindingResult 대신에 Errors 를 사용해도 된다. Errors 인터페이스는 단순한 오류 저장과 조회
              기능을 제공한다. BindingResult 는 여기에 더해서 추가적인 기능들을 제공한다. addError() 도
              BindingResult 가 제공하므로 여기서는 BindingResult 를 사용하자. 주로 관례상 BindingResult 를
              많이 사용한다.

    4.3 FieldError, ObjectError
        - 오류 발생시 사용자 입력 값 유지
            - 사용자의 입력 데이터가 컨트롤러의 @ModelAttribute 에 바인딩되는 시점에 오류가 발생하면 모델
              객체에 사용자 입력 값을 유지하기 어렵다. 예를 들어서 가격에 숫자가 아닌 문자가 입력된다면 가격은
              Integer 타입이므로 문자를 보관할 수 있는 방법이 없다. 그래서 오류가 발생한 경우 사용자 입력 값을
              보관하는 별도의 방법이 필요하다. 그리고 이렇게 보관한 사용자 입력 값을 검증 오류 발생시 화면에 다시
              출력하면 된다.
              FieldError 는 오류 발생시 사용자 입력 값을 저장하는 기능을 제공한다.

            - 여기서 rejectedValue 가 바로 오류 발생시 사용자 입력 값을 저장하는 필드다.
              bindingFailure 는 타입 오류 같은 바인딩이 실패했는지 여부를 적어주면 된다. 여기서는 바인딩이
              실패한 것은 아니기 때문에 false 를 사용한다.

        - 타임리프의 사용자 입력 값 유지
            - 타임리프의 th:field 는 매우 똑똑하게 동작하는데, 정상 상황에는 모델 객체의 값을 사용하지만, 오류가
              발생하면 FieldError 에서 보관한 값을 사용해서 값을 출력한다.

        - 스프링의 바인딩 오류 처리
            - 타입 오류로 바인딩에 실패하면 스프링은 FieldError 를 생성하면서 사용자가 입력한 값을 넣어둔다.
              그리고 해당 오류를 BindingResult 에 담아서 컨트롤러를 호출한다. 따라서 타입 오류 같은 바인싱
              실패시에도 사용자의 오류 메시지를 정상 출력할 수 있다.

    4.4 오류 코드와 메시지 처리1
        - FieldError , ObjectError 의 생성자는 errorCode , arguments 를 제공한다. 이것은 오류 발생시 오류
          코드로 메시지를 찾기 위해 사용된다.

        - errors 메시지 파일 생성
          messages.properties 를 사용해도 되지만, 오류 메시지를 구분하기 쉽게 errors.properties 라는
          별도의 파일로 관리해보자.

        - application.properties
          spring.messages.basename=messages,errors
          이렇게하면 messages.properties , errors.properties 두 파일을 모두 인식한다.
          (생략하면 messages.properties 를 기본으로 인식한다.)

    4.5 오류 코드와 메시지 처리2
        - BindingResult 가 제공하는 rejectValue() , reject() 를 사용하면 FieldError , ObjectError 를
          직접 생성하지 않고, 깔끔하게 검증 오류를 다룰 수 있다.

    4.6 오류 코드와 메시지 처리3
        - 가장 좋은 방법은 범용성으로 사용하다가, 세밀하게
          작성해야 하는 경우에는 세밀한 내용이 적용되도록 메시지에 단계를 두는 방법이다.

        - #Level1
          required.item.itemName: 상품 이름은 필수 입니다.
          #Level2
          required: 필수 값 입니다.

        - 스프링은 MessageCodesResolver 라는 것으로 이러한 기능을 지원한다.

    4.7 오류 코드와 메시지 처리4
        - MessageCodesResolver
          검증 오류 코드로 메시지 코드들을 생성한다.
          MessageCodesResolver 인터페이스이고 DefaultMessageCodesResolver 는 기본 구현체이다.
          주로 다음과 함께 사용 ObjectError , FieldError

        - DefaultMessageCodesResolver 의 기본 메시지 생성 규칙
            - 객체 오류
              객체 오류의 경우 다음 순서로 2가지 생성
              1.: code + "." + object name
              2.: code
              예) 오류 코드: required, object name: item
              1.: required.item
              2.: required

            - 필드 오류
              필드 오류의 경우 다음 순서로 4가지 메시지 코드 생성
              1.: code + "." + object name + "." + field
              2.: code + "." + field
              3.: code + "." + field type
              4.: code
              예) 오류 코드: typeMismatch, object name "user", field "age", field type: int
              1. "typeMismatch.user.age"
              2. "typeMismatch.age"
              3. "typeMismatch.int"
              4. "typeMismatch"

        - 동작 방식
          rejectValue() , reject() 는 내부에서 MessageCodesResolver 를 사용한다. 여기에서 메시지 코드들을 생성한다.
          FieldError , ObjectError 의 생성자를 보면, 오류 코드를 하나가 아니라 여러 오류 코드를 가질 수 있다.
          MessageCodesResolver 를 통해서 생성된 순서대로 오류 코드를 보관한다.

    4.8 오류 코드와 메시지 처리5
        - 오류 코드 관리 전략
            - 핵심은 구체적인 것에서! 덜 구체적인 것으로!
              MessageCodesResolver 는 required.item.itemName 처럼 구체적인 것을 먼저 만들어주고,
              required 처럼 덜 구체적인 것을 가장 나중에 만든다.
              이렇게 하면 앞서 말한 것 처럼 메시지와 관련된 공통 전략을 편리하게 도입할 수 있다.

            - 크게 중요하지 않은 메시지는 범용성 있는 required 같은 메시지로 끝내고, 정말 중요한 메시지는 꼭
              필요할 때 구체적으로 적어서 사용하는 방식이 더 효과적이다.

        - 정리
            1. rejectValue() 호출
            2. MessageCodesResolver 를 사용해서 검증 오류 코드로 메시지 코드들을 생성
            3. new FieldError() 를 생성하면서 메시지 코드들을 보관
            4. th:errors 에서 메시지 코드들로 메시지를 순서대로 메시지에서 찾고, 노출

    4.9 오류 코드와 메시지 처리6
        - 검증 오류 코드는 다음과 같이 2가지로 나눌 수 있다.
          개발자가 직접 설정한 오류 코드 rejectValue() 를 직접 호출
          스프링이 직접 검증 오류에 추가한 경우(주로 타입 정보가 맞지 않음)

        - 다음과 같이 4가지 메시지 코드가 입력되어 있다.
          typeMismatch.item.price
          typeMismatch.price
          typeMismatch.java.lang.Integer
          typeMismatch
          그렇다. 스프링은 타입 오류가 발생하면 typeMismatch 라는 오류 코드를 사용한다. 이 오류 코드가
          MessageCodesResolver 를 통하면서 4가지 메시지 코드가 생성된 것이다.

    4.10 Validator 분리1  p.34
        - 컨트롤러에서 검증 로직이 차지하는 부분은 매우 크다. 이런 경우 별도의 클래스로 역할을 분리하는 것이
          좋다. 그리고 이렇게 분리한 검증 로직을 재사용 할 수도 있다.

    4.11 Validator 분리2 p.36
        - validator 를 직접 호출하는 부분이 사라지고, 대신에 검증 대상 앞에 @Validated 가 붙었다.

        - 동작 방식
          @Validated 는 검증기를 실행하라는 애노테이션이다.
          이 애노테이션이 붙으면 앞서 WebDataBinder 에 등록한 검증기를 찾아서 실행한다. 그런데 여러 검증기를
          등록한다면 그 중에 어떤 검증기가 실행되어야 할지 구분이 필요하다. 이때 supports() 가 사용된다.
          여기서는 supports(Item.class) 호출되고, 결과가 true 이므로 ItemValidator 의 validate() 가 호출된다.


        - @Validated 는 스프링 전용 검증 애노테이션이고, @Valid 는 자바 표준 검증 애노테이션이다.