2.쓰레드 로컬 - ThreadLocal
    2.1 필드 동기화 - 개발
    2.2 필드 동기화 - 적용
    2.3 필드 동기화 - 동시성 문제
    2.4 동시성 문제 - 예제 코드
    2.5 ThreadLocal - 소개
    2.6 ThreadLocal - 예제 코드
    2.7 쓰레드 로컬 동기화 - 개발
    2.8 쓰레드 로컬 동기화 - 적용
    2.9 쓰레드 로컬 - 주의사항


    2.1 필드 동기화 - 개발
        - 앞서 로그 추적기를 만들면서 다음 로그를 출력할 때 트랜잭션 ID 와 level 을 동기화 하는 문제가 있었다.
          이 문제를 해결하기 위해 TraceId 를 파라미터로 넘기도록 구현했다.
          이렇게 해서 동기화는 성공했지만, 로그를 출력하는 모든 메서드에 TraceId 파라미터를 추가해야 하는
          문제가 발생했다.
          TraceId 를 파라미터로 넘기지 않고 이 문제를 해결할 수 있는 방법은 없을까?

        - FieldLogTrace.traceIdHolder 필드를 사용해서 TraceId 가 잘 동기화 되는 것을 확인할 수 있다.
          이제 불필요하게 TraceId 를 파라미터로 전달하지 않아도 되고, 애플리케이션의 메서드 파라미터도
          변경하지 않아도 된다.

    2.2 필드 동기화 - 적용
        - LogTrace 스프링 빈 등록
          FieldLogTrace 를 수동으로 스프링 빈으로 등록하자. 수동으로 등록하면 향후 구현체를 편리하게 변경할
          수 있다는 장점이 있다.

    2.3 필드 동기화 - 동시성 문제
        - FieldLogTrace 는 싱글톤으로 등록된 스프링 빈이다. 이 객체의 인스턴스가 애플리케이션에 딱 1
          존재한다는 뜻이다. 이렇게 하나만 있는 인스턴스의 FieldLogTrace.traceIdHolder 필드를 여러
          쓰레드가 동시에 접근하기 때문에 문제가 발생한다.

    2.4 동시성 문제 - 예제 코드
        - 여러 쓰레드가 동시에 같은 인스턴스의 필드 값을 변경하면서 발생하는 문제를 동시성 문제라 한다. 이런 동시성
          문제는 여러 쓰레드가 같은 인스턴스의 필드에 접근해야 하기 때문에 트래픽이 적은 상황에서는 확률상 잘
          나타나지 않고, 트래픽이 점점 많아질 수 록 자주 발생한다.
          특히 스프링 빈 처럼 싱글톤 객체의 필드를 변경하며 사용할 때 이러한 동시성 문제를 조심해야 한다.

        - 이런 동시성 문제는 지역 변수에서는 발생하지 않는다. 지역 변수는 쓰레드마다 각각 다른 메모리 영역이 할당된다.
          동시성 문제가 발생하는 곳은 같은 인스턴스의 필드(주로 싱글톤에서 자주 발생), 또는 static 같은 공용 필드에 접근할 때 발생한다.
          동시성 문제는 값을 읽기만 하면 발생하지 않는다. 어디선가 값을 변경하기 때문에 발생한다.

        - 그렇다면 지금처럼 싱글톤 객체의 필드를 사용하면서 동시성 문제를 해결하려면 어떻게 해야할까? 다시
          파라미터를 전달하는 방식으로 돌아가야 할까? 이럴 때 사용하는 것이 바로 쓰레드 로컬이다.

    2.5 ThreadLocal - 소개
        - 쓰레드 로컬은 해당 쓰레드만 접근할 수 있는 특별한 저장소를 말한다.
        - 쓰레드 로컬을 사용하면 각 쓰레드마다 별도의 내부 저장소를 제공한다. 따라서 같은 인스턴스의 쓰레드
          로컬 필드에 접근해도 문제 없다.

    2.6 ThreadLocal - 예제 코드
        - 해당 쓰레드가 쓰레드 로컬을 모두 사용하고 나면 ThreadLocal.remove() 를 호출해서 쓰레드 로컬에
          저장된 값을 제거해주어야 한다.

    2.7 쓰레드 로컬 동기화 - 개발
        - traceIdHolder 가 필드에서 ThreadLocal 로 변경되었다. 따라서 값을 저장할 때는 set(..) 을
          사용하고, 값을 조회할 때는 get() 을 사용한다.

        - ThreadLocal.remove()
          추가로 쓰레드 로컬을 모두 사용하고 나면 꼭 ThreadLocal.remove() 를 호출해서 쓰레드 로컬에 저장된
          값을 제거해주어야 한다.

    2.8 쓰레드 로컬 동기화 - 적용
        - 동시성 문제가 있는 FieldLogTrace 대신에 문제를 해결한 ThreadLocalLogTrace 를 스프링 빈으로 등록하자.

    2.9 쓰레드 로컬 - 주의사항
        - 쓰레드 로컬의 값을 사용 후 제거하지 않고 그냥 두면 WAS(톰캣)처럼 쓰레드 풀을 사용하는 경우에 심각한
          문제가 발생할 수 있다.



