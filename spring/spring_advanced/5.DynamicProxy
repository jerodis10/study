5.DynamicProxy
	5.1 리플렉션
	5.2 JDK 동적 프록시 - 소개
	5.3 JDK 동적 프록시 - 예제 코드
	5.4 JDK 동적 프록시 - 적용1
	5.5 JDK 동적 프록시 - 적용2
	5.6 CGLIB - 소개
	5.7 CGLIB - 예제 코드
	5.8 정리
	
	
	5.1 리플렉션
		- 지금까지 프록시를 사용해서 기존 코드를 변경하지 않고, 로그 추적기라는 부가 기능을 적용할 수 있었다. 
		  그런데 문제는 대상 클래스 수 만큼 로그 추적을 위한 프록시 클래스를 만들어야 한다는 점이다.
		  로그 추적을 위한 프록시 클래스들의 소스코드는 거의 같은 모양을 하고 있다.
		  
		- 자바가 기본으로 제공하는 JDK 동적 프록시 기술이나 CGLIB 같은 프록시 생성 오픈소스 기술을 활용하면
		  프록시 객체를 동적으로 만들어낼 수 있다. 쉽게 이야기해서 프록시 클래스를 지금처럼 계속 만들지 않아도
		  된다는 것이다. 프록시를 적용할 코드를 하나만 만들어두고 동적 프록시 기술을 사용해서 프록시 객체를
		  찍어내면 된다.
		  
		- JDK 동적 프록시를 이해하기 위해서는 먼저 자바의 리플렉션 기술을 이해해야 한다.
		  리플렉션 기술을 사용하면 클래스나 메서드의 메타정보를 동적으로 획득하고, 코드도 동적으로 호출할 수
	  	  있다.
	  	  
	  	- 리플렉션은 클래스나 메서드의 메타정보를 사용해서 동적으로 호출하는 메서드를 변경할 수 있다.
	  	
	  	- 정리
	  	  정적인 target.callA() , target.callB() 코드를 리플렉션을 사용해서 Method 라는 메타정보로
		  추상화했다. 덕분에 공통 로직을 만들 수 있게 되었다.
	  	
	  	- 주의
	  		- 리플렉션을 사용하면 클래스와 메서드의 메타정보를 사용해서 애플리케이션을 동적으로 유연하게 만들 수
		  	  있다. 하지만 리플렉션 기술은 런타임에 동작하기 때문에, 컴파일 시점에 오류를 잡을 수 없다.
		  	- 리플렉션은 일반적으로 사용하면 안된다. 지금까지 프로그래밍 언어가 발달하면서 타입 정보를
		  	  기반으로 컴파일 시점에 오류를 잡아준 덕분에 개발자가 편하게 살았는데, 리플렉션은 그것에 역행하는
			  방식이다.
			- 리플렉션은 프레임워크 개발이나 또는 매우 일반적인 공통 처리가 필요할 때 부분적으로 주의해서 사용해야 한다.   
			
	5.2 JDK 동적 프록시 - 소개
		- 앞서 살펴본 것과 같이 프록시 클래스의 기본 코드와 흐름은
		  거의 같고, 프록시를 어떤 대상에 적용하는가 정도만 차이가 있었다. 쉽게 이야기해서 프록시의 로직은
		  같은데, 적용 대상만 차이가 있는 것이다.
		  
		- 이 문제를 해결하는 것이 바로 동적 프록시 기술이다.
		  동적 프록시 기술을 사용하면 개발자가 직접 프록시 클래스를 만들지 않아도 된다. 이름 그대로 프록시
		  객체를 동적으로 런타임에 개발자 대신 만들어준다. 그리고 동적 프록시에 원하는 실행 로직을 지정할 수 있다.
		  
		-  JDK 동적 프록시는 인터페이스를 기반으로 프록시를 동적으로 만들어준다. 따라서 인터페이스가 필수이다.
		
		- 생성된 JDK 동적 프록시
		  proxyClass=class com.sun.proxy.$Proxy1 이 부분이 동적으로 생성된 프록시 클래스 정보이다. 
		  이것은 우리가 만든 클래스가 아니라 JDK 동적 프록시가 이름 그대로 동적으로 만들어준 프록시이다. 이
		  프록시는 TimeInvocationHandler 로직을 실행한다.
		  
		- 실행 순서
		  1. 클라이언트는 JDK 동적 프록시의 call() 을 실행한다.
		  2. JDK 동적 프록시는 InvocationHandler.invoke() 를 호출한다. TimeInvocationHandler 가
			 구현체로 있으로 TimeInvocationHandler.invoke() 가 호출된다.
		  3. TimeInvocationHandler 가 내부 로직을 수행하고, method.invoke(target, args) 를 호출해서
		     target 인 실제 객체( AImpl )를 호출한다.
		  4. AImpl 인스턴스의 call() 이 실행된다.
		  5. AImpl 인스턴스의 call() 의 실행이 끝나면 TimeInvocationHandler 로 응답이 돌아온다. 시간
			 로그를 출력하고 결과를 반환한다.
			 
		- 정리
		  AImpl , BImpl 각각 프록시를 만들지 않았다. 프록시는 JDK 동적 프록시를 사용해서
		  동적으로 만들고 TimeInvocationHandler 는 공통으로 사용했다.
		  
	5.3 JDK 동적 프록시 - 예제 코드
		- JDK 동적 프록시 기술 덕분에 적용 대상 만큼 프록시 객체를 만들지 않아도 된다. 그리고 같은 부가 기능
		  로직을 한번만 개발해서 공통으로 적용할 수 있다. 만약 적용 대상이 100개여도 동적 프록시를 통해서
		  생성하고, 각각 필요한 InvocationHandler 만 만들어서 넣어주면 된다.
		  결과적으로 프록시 클래스를 수 없이 만들어야 하는 문제도 해결하고, 부가 기능 로직도 하나의 클래스에
		  모아서 단일 책임 원칙(SRP)도 지킬 수 있게 되었다.
		  
	5.4 JDK 동적 프록시 - 적용1
	
	5.5 JDK 동적 프록시 - 적용2	  
		- JDK 동적 프록시 - 한계
			- JDK 동적 프록시는 인터페이스가 필수이다.
			- 그렇다면 V2 애플리케이션 처럼 인터페이스 없이 클래스만 있는 경우에는 어떻게 동적 프록시를 적용할 수 있을까?
			- 이것은 일반적인 방법으로는 어렵고 CGLIB 라는 바이트코드를 조작하는 특별한 라이브러리를 사용해야 한다.
			
	5.6 CGLIB - 소개
		- CGLIB: Code Generator Library		
			- CGLIB는 바이트코드를 조작해서 동적으로 클래스를 생성하는 기술을 제공하는 라이브러리이다.
			- CGLIB를 사용하면 인터페이스가 없어도 구체 클래스만 가지고 동적 프록시를 만들어낼 수 있다.
			- CGLIB는 원래는 외부 라이브러리인데, 스프링 프레임워크가 스프링 내부 소스 코드에 포함했다. 따라서
			  스프링을 사용한다면 별도의 외부 라이브러리를 추가하지 않아도 사용할 수 있다.	  
		  	
		  	- 참고로 우리가 CGLIB를 직접 사용하는 경우는 거의 없다. 이후에 설명할 스프링의 ProxyFactory 라는
			  것이 이 기술을 편리하게 사용하게 도와주기 때문에, 너무 깊이있게 파기 보다는 CGLIB가 무엇인지 대략
			  개념만 잡으면 된다.
			  
	5.7 CGLIB - 예제 코드
		- JDK 동적 프록시에서 실행 로직을 위해 InvocationHandler 를 제공했듯이, CGLIB는
		  MethodInterceptor 를 제공한다.		  
			   
		- CGLIB 제약  
			- 클래스 기반 프록시는 상속을 사용하기 때문에 몇가지 제약이 있다.
				- 부모 클래스의 생성자를 체크해야 한다. CGLIB는 자식 클래스를 동적으로 생성하기 때문에 기본 생성자가 필요하다.
				- 클래스에 final 키워드가 붙으면 상속이 불가능하다. CGLIB에서는 예외가 발생한다.
				- 메서드에 final 키워드가 붙으면 해당 메서드를 오버라이딩 할 수 없다. CGLIB에서는 프록시 로직이 동작하지 않는다.
				
	5.8 정리			
		- 남은 문제
			- 인터페이스가 있는 경우에는 JDK 동적 프록시를 적용하고, 그렇지 않은 경우에는 CGLIB를 적용하려면 어떻게 해야할까?
			- 두 기술을 함께 사용할 때 부가 기능을 제공하기 위해서 JDK 동적 프록시가 제공하는
			  InvocationHandler 와 CGLIB가 제공하는 MethodInterceptor 를 각각 중복으로 만들어서 관리해야 할까?
			- 특정 조건에 맞을 때 프록시 로직을 적용하는 기능도 공통으로 제공되었으면?
			
			  
			  		
		  		
			
	  	   
	  	      
	