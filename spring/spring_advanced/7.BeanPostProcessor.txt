7.BeanPostProcessor
	7.1 빈 후처리기 - 소개
	7.2 빈 후처리기 - 예제 코드 1
	7.3 빈 후처리기 - 예제 코드 2
	7.4 빈 후처리기 - 적용
	7.5 빈 후처리기 - 정리
	7.6 스프링이 제공하는 빈 후처리기1
	7.7 스프링이 제고아는 빈 후처리기2
	7.8 하나의 프록시, 여러 Advisor 적용
	7.9 정리
	
	
	7.1 빈 후처리기 - 소개
		- 빈 후처리기 - BeanPostProcessor
			- 스프링이 빈 저장소에 등록할 목적으로 생성한 객체를 빈 저장소에 등록하기 직전에 조작하고 싶다면 
			  빈 후처리기를 사용하면 된다.
			- 객체를 조작할 수도 있고, 완전히 다른 객체로 바꿔치기 하는 것도 가능하다.
			
		- 빈 후처리기 과정	
			1. 생성: 스프링 빈 대상이 되는 객체를 생성한다. ( @Bean , 컴포넌트 스캔 모두 포함)
			2. 전달: 생성된 객체를 빈 저장소에 등록하기 직전에 빈 후처리기에 전달한다.
			3. 후 처리 작업: 빈 후처리기는 전달된 스프링 빈 객체를 조작하거나 다른 객체로 바뀌치기 할 수 있다.
			4. 등록: 빈 후처리기는 빈을 반환한다. 전달 된 빈을 그대로 반환하면 해당 빈이 등록되고, 바꿔치기 하면
			   다른 객체가 빈 저장소에 등록된다.	
	
	7.2 빈 후처리기 - 예제 코드 1
	
	7.3 빈 후처리기 - 예제 코드 2
		- 빈 후처리기를 사용하려면 BeanPostProcessor 인터페이스를 구현하고, 스프링 빈으로 등록하면 된다.
			- postProcessBeforeInitialization : 객체 생성 이후에 @PostConstruct 같은 초기화가 발생하기
			  전에 호출되는 포스트 프로세서이다.
			- postProcessAfterInitialization : 객체 생성 이후에 @PostConstruct 같은 초기화가 발생한
			  다음에 호출되는 포스트 프로세서이다.
		
		- 인터페이스인 BeanPostProcessor 를 구현하고, 스프링 빈으로 등록하면 스프링 컨테이너가 빈 후처리기로 인식하고 동작한다.
		
		- 정리
			- 빈 후처리기는 빈을 조작하고 변경할 수 있는 후킹 포인트이다.
			  이것은 빈 객체를 조작하거나 심지어 다른 객체로 바꾸어 버릴 수 있을 정도로 막강하다.
			  여기서 조작이라는 것은 해당 객체의 특정 메서드를 호출하는 것을 뜻한다.
			  일반적으로 스프링 컨테이너가 등록하는, 특히 컴포넌트 스캔의 대상이 되는 빈들은 중간에 조작할 방법이
			  없는데, 빈 후처리기를 사용하면 개발자가 등록하는 모든 빈을 중간에 조작할 수 있다. 이 말은 빈 객체를
			  프록시로 교체하는 것도 가능하다는 뜻이다.
		
		* @PostConstruct의 비밀	  
			- @PostConstruct 는 스프링 빈 생성 이후에 빈을 초기화 하는 역할을 한다. 그런데 생각해보면 빈의 초기화
			  라는 것이 단순히 @PostConstruct 애노테이션이 붙은 초기화 메서드를 한번 호출만 하면 된다. 쉽게
			  이야기해서 생성된 빈을 한번 조작하는 것이다.
			  따라서 빈을 조작하는 행위를 하는 적절한 빈 후처리기가 있으면 될 것 같다.
			  스프링은 CommonAnnotationBeanPostProcessor 라는 빈 후처리기를 자동으로 등록하는데, 여기에서
			  @PostConstruct 애노테이션이 붙은 메서드를 호출한다. 따라서 스프링 스스로도 스프링 내부의 기능을
			  확장하기 위해 빈 후처리기를 사용한다.
			  
	7.4 빈 후처리기 - 적용		  
		- 빈 후처리기를 사용해서 실제 객체 대신 프록시를 스프링 빈으로 등록해보자.
		  이렇게 하면 수동으로 등록하는 빈은 물론이고, 컴포넌트 스캔을 사용하는 빈까지 모두 프록시를 적용할 수 있다.
		  더 나아가서 설정 파일에 있는 수 많은 프록시 생성 코드도 한번에 제거할 수 있다.		  	  
			  
		- PackageLogTraceProxyPostProcessor 는 원본 객체를 프록시 객체로 변환하는 역할을 한다. 이때
		  프록시 팩토리를 사용하는데, 프록시 팩토리는 advisor 가 필요하기 때문에 이 부분은 외부에서 주입 받도록 했다.
		- 모든 스프링 빈들에 프록시를 적용할 필요는 없다. 여기서는 특정 패키지와 그 하위에 위치한 스프링 빈들만
		  프록시를 적용한다. 여기서는 hello.proxy.app 과 관련된 부분에만 적용하면 된다. 다른 패키지의
		  객체들은 원본 객체를 그대로 반환한다.
		- 프록시 적용 대상의 반환 값을 보면 원본 객체 대신에 프록시 객체를 반환한다. 따라서 스프링 컨테이너에
		  원본 객체 대신에 프록시 객체가 스프링 빈으로 등록된다. 원본 객체는 스프링 빈으로 등록되지 않는다.
		  
		- @Bean logTraceProxyPostProcessor() : 특정 패키지를 기준으로 프록시를 생성하는 빈 후처리기를
		  스프링 빈으로 등록한다. 빈 후처리기는 스프링 빈으로만 등록하면 자동으로 동작한다. 여기에 프록시를
		  적용할 패키지 정보( hello.proxy.app )와 어드바이저( getAdvisor(logTrace) )를 넘겨준다.  
		- 이제 프록시를 생성하는 코드가 설정 파일에는 필요 없다. 순수한 빈 등록만 고민하면 된다. 프록시를
		  생성하고 프록시를 스프링 빈으로 등록하는 것은 빈 후처리기가 모두 처리해준다.
		  
	7.5 빈 후처리기 - 정리	  
		- 빈 후처리기 덕분에 프록시를 생성하는 부분을 하나로 집중할 수 있다. 그리고 컴포넌트 스캔처럼 스프링이
		  직접 대상을 빈으로 등록하는 경우에도 중간에 빈 등록 과정을 가로채서 원본 대신에 프록시를 스프링 빈으로 등록할 수 있다.
		  덕분에 애플리케이션에 수 많은 스프링 빈이 추가되어도 프록시와 관련된 코드는 전혀 변경하지 않아도 된다. 
		  그리고 컴포넌트 스캔을 사용해도 프록시가 모두 적용된다.
			    	  
		- 프록시의 적용 대상 여부를 여기서는 간단히 패키지를 기준으로 설정했다. 그런데 잘 생각해보면
		  포인트컷을 사용하면 더 깔끔할 것 같다.
			 1. 프록시 적용 대상 여부를 체크해서 꼭 필요한 곳에만 프록시를 적용한다. (빈 후처리기 - 자동 프록시 생성)
			 2. 프록시의 어떤 메서드가 호출 되었을 때 어드바이스를 적용할 지 판단한다. (프록시 내부)
		  	  
	7.6 스프링이 제공하는 빈 후처리기1
		- build.gradle - 추가
			- implementation 'org.springframework.boot:spring-boot-starter-aop'
			- 이 라이브러리를 추가하면 aspectjweaver 라는 aspectJ 관련 라이브러리를 등록하고, 스프링 부트가
			  AOP 관련 클래스를 자동으로 스프링 빈에 등록한다. 스프링 부트가 없던 시절에는
			  @EnableAspectJAutoProxy 를 직접 사용해야 했는데, 이 부분을 스프링 부트가 자동으로 처리해준다.
			  
		- 자동 프록시 생성기 - AutoProxyCreator
			- 앞서 이야기한 스프링 부트 자동 설정으로 AnnotationAwareAspectJAutoProxyCreator 라는 빈
			  후처리기가 스프링 빈에 자동으로 등록된다.
			- 이름 그대로 자동으로 프록시를 생성해주는 빈 후처리기이다.
			- 이 빈 후처리기는 스프링 빈으로 등록된 Advisor 들을 자동으로 찾아서 프록시가 필요한 곳에 자동으로
			  프록시를 적용해준다.
			- Advisor 안에는 Pointcut 과 Advice 가 이미 모두 포함되어 있다. 따라서 Advisor 만 알고 있으면 그
			  안에 있는 Pointcut 으로 어떤 스프링 빈에 프록시를 적용해야 할지 알 수 있다. 그리고 Advice 로 부가
			  기능을 적용하면 된다.  
			  
			- AnnotationAwareAspectJAutoProxyCreator 는 @AspectJ와 관련된 AOP 기능도 자동으로 찾아서 처리해준다.
			- Advisor 는 물론이고, @Aspect 도 자동으로 인식해서 프록시를 만들고 AOP를 적용해준다.
			
		- 자동 프록시 생성기의 작동 과정을 알아보자
			1. 생성: 스프링이 스프링 빈 대상이 되는 객체를 생성한다. ( @Bean , 컴포넌트 스캔 모두 포함)
			2. 전달: 생성된 객체를 빈 저장소에 등록하기 직전에 빈 후처리기에 전달한다.
			3. 모든 Advisor 빈 조회: 자동 프록시 생성기 - 빈 후처리기는 스프링 컨테이너에서 모든 Advisor 를 조회한다.
			4. 프록시 적용 대상 체크: 앞서 조회한 Advisor 에 포함되어 있는 포인트컷을 사용해서 해당 객체가
			   프록시를 적용할 대상인지 아닌지 판단한다. 이때 객체의 클래스 정보는 물론이고, 해당 객체의 모든
			   메서드를 포인트컷에 하나하나 모두 매칭해본다. 그래서 조건이 하나라도 만족하면 프록시 적용 대상이
			   된다. 예를 들어서 10개의 메서드 중에 하나만 포인트컷 조건에 만족해도 프록시 적용 대상이 된다.
			5. 프록시 생성: 프록시 적용 대상이면 프록시를 생성하고 반환해서 프록시를 스프링 빈으로 등록한다. 만약
			   프록시 적용 대상이 아니라면 원본 객체를 반환해서 원본 객체를 스프링 빈으로 등록한다.
			6. 빈 등록: 반환된 객체는 스프링 빈으로 등록된다.	    
			  
		- 중요: 포인트컷은 2가지에 사용된다.	  
			1. 프록시 적용 여부 판단 - 생성 단계
				- 자동 프록시 생성기는 포인트컷을 사용해서 해당 빈이 프록시를 생성할 필요가 있는지 없는지 체크한다.
				- 클래스 + 메서드 조건을 모두 비교한다. 이때 모든 메서드를 체크하는데, 포인트컷 조건에 하나하나
				  매칭해본다. 만약 조건에 맞는 것이 하나라도 있으면 프록시를 생성한다.
				  예) orderControllerV1 은 request() , noLog() 가 있다. 여기에서 request() 가 조건에
				  만족하므로 프록시를 생성한다.
				- 만약 조건에 맞는 것이 하나도 없으면 프록시를 생성할 필요가 없으므로 프록시를 생성하지 않는다.	  
			
			2. 어드바이스 적용 여부 판단 - 사용 단계
				- 프록시가 호출되었을 때 부가 기능인 어드바이스를 적용할지 말지 포인트컷을 보고 판단한다.
				- 앞서 설명한 예에서 orderControllerV1 은 이미 프록시가 걸려있다.
				- orderControllerV1 의 request() 는 현재 포인트컷 조건에 만족하므로 프록시는 어드바이스를
				  먼저 호출하고, target 을 호출한다.
				- orderControllerV1 의 noLog() 는 현재 포인트컷 조건에 만족하지 않으므로 어드바이스를
				  호출하지 않고 바로 target 만 호출한다.  
			  
		- 프록시를 모든 곳에 생성하는 것은 비용 낭비이다. 꼭 필요한 곳에 최소한의 프록시를 적용해야 한다. 
		  그래서 자동 프록시 생성기는 모든 스프링 빈에 프록시를 적용하는 것이 아니라 포인트컷으로 한번
		  필터링해서 어드바이스가 사용될 가능성이 있는 곳에만 프록시를 생성한다.
		  
	7.7 스프링이 제고아는 빈 후처리기2	  
		- 애플리케이션 서버를 실행해보면, 스프링이 초기화 되면서 기대하지 않은 이러한 로그들이 올라온다. 그
		  이유는 지금 사용한 포인트컷이 단순히 메서드 이름에 "request*", "order*", "save*" 만 포함되어
		  있으면 매칭 된다고 판단하기 때문이다.
		  결국 스프링이 내부에서 사용하는 빈에도 메서드 이름에 request 라는 단어만 들어가 있으면 프록시가
		  만들어지고 되고, 어드바이스도 적용되는 것이다.
		- 결론적으로 패키지에 메서드 이름까지 함께 지정할 수 있는 매우 정밀한 포인트컷이 필요하다.	  	  
	
		- AspectJExpressionPointcut
			- AspectJ라는 AOP에 특화된 포인트컷 표현식을 적용할 수 있다.
				- * : 모든 반환 타입
				- hello.proxy.app.. : 해당 패키지와 그 하위 패키지
				- *(..) : * 모든 메서드 이름, (..) 파라미터는 상관 없음  
			  
	7.8 하나의 프록시, 여러 Advisor 적용		  
		- 프록시 자동 생성기 상황별 정리		  
			- advisor1 의 포인트컷만 만족 프록시1개 생성, 프록시에 advisor1 만 포함
			- advisor1 , advisor2 의 포인트컷을 모두 만족 프록시1개 생성, 프록시에 advisor1 , advisor2 모두 포함
			- advisor1 , advisor2 의 포인트컷을 모두 만족하지 않음 프록시가 생성되지 않음
			
	7.9 정리		
		- 자동 프록시 생성기인 AnnotationAwareAspectJAutoProxyCreator 덕분에 개발자는 매우 편리하게
		  프록시를 적용할 수 있다. 이제 Advisor 만 스프링 빈으로 등록하면 된다.			  
			  