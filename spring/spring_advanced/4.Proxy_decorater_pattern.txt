4.프록시 패턴과 데코레이터 패턴
    4.1 프로젝트 생성
    4.2 예제 프로젝트 만들기 v1
    4.3 예제 프로젝트 만들기 v2
    4.4 예제 프로젝트 만들기 v3
    4.5 요구사항 추가
    4.6 프록시, 프록시 패턴, 데코레이터 패턴 - 소개
    4.7 프록시 패턴 - 예제 코드1
    4.8 프록시 패턴 - 예제 코드2
    4.9 데코레이터 패턴 - 예제 코드1
    4.10 데코레이터 패턴 - 예제 코드2
    4.11 데코레이터 패턴 - 예제 코드3
    4.12 프록시 패턴과 데코레이터 패턴 정리
    4.13 인터페이스 기반 프록시 - 적용
    4.14 구체 클래스 기반 프록시 - 예제1
    4.15 구체 클래스 기반 프록시 - 예제2
    4.16 구체 클래스 기반 프록시 - 적용
    4.17 인터페이스 기반 프록시와 클래스 기반 프록시
    4.18 프록시 패턴과 데코레이터 패턴 - 정리



    4.1 프로젝트 생성
    4.2 예제 프로젝트 만들기 v1
        - @Import(AppV1Config.class) : 클래스를 스프링 빈으로 등록한다. 여기서는 AppV1Config.class 를
          스프링 빈으로 등록한다. 일반적으로 @Configuration 같은 설정 파일을 등록할 때 사용하지만, 스프링
          빈을 등록할 때도 사용할 수 있다.

    4.3 예제 프로젝트 만들기 v2
    4.4 예제 프로젝트 만들기 v3
    4.5 요구사항 추가
        - 하지만 이 요구사항을 만족하기 위해서 기존 코드를 많이 수정해야 한다. 코드 수정을 최소화 하기 위해
          템플릿 메서드 패턴과 콜백 패턴도 사용했지만, 결과적으로 로그를 남기고 싶은 클래스가 수백개라면
          수백개의 클래스를 모두 고쳐야한다. 로그를 남길 때 기존 원본 코드를 변경해야 한다는 사실 그 자체가
          개발자에게는 가장 큰 문제로 남는다.

    4.6 프록시, 프록시 패턴, 데코레이터 패턴 - 소개
        - 클라이언트는 서버에 필요한 것을 요청하고, 서버는 클라이언트의 요청을 처리하는 것이다.
        - 이 개념을 우리가 익숙한 컴퓨터 네트워크에 도입하면 클라이언트는 웹 브라우저가 되고, 요청을 처리하는
          서버는 웹 서버가 된다.
        - 이 개념을 객체에 도입하면, 요청하는 객체는 클라이언트가 되고, 요청을 처리하는 객체는 서버가 된다.

        - 클라이언트가 요청한 결과를 서버에 직접 요청하는 것이 아니라 어떤 대리자를 통해서 대신
          간접적으로 서버에 요청할 수 있다. 예를 들어서 내가 직접 마트에서 장을 볼 수도 있지만, 누군가에게 대신
          장을 봐달라고 부탁할 수도 있다.
          여기서 대신 장을 보는 대리자를 영어로 프록시(Proxy)라 한다.

        - 엄마에게 라면을 사달라고 부탁 했는데, 엄마는 그 라면은 이미 집에 있다고 할 수도 있다. 그러면 기대한 것
          보다 더 빨리 라면을 먹을 수 있다. (접근 제어, 캐싱)

        - 아버지께 자동차 주유를 부탁했는데, 아버지가 주유 뿐만 아니라 세차까지 하고 왔다. 클라이언트가 기대한
          것 외에 세차라는 부가 기능까지 얻게 되었다. (부가 기능 추가)

        - 그리고 대리자가 또 다른 대리자를 부를 수도 있다. 예를 들어서 내가 동생에게 라면을 사달라고 했는데,
          동생은 또 다른 누군가에게 라면을 사달라고 다시 요청할 수도 있다. 중요한 점은 클라이언트는 대리자를
          통해서 요청했기 때문에 그 이후 과정은 모른다는 점이다. 동생을 통해서 라면이 나에게 도착하기만 하면
          된다. (프록시 체인)

        - 객체에서 프록시가 되려면, 클라이언트는 서버에게 요청을 한 것인지, 프록시에게 요청을 한 것인지 조차
          몰라야 한다.
          쉽게 이야기해서 서버와 프록시는 같은 인터페이스를 사용해야 한다. 그리고 클라이언트가 사용하는 서버
          객체를 프록시 객체로 변경해도 클라이언트 코드를 변경하지 않고 동작할 수 있어야 한다.
          DI를 사용하면 클라이언트 코드의 변경 없이 유연하게 프록시를 주입할 수 있다.


        - 프록시의 주요 기능
            - 접근 제어
                - 권한에 따른 접근 차단
                - 캐싱
                - 지연 로딩
            - 부가 기능 추가
                - 원래 서버가 제공하는 기능에 더해서 부가 기능을 수행한다.
                    - 예) 요청 값이나, 응답 값을 중간에 변형한다.
                    - 예) 실행 시간을 측정해서 추가 로그를 남긴다.

        - GOF 디자인 패턴
            - 둘다 프록시를 사용하는 방법이지만 GOF 디자인 패턴에서는 이 둘을 의도(intent)에 따라서 프록시
              패턴과 데코레이터 패턴으로 구분한다.
                - 프록시 패턴: 접근 제어가 목적
                - 데코레이터 패턴: 새로운 기능 추가가 목적

        - 참고: 프록시라는 개념은 클라이언트 서버라는 큰 개념안에서 자연스럽게 발생할 수 있다. 프록시는
          객체안에서의 개념도 있고, 웹 서버에서의 프록시도 있다. 객체안에서 객체로 구현되어있는가, 웹 서버로
          구현되어 있는가 처럼 규모의 차이가 있을 뿐 근본적인 역할은 같다.

    4.7 프록시 패턴 - 예제 코드1
    4.8 프록시 패턴 - 예제 코드2
        - 정리
          프록시 패턴의 핵심은 RealSubject 코드와 클라이언트 코드를 전혀 변경하지 않고, 프록시를 도입해서
          접근 제어를 했다는 점이다.
          그리고 클라이언트 코드의 변경 없이 자유롭게 프록시를 넣고 뺄 수 있다. 실제 클라이언트 입장에서는
          프록시 객체가 주입되었는지, 실제 객체가 주입되었는지 알지 못한다.

    4.9 데코레이터 패턴 - 예제 코드1
    4.10 데코레이터 패턴 - 예제 코드2
    4.11 데코레이터 패턴 - 예제 코드3
    4.12 프록시 패턴과 데코레이터 패턴 정리
        - 프록시 패턴 vs 데코레이터 패턴
            - Decorator 라는 추상 클래스를 만들어야 데코레이터 패턴일까?
            - 프록시 패턴과 데코레이터 패턴은 그 모양이 거의 비슷한 것 같은데?

        - 의도(intent)
          사실 프록시 패턴과 데코레이터 패턴은 그 모양이 거의 같고, 상황에 따라 정말 똑같을 때도 있다. 그러면
          둘을 어떻게 구분하는 것일까?
          디자인 패턴에서 중요한 것은 해당 패턴의 겉모양이 아니라 그 패턴을 만든 의도가 더 중요하다. 따라서
          의도에 따라 패턴을 구분한다.

            - 프록시 패턴의 의도: 다른 개체에 대한 접근을 제어하기 위해 대리자를 제공
            - 데코레이터 패턴의 의도: 객체에 추가 책임(기능)을 동적으로 추가하고, 기능 확장을 위한 유연한 대안 제공

    4.13 인터페이스 기반 프록시 - 적용
        - V1 프록시 런타임 객체 의존 관계 설정
            - 프록시를 생성하고 프록시를 실제 스프링 빈 대신 등록한다. 실제 객체는 스프링 빈으로 등록하지 않는다.
                - proxy -> target
                - orderServiceInterfaceProxy -> orderServiceV1Impl

            - 스프링 빈으로 실제 객체 대신에 프록시 객체를 등록했기 때문에 앞으로 스프링 빈을 주입 받으면 실제 객체
              대신에 프록시 객체가 주입된다.

            - 실제 객체가 스프링 빈으로 등록되지 않는다고 해서 사라지는 것은 아니다. 프록시 객체가 실제 객체를
              참조하기 때문에 프록시를 통해서 실제 객체를 호출할 수 있다. 쉽게 이야기해서 프록시 객체 안에 실제
              객체가 있는 것이다.

            - 프록시 객체는 스프링 컨테이너가 관리하고 자바 힙 메모리에도 올라간다. 반면에 실제 객체는 자바 힙
              메모리에는 올라가지만 스프링 컨테이너가 관리하지는 않는다.

    4.14 구체 클래스 기반 프록시 - 예제1
    4.15 구체 클래스 기반 프록시 - 예제2
        - 자바 언어에서 다형성은 인터페이스나 클래스를 구분하지 않고 모두 적용된다. 해당 타입과 그 타입의
          하위 타입은 모두 다형성의 대상이 된다. 자바 언어의 너무 기본적인 내용을 이야기했지만, 인터페이스가
          없어도 프록시가 가능하다는 것을 확실하게 집고 넘어갈 필요가 있어서 자세히 설명했다.

    4.16 구체 클래스 기반 프록시 - 적용
        - 클래스 기반 프록시의 단점
          super(null) : OrderServiceV2 : 자바 기본 문법에 의해 자식 클래스를 생성할 때는 항상 super() 로
          부모 클래스의 생성자를 호출해야 한다. 이 부분을 생략하면 기본 생성자가 호출된다. 그런데 부모 클래스인
          OrderServiceV2 는 기본 생성자가 없고, 생성자에서 파라미터 1개를 필수로 받는다. 따라서 파라미터를
          넣어서 super(..) 를 호출해야 한다.
          프록시는 부모 객체의 기능을 사용하지 않기 때문에 super(null) 을 입력해도 된다.
          인터페이스 기반 프록시는 이런 고민을 하지 않아도 된다.

    4.17 인터페이스 기반 프록시와 클래스 기반 프록시
        - 인터페이스 기반 프록시 vs 클래스 기반 프록시
            - 인터페이스가 없어도 클래스 기반으로 프록시를 생성할 수 있다.
            - 클래스 기반 프록시는 해당 클래스에만 적용할 수 있다. 인터페이스 기반 프록시는 인터페이스만 같으면
              모든 곳에 적용할 수 있다.

            - 클래스 기반 프록시는 상속을 사용하기 때문에 몇가지 제약이 있다.
              부모 클래스의 생성자를 호출해야 한다.(앞서 본 예제)
              클래스에 final 키워드가 붙으면 상속이 불가능하다.
              메서드에 final 키워드가 붙으면 해당 메서드를 오버라이딩 할 수 없다.

            - 인터페이스 기반의 프록시는 상속이라는
              제약에서 자유롭다. 프로그래밍 관점에서도 인터페이스를 사용하는 것이 역할과 구현을 명확하게 나누기
              때문에 더 좋다.
              인터페이스 기반 프록시의 단점은 인터페이스가 필요하다는 그 자체이다. 인터페이스가 없으면 인터페이스
              기반 프록시를 만들 수 없다.

            - 인터페이스 기반 프록시는 캐스팅 관련해서 단점이 있는데, 이 내용은 강의 뒷부문에서 설명한다.
            - 인터페이스를 도입하는 것은 구현을 변경할 가능성이 있을 때 효과적인데, 구현을 변경할 가능성이 거의
              없는 코드에 무작정 인터페이스를 사용하는 것은 번거롭고 그렇게 실용적이지 않다. 이런곳에는 실용적인
              관점에서 인터페이스를 사용하지 않고 구체 클래스를 바로 사용하는 것이 좋다 생각한다. (물론
              인터페이스를 도입하는 다양한 이유가 있다. 여기서 핵심은 인터페이스가 항상 필요하지는 않다는 것이다.)

            - 너무 많은 프록시 클래스
              지금까지 프록시를 사용해서 기존 코드를 변경하지 않고, 로그 추적기라는 부가 기능을 적용할 수 있었다.
              그런데 문제는 프록시 클래스를 너무 많이 만들어야 한다는 점이다. 잘 보면 프록시 클래스가 하는 일은
              LogTrace 를 사용하는 것인데, 그 로직이 모두 똑같다. 대상 클래스만 다를 뿐이다. 만약 적용해야 하는
              대상 클래스가 100개라면 프록시 클래스도 100개를 만들어야한다.
              프록시 클래스를 하나만 만들어서 모든 곳에 적용하는 방법은 없을까?
              바로 다음에 설명할 동적 프록시 기술이 이 문제를 해결해준다.







