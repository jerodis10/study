3.서블릿, JSP, MVC 패턴
    3.1 서블릿으로 회원 관리 웹 애플리케이션 만들기
        - 서블릿 덕분에 동적으로 원하는 HTML 을 마음껏 만들 수 있다.
        - HTML 문서에서 필요한 곳만 코드를 적용해서 동적으로 변경 -> 템플릿 엔진이 나온 이유
        - 템플릿 엔진: JSP, Thymeleaf, Freemarker, Velocity

    3.2 JSP 로 회원 관리 웹 애플리케이션 만들기
        - 서블릿과 JSP 의 한계
            - 서블릿으로 개발할 때는 뷰(View)화면을 위한 HTML을 만드는 작업이 자바 코드에 섞여서 지저분하고 복잡했다.
              JSP 를 사용한 덕분에 뷰를 생성하는 HTML 작업을 깔끔하게 가져가고, 중간중간 동적으로 변경이 필요한
              부분에만 자바 코드를 적용했다. 그런데 이렇게 해도 해결되지 않는 몇가지 고민이 남는다.
              회원 저장 JSP 를 보자. 코드의 상위 절반은 회원을 저장하기 위한 비즈니스 로직이고, 나머지 하위 절반만
              결과를 HTML 로 보여주기 위한 뷰 영역이다. 회원 목록의 경우에도 마찬가지다.
              JAVA 코드, 데이터를 조회하는 리포지토리 등등 다양한 코드가 모두 JSP 에 노출되어 있다.

        - MVC 패턴의 등장
            - 비즈니스 로직은 서블릿처럼 다른 곳에서 처리하고, JSP 는 목적에 맞게 HTML 로 화면을 그리는 일에 집중.

    3.3 MVC 패턴 - 개요
        - 너무 많은 역할
            - 하나의 서블릿이나 JSP 만으로 비즈니스 로직과 뷰 렌더링까지 모두 처리하게 되면, 너무 많은 역할을
              하게되고, 결과적으로 유지보수가 어려워진다. 비즈니스 로직을 호출하는 부분에 변경이 발생해도 해당
              코드를 손대야 하고, UI를 변경할 일이 있어도 비즈니스 로직이 함께 있는 해당 파일을 수정해야 한다.

        - 변경의 라이프 사이클
            - 사실 이게 정말 중요한데, 진짜 문제는 둘 사이에 변경의 라이프 사이클이 다르다는 점이다. 예를 들어서 UI
              를 일부 수정하는 일과 비즈니스 로직을 수정하는 일은 각각 다르게 발생할 가능성이 매우 높고 대부분
              서로에게 영향을 주지 않는다. 이렇게 변경의 라이프 사이클이 다른 부분을 하나의 코드로 관리하는 것은
              유지보수하기 좋지 않다. (물론 UI가 많이 변하면 함께 변경될 가능성도 있다.)

        - 기능 특화
            - 특히 JSP 같은 뷰 템플릿은 화면을 렌더링 하는데 최적화 되어 있기 때문에 이 부분의 업무만 담당하는 것이 가장 효과적이다.

        - Model View Controller
            - MVC 패턴은 지금까지 학습한 것 처럼 하나의 서블릿이나, JSP 로 처리하던 것을 컨트롤러(Controller)와
              뷰(View)라는 영역으로 서로 역할을 나눈 것을 말한다. 웹 애플리케이션은 보통 이 MVC 패턴을 사용한다.

            - 컨트롤러
                - HTTP 요청을 받아서 파라미터를 검증하고, 비즈니스 로직을 실행한다. 그리고 뷰에 전달할 결과 데이터를 조회해서 모델에 담는다.

            - 모델
                - 뷰에 출력할 데이터를 담아둔다. 뷰가 필요한 데이터를 모두 모델에 담아서 전달해주는 덕분에 뷰는
                  비즈니스 로직이나 데이터 접근을 몰라도 되고, 화면을 렌더링 하는 일에 집중할 수 있다.

            - 뷰
                - 모델에 담겨있는 데이터를 사용해서 화면을 그리는 일에 집중한다. 여기서는 HTML 을 생성하는 부분을 말한다.

            * 컨트롤러에 비즈니스 로직을 둘 수도 있지만, 이렇게 되면 컨트롤러가 너무 많은 역할을 담당한다. 그래서
              일반적으로 비즈니스 로직은 서비스(Service)라는 계층을 별도로 만들어서 처리한다. 그리고 컨트롤러는
              비즈니스 로직이 있는 서비스를 호출하는 담당한다.

    3.5 MVC 패턴 - 적용
        - dispatcher.foward()
            - 다른 서블릿이나 JSP 로 이동할 수 있는 기능이다. 서버 내부에서 다시 호출이 발생한다.
        - /WEB-INF
            - 이 경로 안에 JSP 가 있으면 외부에서 직접 JSP 를 호출할 수 없다. 우리가 기대하는 것은 항상
              컨트롤러를 통해서 JSP 를 호출하는 것이다.
        - redirect vs forward
            - 리다이렉트는 실제 클라이언트(웹 브라우저)에 응답이 나갔다가, 클라이언트가 redirect 경로로 다시 요청한다. 따라서 클라이언트가
              인지할 수 있고, URL 경로도 실제로 반영된다. 반면에 포워드는 서버 내부에서 일어나는 호출이기 때문에
              클라이언트가 전혀 인지하지 못한다.

    3.6 MVC 패턴 - 한계
        - 포워드 중복
            - RequestDispatcher dispatcher = request.getRequestDispatcher(viewPath);
              dispatcher.forward(request, response);

        - ViewPath 중복
            - String viewPath = "/WEB-INF/views/new-form.jsp";

        - 사용하지 않는 코드
            - 다음 코드를 사용할 때도 있고, 사용하지 않을 때도 있다.
            - HttpServletRequest request, HttpServletResponse response
            - 이런 HttpServletRequest , HttpServletResponse 를 사용하는 코드는 테스트 케이스를 작성하기도 어렵다.

        - 공통 처리가 어렵다.
            - 기능이 복잡해질 수 록 컨트롤러에서 공통으로 처리해야 하는 부분이 점점 더 많이 증가할 것이다. 단순히
              공통 기능을 메서드로 뽑으면 될 것 같지만, 결과적으로 해당 메서드를 항상 호출해야 하고, 실수로 호출하지
              않으면 문제가 될 것이다. 그리고 호출하는 것 자체도 중복이다.

        => 정리하면 공통 처리가 어렵다는 문제가 있다.
            - 이 문제를 해결하려면 컨트롤러 호출 전에 먼저 공통 기능을 처리해야 한다. 소위 수문장 역할을 하는 기능이
              필요하다. 프론트 컨트롤러(Front Controller) 패턴을 도입하면 이런 문제를 깔끔하게 해결할 수 있다.
              (입구를 하나로!)
              스프링 MVC 의 핵심도 바로 이 프론트 컨트롤러에 있다.
