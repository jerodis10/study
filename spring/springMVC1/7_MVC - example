7.스프링 MVC - 웹 페이지 만들기
    7.1 프로젝트 생성
    7.2 요구사항 분석
    7.3 상품 도메인 개발

    7.4 상품 서비스 HTML
        - 이렇게 정적 리소스가 공개되는 /resources/static 폴더에 HTML 을 넣어두면, 실제 서비스에서도
          공개된다. 서비스를 운영한다면 지금처럼 공개할 필요없는 HTML 을 두는 것은 주의하자.

    7.5 상품 목록 - 타임리프
        - @RequiredArgsConstructor
            - final 이 붙은 멤버변수만 사용해서 생성자를 자동으로 만들어준다.
        - 생성자가 딱 1개만 있으면 스프링이 해당 생성자에 @Autowired 로 의존관계를 주입해준다.

        - 타임리프 핵심
          핵심은 th:xxx 가 붙은 부분은 서버사이드에서 렌더링 되고, 기존 것을 대체한다. th:xxx 이 없으면 기존
          html 의 xxx 속성이 그대로 사용된다.
          HTML 을 파일로 직접 열었을 때, th:xxx 가 있어도 웹 브라우저는 th: 속성을 알지 못하므로 무시한다.
          따라서 HTML 을 파일 보기를 유지하면서 템플릿 기능도 할 수 있다.

        - URL 링크 표현식 - @{...},
          th:href="@{/css/bootstrap.min.css}"
          @{...} : 타임리프는 URL 링크를 사용하는 경우 @{...} 를 사용한다. 이것을 URL 링크 표현식이라 한다.
          URL 링크 표현식을 사용하면 서블릿 컨텍스트를 자동으로 포함한다.

        - 속성 변경 - th:onclick
          onclick="location.href='addForm.html'"
          th:onclick="|location.href='@{/basic/items/add}'|"

        - 리터럴 대체 - |...|
            - |...| :이렇게 사용한다.
            - 타임리프에서 문자와 표현식 등은 분리되어 있기 때문에 더해서 사용해야 한다.
                - <span th:text="'Welcome to our application, ' + ${user.name} + '!'">
            - 다음과 같이 리터럴 대체 문법을 사용하면, 더하기 없이 편리하게 사용할 수 있다.
                - <span th:text="|Welcome to our application, ${user.name}!|">
            - 결과를 다음과 같이 만들어야 하는데
                - location.href='/basic/items/add'
            - 그냥 사용하면 문자와 표현식을 각각 따로 더해서 사용해야 하므로 다음과 같이 복잡해진다.
                - th:onclick="'location.href=' + '\'' + @{/basic/items/add} + '\''"
            - 리터럴 대체 문법을 사용하면 다음과 같이 편리하게 사용할 수 있다.
                - th:onclick="|location.href='@{/basic/items/add}'|"

        - 반복 출력 - th:each
            - <tr th:each="item : ${items}">
            - 반복은 th:each 를 사용한다. 이렇게 하면 모델에 포함된 items 컬렉션 데이터가 item 변수에 하나씩
              포함되고, 반복문 안에서 item 변수를 사용할 수 있다.
            - 컬렉션의 수 만큼 <tr>..</tr> 이 하위 테그를 포함해서 생성된다.

        - 변수 표현식 - ${...}
          <td th:text="${item.price}">10000</td>
          모델에 포함된 값이나, 타임리프 변수로 선언한 값을 조회할 수 있다.
          프로퍼티 접근법을 사용한다. ( item.getPrice() )

        - 내용 변경 - th:text
          <td th:text="${item.price}">10000</td>
          내용의 값을 th:text 의 값으로 변경한다.
          여기서는 10000을 ${item.price} 의 값으로 변경한다.

        - URL 링크 표현식2 - @{...},
          th:href="@{/basic/items/{itemId}(itemId=${item.id})}"
          상품 ID를 선택하는 링크를 확인해보자.
          URL 링크 표현식을 사용하면 경로를 템플릿처럼 편리하게 사용할 수 있다.
          경로 변수( {itemId} ) 뿐만 아니라 쿼리 파라미터도 생성한다.
          예) th:href="@{/basic/items/{itemId}(itemId=${item.id}, query='test')}"
            생성 링크: http://localhost:8080/basic/items/1?query=test

        - URL 링크 간단히
          th:href="@{|/basic/items/${item.id}|}"
          상품 이름을 선택하는 링크를 확인해보자.
          리터럴 대체 문법을 활용해서 간단히 사용할 수도 있다.

        - 타임리프는 순수 HTML 을 파일을 웹 브라우저에서 열어도 내용을 확인할 수 있고, 서버를 통해 뷰 템플릿을
          거치면 동적으로 변경된 결과를 확인할 수 있다. JSP 를 생각해보면, JSP 파일은 웹 브라우저에서 그냥 열면
          JSP 소스코드와 HTML 이 뒤죽박죽 되어서 정상적인 확인이 불가능하다. 오직 서버를 통해서 JSP 를 열어야 한다.
          이렇게 순수 HTML 을 그대로 유지하면서 뷰 템플릿도 사용할 수 있는 타임리프의 특징을 네츄럴 템플릿 (natural templates)이라 한다.

    7.6 상품 상세
    7.7 상품 등록 폼
        - 속성 변경 th:action
            - HTML form 에서 action 에 값이 없으면 현재 URL 에 데이터를 전송한다.
            - 상품 등록 폼의 URL 과 실제 상품 등록을 처리하는 URL 을 똑같이 맞추고 HTTP 메서드로 두 기능을 구분한다.
                - 상품 등록 폼: GET /basic/items/add
                - 상품 등록 처리: POST /basic/items/add
            - 이렇게 하면 하나의 URL 로 등록 폼과, 등록 처리를 깔끔하게 처리할 수 있다.

    7.8 상품 등록 처리
        - @ModelAttribute 의 이름을 생략할 수 있다.
        - @ModelAttribute 의 이름을 생략하면 모델에 저장될 때 클래스명을 사용한다. 이때 클래스의 첫글자만
          소문자로 변경해서 등록한다.

    7.9 상품 수정
        - HTML Form 전송은 PUT, PATCH 를 지원하지 않는다. GET, POST 만 사용할 수 있다.
          PUT, PATCH 는 HTTP API 전송시에 사용
          스프링에서 HTTP POST 로 Form 요청할 때 히든 필드를 통해서 PUT, PATCH 매핑을 사용하는 방법이
          있지만, HTTP 요청상 POST 요청이다.

    7.10 PRG Post/Redirect/Get
        - 웹 브라우저의 새로 고침은 마지막에 서버에 전송한 데이터를 다시 전송한다.
          상품 등록 폼에서 데이터를 입력하고 저장을 선택하면 POST /add + 상품 데이터를 서버로 전송한다.
          이 상태에서 새로 고침을 또 선택하면 마지막에 전송한 POST /add + 상품 데이터를 서버로 다시 전송하게 된다.
          그래서 내용은 같고, ID만 다른 상품 데이터가 계속 쌓이게 된다.

        - 새로 고침 문제를 해결하려면 상품 저장 후에 뷰 템플릿으로 이동하는 것이 아니라, 상품 상세 화면으로
          리다이렉트를 호출해주면 된다.
          웹 브라우저는 리다이렉트의 영향으로 상품 저장 후에 실제 상품 상세 화면으로 다시 이동한다. 따라서
          마지막에 호출한 내용이 상품 상세 화면인 GET /items/{id} 가 되는 것이다.
          이후 새로고침을 해도 상품 상세 화면으로 이동하게 되므로 새로 고침 문제를 해결할 수 있다.

    7.11 RedirectAttribute
        - RedirectAttributes 를 사용하면 URL 인코딩도 해주고, pathVarible, 쿼리 파라미터까지 처리해준다.
        - redirect:/basic/items/{itemId}
          pathVariable 바인딩: {itemId}
          나머지는 쿼리 파라미터로 처리: ?status=true

        - th:if : 해당 조건이 참이면 실행
        - ${param.status} : 타임리프에서 쿼리 파라미터를 편리하게 조회하는 기능
            - 원래는 컨트롤러에서 모델에 직접 담고 값을 꺼내야 한다. 그런데 쿼리 파라미터는 자주 사용해서
               타임리프에서 직접 지원한다.
        - 뷰 템플릿에 메시지를 추가하고 실행해보면 "저장 완료!" 라는 메시지가 나오는 것을 확인할 수 있다. 물론
          상품 목록에서 상품 상세로 이동한 경우에는 해당 메시지가 출력되지 않는다.
