5.스프링 MVC - 구조 이해
    5.1 스프링 MVC 전체 구조
        - HTTP 요청
        1.핸들러 조회
        2.핸들러를 처리할 수 있는 어댑터 조회
        3.handle(handler)
        4.handler 호출
        5.ModelAndView 반환
        6.viewResolver 호출
        7.view 반환
        8.render(model) 호출
        - HTTP 응답

        - DispatcherServlet 서블릿 등록
            - DispatcherServlet 도 부모 클래스에서 HttpServlet 을 상속 받아서 사용하고, 서블릿으로 동작한다.
            - 스프링 부트는 DispatcherServlet 을 서블릿으로 자동으로 등록하면서 모든 경로( urlPatterns="/" )에 대해서 매핑한다.

        - 요청 흐름
            - 서블릿이 호출되면 HttpServlet 이 제공하는 service() 가 호출된다.
            - 스프링 MVC 는 DispatcherServlet 의 부모인 FrameworkServlet 에서 service() 를 오버라이드 해두었다.
            - FrameworkServlet.service()를 시작으로 여러 메서드가 호출되면서 DispatcherServlet.doDispatch()가 호출된다.

        - 동작 순서
            1.핸들러 조회: 핸들러 매핑을 통해 요청 URL 에 매핑된 핸들러(컨트롤러)를 조회한다.
            2.핸들러 어댑터 조회: 핸들러를 실행할 수 있는 핸들러 어댑터를 조회한다.
            3.핸들러 어댑터 실행: 핸들러 어댑터를 실행한다.
            4.핸들러 실행: 핸들러 어댑터가 실제 핸들러를 실행한다.
            5.ModelAndView 반환: 핸들러 어댑터는 핸들러가 반환하는 정보를 ModelAndView 로 변환해서 반환한다.
            6.viewResolver 호출: 뷰 리졸버를 찾고 실행한다. JSP 의 경우: InternalResourceViewResolver 가 자동 등록되고, 사용된다.
            7.View 반환: 뷰 리졸버는 뷰의 논리 이름을 물리 이름으로 바꾸고, 렌더링 역할을 담당하는 뷰 객체를 반환한다.
              JSP 의 경우 InternalResourceView(JstlView) 를 반환하는데, 내부에 forward() 로직이 있다.
            8.뷰 렌더링: 뷰를 통해서 뷰를 렌더링 한다.

        - 인터페이스 살펴보기
            - 스프링 MVC 의 큰 강점은 DispatcherServlet 코드의 변경 없이, 원하는 기능을 변경하거나 확장할 수
              있다는 점이다. 지금까지 설명한 대부분을 확장 가능할 수 있게 인터페이스로 제공한다.
            - 이 인터페이스들만 구현해서 DispatcherServlet 에 등록하면 여러분만의 컨트롤러를 만들 수도 있다.

    5.2 핸들러 매핑과 핸들러 어댑터
        - HandlerMapping(핸들러 매핑)
            - 핸들러 매핑에서 이 컨트롤러를 찾을 수 있어야 한다.
            - 예) 스프링 빈의 이름으로 핸들러를 찾을 수 있는 핸들러 매핑이 필요하다.

        - HandlerAdapter(핸들러 어댑터)
            - 핸들러 매핑을 통해서 찾은 핸들러를 실행할 수 있는 핸들러 어댑터가 필요하다.
            - 예) Controller 인터페이스를 실행할 수 있는 핸들러 어댑터를 찾고 실행해야 한다.

    5.3 뷰 리졸버
        1.핸들러 어댑터 호출
            - 핸들러 어댑터를 통해 new-form 이라는 논리 뷰 이름을 획득한다.

        2.ViewResolver 호출
            - new-form 이라는 뷰 이름으로 viewResolver 를 순서대로 호출한다.
            - BeanNameViewResolver 는 new-form 이라는 이름의 스프링 빈으로 등록된 뷰를 찾아야 하는데 없다.
            - InternalResourceViewResolver 가 호출된다.

    5.4 스프링 MVC - 시작하기
        - @RequestMapping : 요청 정보를 매핑한다. 해당 URL 이 호출되면 이 메서드가 호출된다. 애노테이션을
          기반으로 동작하기 때문에, 메서드의 이름은 임의로 지으면 된다.

        - RequestMappingHandlerMapping 은 스프링 빈 중에서 @RequestMapping 또는 @Controller 가
          클래스 레벨에 붙어 있는 경우에 매핑 정보로 인식한다.

    5.5 스프링 MVC - 컨트롤러 통합
        - @RequestMapping 을 잘 보면 클래스 단위가 아니라 메서드 단위에 적용된 것을 확인할 수 있다. 따라서
          컨트롤러 클래스를 유연하게 하나로 통합할 수 있다.

    5.6 스프링 MVC - 실용적인 방식
        - Model 파라미터
        - ViewName 직접 반환
        - @RequestParam 사용
             - @RequestParam("username") 은 request.getParameter("username") 와 거의 같은 코드
             - 물론 GET 쿼리 파라미터, POST Form 방식을 모두 지원한다.
             - 타입 캐스팅도 자동으로 해준다.

        - @RequestMapping -> @GetMapping, @PostMapping
