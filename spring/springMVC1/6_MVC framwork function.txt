6.스프링 MVC - 기본 기능
    6.1 로깅 간단히 알아보기
        - 스프링 부트 라이브러리를 사용하면 스프링 부트 로깅 라이브러리( spring-boot-starter-logging )가
          함께 포함된다.
        - 스프링 부트 로깅 라이브러리는 기본으로 다음 로깅 라이브러리를 사용한다.
            - SLF4J
            - Logback
        - 로그 라이브러리는 Logback, Log4J, Log4J2 등등 수 많은 라이브러리가 있는데, 그것을 통합해서
          인터페이스로 제공하는 것이 바로 SLF4J 라이브러리다.
          쉽게 이야기해서 SLF4J는 인터페이스이고, 그 구현체로 Logback 같은 로그 라이브러리를 선택하면 된다.
          실무에서는 스프링 부트가 기본으로 제공하는 Logback 을 대부분 사용한다.

        - ex) 2021-08-15 16:02:50.411  INFO 12476 ---
              [nio-8080-exec-1] hello.springmvc.basic.LogTestController  :  info log=Spring
              INFO 12476 -> 프로세스 ID
              [nio-8080-exec-1] -> 실행한 쓰레드

              - 로그가 출력되는 포멧 확인
                - 시간, 로그 레벨, 프로세스 ID, 쓰레드 명, 클래스명, 로그 메시지
              - 로그 레벨 설정을 변경해서 출력 결과를 보자.
                - LEVEL: TRACE > DEBUG > INFO > WARN > ERROR
                - 개발 서버는 debug 출력
                - 운영 서버는 info 출력

        - 로그 레벨 설정
            - application.properties
                - #전체 로그 레벨 설정(기본 info)
                  logging.level.root=info
                - #hello.springmvc 패키지와 그 하위 로그 레벨 설정
                  logging.level.hello.springmvc=debug

        - 올바른 로그 사용법
            - log.debug("data="+data)
                - 로그 출력 레벨을 info 로 설정해도 해당 코드에 있는 "data="+data 가 실제 실행이 되어 버린다.
                - 결과적으로 문자 더하기 연산이 발생한다.
            - log.debug("data={}", data)
            - 로그 출력 레벨을 info 로 설정하면 아무일도 발생하지 않는다. 따라서 앞과 같은 의미없는 연산이
              발생하지 않는다.

        - 로그 사용시 장점
            - 쓰레드 정보, 클래스 이름 같은 부가 정보를 함께 볼 수 있고, 출력 모양을 조정할 수 있다.
            - 로그 레벨에 따라 개발 서버에서는 모든 로그를 출력하고, 운영서버에서는 출력하지 않는 등 로그를 상황에 맞게 조절할 수 있다.
            - 시스템 아웃 콘솔에만 출력하는 것이 아니라, 파일이나 네트워크 등, 로그를 별도의 위치에 남길 수 있다.
              특히 파일로 남길 때는 일별, 특정 용량에 따라 로그를 분할하는 것도 가능하다.
            - 성능도 일반 System.out 보다 좋다. (내부 버퍼링, 멀티 쓰레드 등등) 그래서 실무에서는 꼭 로그를
              사용해야 한다.

    6.2 요청 매핑
        - @RestController
            - @Controller 는 반환 값이 String 이면 뷰 이름으로 인식된다. 그래서 뷰를 찾고 뷰가 랜더링 된다.
            - @RestController 는 반환 값으로 뷰를 찾는 것이 아니라, HTTP 메시지 바디에 바로 입력한다.
            - 따라서 실행 결과로 ok 메세지를 받을 수 있다. @ResponseBody 와 관련이 있는데, 뒤에서 더 자세히 설명한다.

        - method 특정 HTTP 메서드 요청만 허용
          GET, HEAD, POST, PUT, PATCH, DELETE

        - PathVariable(경로 변수) 사용
            - 변수명이 같으면 생략 가능
              @PathVariable("userId") String userId -> @PathVariable userId

    6.3 요청 매핑 - API 예시
        - 회원 관리 API
            - 회원 목록 조회: GET /users
              회원 등록: POST /users
              회원 조회: GET /users/{userId}
              회원 수정: PATCH /users/{userId}
              회원 삭제: DELETE /users/{userId}

    6.4 HTTP 요청 - 기본, 헤더 조회
        - HttpServletRequest
        - HttpServletResponse
        - HttpMethod : HTTP 메서드를 조회한다. org.springframework.http.HttpMethod
        - Locale : Locale 정보를 조회한다.
        - @RequestHeader MultiValueMap<String, String> headerMap
            - 모든 HTTP 헤더를 MultiValueMap 형식으로 조회한다.
        - @RequestHeader("host") String host
            - 특정 HTTP 헤더를 조회한다.
            - 속성
                - 필수 값 여부: required
                - 기본 값 속성: defaultValue
        - @CookieValue(value = "myCookie", required = false) String cookie
            - 특정 쿠키를 조회한다.
            - 속성
                - 필수 값 여부: required
                - 기본 값: defaultValue

        - MultiValueMap
             - MAP 과 유사한데, 하나의 키에 여러 값을 받을 수 있다.
             - HTTP header, HTTP 쿼리 파라미터와 같이 하나의 키에 여러 값을 받을 때 사용한다.
               keyA=value1&keyA=value2

    6.5 HTTP 요청 파라미터 - 쿼리 파라미터, HTML Form
        - 클라이언트에서 서버로 요청 데이터를 전달할 때는 주로 다음 3가지 방법을 사용한다.
            - GET -> 쿼리 파라미터
                - /url?username=hello&age=20
                - 메시지 바디 없이, URL 의 쿼리 파라미터에 데이터를 포함해서 전달
                - 예) 검색, 필터, 페이징등에서 많이 사용하는 방식

            - POST -> HTML Form
                - content-type: application/x-www-form-urlencoded
                - 메시지 바디에 쿼리 파리미터 형식으로 전달 username=hello&age=20
                - 예) 회원 가입, 상품 주문, HTML Form 사용

            - HTTP message body 에 데이터를 직접 담아서 요청
                - HTTP API 에서 주로 사용, JSON, XML, TEXT
                - 데이터 형식은 주로 JSON 사용
                - POST, PUT, PATCH

            - 요청 파라미터 - 쿼리 파라미터, HTML Form
                - HttpServletRequest 의 request.getParameter() 를 사용하면 다음 두가지 요청 파라미터를 조회할 수 있다.
                    - GET, 쿼리 파라미터 전송
                    - POST, HTML Form 전송

    6.6 HTTP 요청 파라미터 - @RequestParam
        - @RequestParam : 파라미터 이름으로 바인딩
            - String , int , Integer 등의 단순 타입이면 @RequestParam 도 생략 가능
                - 권장 x -> @RequestParam 이 있으면 명확하게 요청 파리미터에서 데이터를 읽는 다는 것을 알 수 있다.
            - @RequestParam 애노테이션을 생략하면 스프링 MVC 는 내부에서 required=false 를 적용한다.
            - @RequestParam.required -> 기본값이 파라미터 필수( true )이다.
        - @ResponseBody : View 조회를 무시하고, HTTP message body 에 직접 해당 내용 입력

        - /request-param 요청
          username 이 없으므로 400 예외가 발생한다.

        - 주의! - 파라미터 이름만 사용
            - /request-param?username=
              파라미터 이름만 있고 값이 없는 경우 빈문자로 통과

        - 주의! - 기본형(primitive)에 null 입력
            - /request-param 요청
              @RequestParam(required = false) int age
            - null 을 int 에 입력하는 것은 불가능(500 예외 발생)
              따라서 null 을 받을 수 있는 Integer 로 변경하거나, 또는 defaultValue 사용
              defaultValue 는 빈 문자의 경우에도 설정한 기본 값이 적용된다.

    6.7 HTTP 요청 파라미터 - @ModelAttribute
        - 스프링 MVC 는 @ModelAttribute 가 있으면 다음을 실행한다.
        - HelloData 객체를 생성한다.
        - 요청 파라미터의 이름으로 HelloData 객체의 프로퍼티를 찾는다. 그리고 해당 프로퍼티의 setter 를
          호출해서 파라미터의 값을 입력(바인딩) 한다.
        - 예) 파라미터 이름이 username 이면 setUsername() 메서드를 찾아서 호출하면서 값을 입력한다.

        - 프로퍼티
            - 객체에 getUsername() , setUsername() 메서드가 있으면, 이 객체는 username 이라는 프로퍼티를 가지고 있다.

        - 바인딩 오류
            - age=abc 처럼 숫자가 들어가야 할 곳에 문자를 넣으면 BindException 이 발생한다. 이런 바인딩 오류를
              처리하는 방법은 검증 부분에서 다룬다.

        - @ModelAttribute 는 생략할 수 있다.
          그런데 @RequestParam 도 생략할 수 있으니 혼란이 발생할 수 있다.

        - 스프링은 해당 생략시 다음과 같은 규칙을 적용한다.
          String , int , Integer 같은 단순 타입 = @RequestParam
          나머지 = @ModelAttribute (argument resolver 로 지정해둔 타입 외)

    6.8 HTTP 요청 메시지 - 단순 텍스트
        - HTTP message body 에 데이터를 직접 담아서 요청
        - 요청 파라미터와 다르게, HTTP 메시지 바디를 통해 데이터가 직접 데이터가 넘어오는 경우는
          @RequestParam , @ModelAttribute 를 사용할 수 없다.

        1. public void requestBodyString(HttpServletRequest request,
          HttpServletResponse response) throws IOException {
          ServletInputStream inputStream = request.getInputStream();
          String messageBody = StreamUtils.copyToString(inputStream, StandardCharsets.UTF_8);

        2. InputStream(Reader): HTTP 요청 메시지 바디의 내용을 직접 조회
        - OutputStream(Writer): HTTP 응답 메시지의 바디에 직접 결과 출력
            - public void requestBodyStringV2(InputStream inputStream, Writer responseWriter){
              String messageBody = StreamUtils.copyToString(inputStream, StandardCharsets.UTF_8);
              responseWriter.write("ok");

        3. HttpEntity: HTTP header, body 정보를 편라하게 조회
            - HttpMessageConverter 사용 -> StringHttpMessageConverter 적용
        - 응답에서도 HttpEntity 사용 가능
            - 메시지 바디 정보 직접 반환(view 조회X)
            - HttpMessageConverter 사용 -> StringHttpMessageConverter 적용
              public HttpEntity<String> requestBodyStringV3(HttpEntity<String> httpEntity) {}
              String messageBody = httpEntity.getBody();
              return new HttpEntity<>("ok");

        4. HttpEntity 를 상속받은 다음 객체들도 같은 기능을 제공한다.
        - RequestEntity
            - HttpMethod, url 정보가 추가, 요청에서 사용
        - ResponseEntity
            - HTTP 상태 코드 설정 가능, 응답에서 사용
            - return new ResponseEntity<String>("Hello World", responseHeaders, HttpStatus.CREATED)

        5. @RequestBody
            - 참고로 헤더 정보가 필요하다면 HttpEntity 를 사용하거나 @RequestHeader 를 사용하면 된다.
        - @ResponseBody
            - 물론 이 경우에도 view를 사용하지 않는다.

        - 요청 파라미터를 조회하는 기능: @RequestParam , @ModelAttribute
        - HTTP 메시지 바디를 직접 조회하는 기능: @RequestBody

        - 스프링 MVC 내부에서 HTTP 메시지 바디를 읽어서 문자나 객체로 변환해서 전달해주는데, 이때 HTTP
          메시지 컨버터( HttpMessageConverter )라는 기능을 사용한다.

    6.9 HTTP 요청 메시지 - JSON
        1. ServletInputStream inputStream = request.getInputStream();
          String messageBody = StreamUtils.copyToString(inputStream, StandardCharsets.UTF_8);
          private ObjectMapper objectMapper = new ObjectMapper();
          HelloData data = objectMapper.readValue(messageBody, HelloData.class);
            - HttpServletRequest 를 사용해서 직접 HTTP 메시지 바디에서 데이터를 읽어와서, 문자로 변환한다.
              문자로 된 JSON 데이터를 Jackson 라이브러리인 objectMapper 를 사용해서 자바 객체로 변환한다.

        2. public String requestBodyJsonV2(@RequestBody String messageBody) throws IOException {
          HelloData data = objectMapper.readValue(messageBody, HelloData.class);
            - 문자로 변환하고 다시 json 으로 변환하는 과정이 불편하다. @ModelAttribute 처럼 한번에 객체로 변환할 수는 없을까?

        3. public String requestBodyJsonV3(@RequestBody HelloData data) {
            - @RequestBody 에 직접 만든 객체를 지정할 수 있다.

        - HttpEntity , @RequestBody 를 사용하면 HTTP 메시지 컨버터가 HTTP 메시지 바디의 내용을 우리가 원하는 문자나 객체 등으로 변환.
        - HTTP 메시지 컨버터는 문자 뿐만 아니라 JSON 도 객체로 변환해주는데, 우리가 방금 V2에서 했던 작업을 대신 처리해준다.

        - @RequestBody 는 생략 불가능
            - 스프링은 @ModelAttribute , @RequestParam 해당 생략시 다음과 같은 규칙을 적용한다.
                - String , int , Integer 같은 단순 타입 = @RequestParam
                - 나머지 = @ModelAttribute (argument resolver 로 지정해둔 타입 외)
            - HelloData 에 @RequestBody 를 생략하면 @ModelAttribute 가 적용되어버린다.
            - 따라서 생략하면 HTTP 메시지 바디가 아니라 요청 파라미터를 처리하게 된다.

        - HTTP 요청시에 content-type 이 application/json 인지 꼭! 확인해야 한다. 그래야 JSON 을 처리할 수
          있는 HTTP 메시지 컨버터가 실행된다.

        4. public String requestBodyJsonV4(HttpEntity<HelloData> httpEntity) {
           HelloData data = httpEntity.getBody();
        - @RequestBody 요청
            - JSON 요청 HTTP 메시지 컨버터 객체
        - @ResponseBody 응답
            - 객체 HTTP 메시지 컨버터 JSON 응답

    6.11 HTTP 응답 - 정적 리소스, 뷰 템플릿
        - 스프링(서버)에서 응답 데이터를 만드는 방법은 크게 3가지이다.
            - 정적 리소스
                - 예) 웹 브라우저에 정적인 HTML, css, js을 제공할 때는, 정적 리소스를 사용한다.
            - 뷰 템플릿 사용
                - 예) 웹 브라우저에 동적인 HTML 을 제공할 때는 뷰 템플릿을 사용한다.
            - HTTP 메시지 사용
                - HTTP API 를 제공하는 경우에는 HTML 이 아니라 데이터를 전달해야 하므로, HTTP 메시지 바디에
                  JSON 같은 형식으로 데이터를 실어 보낸다.

        - 정적 리소스
            - 스프링 부트는 클래스패스의 다음 디렉토리에 있는 정적 리소스를 제공한다.
              /static , /public , /resources , /META-INF/resources

            - src/main/resources 는 리소스를 보관하는 곳이고, 또 클래스패스의 시작 경로이다.
              따라서 다음 디렉토리에 리소스를 넣어두면 스프링 부트가 정적 리소스로 서비스를 제공한다.

            - 정적 리소스 경로
              src/main/resources/static

            - 다음 경로에 파일이 들어있으면
              src/main/resources/static/basic/hello-form.html

            - 웹 브라우저에서 다음과 같이 실행하면 된다.
              http://localhost:8080/basic/hello-form.html

            - 정적 리소스는 해당 파일을 변경 없이 그대로 서비스하는 것이다.

        - 뷰 템플릿
            - 뷰 템플릿을 거쳐서 HTML 이 생성되고, 뷰가 응답을 만들어서 전달한다.
            - 일반적으로 HTML 을 동적으로 생성하는 용도로 사용하지만, 다른 것들도 가능하다. 뷰 템플릿이 만들 수
              있는 것이라면 뭐든지 가능하다.

            - 뷰 템플릿 경로
              src/main/resources/templates

            - 뷰 템플릿 생성
              src/main/resources/templates/response/hello.html

            - String 을 반환하는 경우 - View or HTTP 메시지
                - @ResponseBody 가 없으면 response/hello 로 뷰 리졸버가 실행되어서 뷰를 찾고, 렌더링 한다.
                - @ResponseBody 가 있으면 뷰 리졸버를 실행하지 않고, HTTP 메시지 바디에 직접 response/hello 라는 문자가 입력된다.

            - Void 를 반환하는 경우
                - @Controller 를 사용하고, HttpServletResponse , OutputStream(Writer) 같은 HTTP 메시지
                  바디를 처리하는 파라미터가 없으면 요청 URL 을 참고해서 논리 뷰 이름으로 사용
                    - 요청 URL: /response/hello
                    - 실행: templates/response/hello.html
                - 참고로 이 방식은 명시성이 너무 떨어지고 이렇게 딱 맞는 경우도 많이 없어서, 권장하지 않는다.

        - HTTP 메시지
            - @ResponseBody , HttpEntity 를 사용하면, 뷰 템플릿을 사용하는 것이 아니라, HTTP 메시지 바디에
              직접 응답 데이터를 출력할 수 있다.

        - Thymeleaf 스프링 부트 설정
            - implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

            - 스프링 부트가 자동으로 ThymeleafViewResolver 와 필요한 스프링 빈들을 등록한다. 그리고 다음
              설정도 사용한다. 이 설정은 기본 값 이기 때문에 변경이 필요할 때만 설정하면 된다.

            - application.properties
              spring.thymeleaf.prefix=classpath:/templates/
              spring.thymeleaf.suffix=.html

    6.12 HTTP 응답 - HTTP API, 메시지 바디에 직접 입력
        - HTML 이나 뷰 템플릿을 사용해도 HTTP 응답 메시지 바디에 HTML 데이터가 담겨서 전달된다. 여기서
          설명하는 내용은 정적 리소스나 뷰 템플릿을 거치지 않고, 직접 HTTP 응답 메시지를 전달하는 경우를 말한다.

        1. @GetMapping("/response-body-string-v1")
           public void responseBodyV1(HttpServletResponse response) throws IOException
           response.getWriter().write("ok");

        2. @GetMapping("/response-body-string-v2")
           public ResponseEntity<String> responseBodyV2()
           return new ResponseEntity<>("ok", HttpStatus.OK);

        3. @ResponseBody
           @GetMapping("/response-body-string-v3")
           public String responseBodyV3()
           return "ok";

        4. @GetMapping("/response-body-json-v1")
           public ResponseEntity<HelloData> responseBodyJsonV1()
           return new ResponseEntity<>(helloData, HttpStatus.OK);

        5. @ResponseStatus(HttpStatus.OK)
           @ResponseBody
           @GetMapping("/response-body-json-v2")
           public HelloData responseBodyJsonV2()
           return helloData;
            - ResponseEntity 는 HTTP 응답 코드를 설정할 수 있는데, @ResponseBody 를 사용하면 이런 것을
              설정하기 까다롭다.
              @ResponseStatus(HttpStatus.OK) 애노테이션을 사용하면 응답 코드도 설정할 수 있다.
            - 물론 애노테이션이기 때문에 응답 코드를 동적으로 변경할 수는 없다. 프로그램 조건에 따라서 동적으로
              변경하려면 ResponseEntity 를 사용하면 된다.

        - @RestController
            - @Controller 대신에 @RestController 애노테이션을 사용하면, 해당 컨트롤러에 모두
              @ResponseBody 가 적용되는 효과가 있다.

    6.13 HTTP 메시지 컨버터
        - 뷰 템플릿으로 HTML 을 생성해서 응답하는 것이 아니라, HTTP API 처럼 JSON 데이터를 HTTP 메시지
          바디에서 직접 읽거나 쓰는 경우 HTTP 메시지 컨버터를 사용하면 편리하다.

        - @ResponseBody 를 사용
             - HTTP 의 BODY 에 문자 내용을 직접 반환
             - viewResolver 대신에 HttpMessageConverter 가 동작
                - 기본 문자처리: StringHttpMessageConverter
                - 기본 객체처리: MappingJackson2HttpMessageConverter
                - byte 처리 등등 기타 여러 HttpMessageConverter 가 기본으로 등록되어 있음

             - 응답의 경우 클라이언트의 HTTP Accept 해더와 서버의 컨트롤러 반환 타입 정보 둘을 조합해서
               HttpMessageConverter 가 선택된다.

        - 스프링 MVC 는 다음의 경우에 HTTP 메시지 컨버터를 적용한다.
            - HTTP 요청: @RequestBody , HttpEntity(RequestEntity)
            - HTTP 응답: @ResponseBody , HttpEntity(ResponseEntity)

        - HTTP 메시지 컨버터 인터페이스
            - HTTP 메시지 컨버터는 HTTP 요청, HTTP 응답 둘 다 사용된다.
            - canRead() , canWrite() : 메시지 컨버터가 해당 클래스, 미디어타입을 지원하는지 체크
            - read() , write() : 메시지 컨버터를 통해서 메시지를 읽고 쓰는 기능

            - 스프링 부트 기본 메시지 컨버터
                - 0 = ByteArrayHttpMessageConverter
                  1 = StringHttpMessageConverter
                  2 = MappingJackson2HttpMessageConverter ...

            - 스프링 부트는 다양한 메시지 컨버터를 제공하는데, 대상 클래스 타입과 미디어 타입 둘을 체크해서
              사용여부를 결정한다. 만약 만족하지 않으면 다음 메시지 컨버터로 우선순위가 넘어간다.

            - ByteArrayHttpMessageConverter : byte[] 데이터를 처리한다.
                - 클래스 타입: byte[] , 미디어타입: */* ,
                - 요청 예) @RequestBody byte[] data
                - 응답 예) @ResponseBody return byte[] 쓰기 미디어타입 application/octet-stream

            - StringHttpMessageConverter : String 문자로 데이터를 처리한다.
                - 클래스 타입: String , 미디어타입: */*
                - 요청 예) @RequestBody String data
                - 응답 예) @ResponseBody return "ok" 쓰기 미디어타입 text/plain

            - MappingJackson2HttpMessageConverter : application/json
                - 클래스 타입: 객체 또는 HashMap , 미디어타입 application/json 관련
                - 요청 예) @RequestBody HelloData data
                - 응답 예) @ResponseBody return helloData 쓰기 미디어타입 application/json 관련

            - HTTP 요청 데이터 읽기
                - HTTP 요청이 오고, 컨트롤러에서 @RequestBody , HttpEntity 파라미터를 사용한다.
                - 메시지 컨버터가 메시지를 읽을 수 있는지 확인하기 위해 canRead() 를 호출한다.
                    - 대상 클래스 타입을 지원하는가.
                        - 예) @RequestBody 의 대상 클래스 ( byte[] , String , HelloData )
                    - HTTP 요청의 Content-Type 미디어 타입을 지원하는가.
                        - 예) text/plain , application/json , */*
                - canRead() 조건을 만족하면 read() 를 호출해서 객체 생성하고, 반환한다.

            - HTTP 응답 데이터 생성
                - 컨트롤러에서 @ResponseBody , HttpEntity 로 값이 반환된다.
                - 메시지 컨버터가 메시지를 쓸 수 있는지 확인하기 위해 canWrite() 를 호출한다.
                    - 대상 클래스 타입을 지원하는가.
                        - 예) return 의 대상 클래스 ( byte[] , String , HelloData )
                    - HTTP 요청의 Accept 미디어 타입을 지원하는가.(더 정확히는 @RequestMapping 의 produces )
                        - 예) text/plain , application/json , */*
                - canWrite() 조건을 만족하면 write() 를 호출해서 HTTP 응답 메시지 바디에 데이터를 생성한다.

    6.14 요청 매핑 핸들러 어댑터 구조
        - @RequestMapping 을 처리하는 핸들러 어댑터인 RequestMappingHandlerAdapter (요청 매핑 헨들러 어뎁터)에 있다.

        - RequestMappingHandlerAdapter 동작 방식
            1.컨트롤러의 파라미터, 애노테이션 정보를 기반으로 전달 데이터 생성
              HttpServletRequest, Model, @RequestParam, @ModelAttribute, @RequestBody, HttpEntity
            2.호출
            3.컨트롤러의 반환 값을 반환
              ModelAndView, @ResponseBody, HttpEntity

            - RequestMappingHandlerAdapter -> Argument Resolver -> handler(controller) -> ReturnValue Handler

        - Argument Resolver
            - 애노테이션 기반의 컨트롤러가 파라미터를 유연하게 처리할 수 있는 이유가 바로 ArgumentResolver 덕분이다.
            - 애노테이션 기반 컨트롤러를 처리하는 RequestMappingHandlerAdaptor 는 바로 이
              ArgumentResolver 를 호출해서 컨트롤러(핸들러)가 필요로 하는 다양한 파라미터의 값(객체)을 생성한다.
              그리고 이렇게 파리미터의 값이 모두 준비되면 컨트롤러를 호출하면서 값을 넘겨준다.

            - 정확히는 HandlerMethodArgumentResolver 인데 줄여서 ArgumentResolver 라고 부른다.

            - 동작 방식
                - ArgumentResolver 의 supportsParameter() 를 호출해서 해당 파라미터를 지원하는지 체크하고,
                  지원하면 resolveArgument() 를 호출해서 실제 객체를 생성한다. 그리고 이렇게 생성된 객체가 컨트롤러
                  호출시 넘어가는 것이다.

        - ReturnValueHandler
            - HandlerMethodReturnValueHandler 를 줄여서 ReturnValueHandle 라 부른다.
            - 응답 값을 변환하고 처리한다.
            - 컨트롤러에서 String 으로 뷰 이름을 반환해도, 동작하는 이유가 바로 ReturnValueHandler 덕분이다.
              어떤 종류들이 있는지 살짝 코드로 확인만 해보자.

        - HTTP 메시지 컨버터 위치
            - 요청의 경우 @RequestBody 를 처리하는 ArgumentResolver 가 있고, HttpEntity 를 처리하는
              ArgumentResolver 가 있다. 이 ArgumentResolver 들이 HTTP 메시지 컨버터를 사용해서 필요한
              객체를 생성하는 것이다.

            - 응답의 경우 @ResponseBody 와 HttpEntity 를 처리하는 ReturnValueHandler 가 있다. 그리고
              여기에서 HTTP 메시지 컨버터를 호출해서 응답 결과를 만든다.

        - 스프링 MVC 는 @RequestBody @ResponseBody 가 있으면
          RequestResponseBodyMethodProcessor (ArgumentResolver)
          HttpEntity 가 있으면 HttpEntityMethodProcessor (ArgumentResolver)를 사용한다.
