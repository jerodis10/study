1.JDBC 이해
    1.1 JDBC 이해
    1.2 JDBC 의 최신 데이터 접근 기술
    1.3 데이터베이스 연결
    1.4 JDBC 개발 - 등록
    1.5 JDBC 개발 - 조회


    1.1 JDBC 이해
        - JDBC 등장 이유
            - 애플리케이션을 개발할 때 중요한 데이터는 대부분 데이터베이스에 보관한다.
            - 애플리케이션 서버와 DB - 일반적인 사용법
                1. 커넥션 연결: 주로 TCP/IP를 사용해서 커넥션을 연결한다.
                2. SQL 전달: 애플리케이션 서버는 DB가 이해할 수 있는 SQL 을 연결된 커넥션을 통해 DB에 전달한다.
                3. 결과 응답: DB는 전달된 SQL 을 수행하고 그 결과를 응답한다. 애플리케이션 서버는 응답 결과를 활용한다.

            - 애플리케이션 서버와 DB - DB 변경
                - 문제는 각각의 데이터베이스마다 커넥션을 연결하는 방법, SQL 을 전달하는 방법, 그리고 결과를 응답 받는
                  방법이 모두 다르다는 점이다. 참고로 관계형 데이터베이스는 수십개가 있다.

            - 여기에는 2가지 큰 문제가 있다.
                1. 데이터베이스를 다른 종류의 데이터베이스로 변경하면 애플리케이션 서버에 개발된 데이터베이스 사용
                   코드도 함께 변경해야 한다.
                2. 개발자가 각각의 데이터베이스마다 커넥션 연결, SQL 전달, 그리고 그 결과를 응답 받는 방법을 새로
                   학습해야 한다.

            => 이런 문제를 해결하기 위해 JDBC 라는 자바 표준이 등장한다.

        - JDBC 표준 인터페이스
            - JDBC(Java Database Connectivity)는 자바에서 데이터베이스에 접속할 수 있도록 하는 자바 API 다.
              JDBC 는 데이터베이스에서 자료를 쿼리하거나 업데이트하는 방법을 제공한다. - 위키백과

            - 애플리케이션 로직 -> JDBC 표준 인터페이스            <- MySQL 드라이버
                                                                (MySQLConnection,MySQLStatement,MySQLResultSet)
                                - Connection: 연결            <- Oracle 드라이버
                                - Statement: SQL 을 담은 내용     (OracleConnection,OracleStatement,OracleResultSet)
                                - ResultSet: SQL 요청 응답

            - 자바는 이렇게 표준 인터페이스를 정의해두었다. 이제부터 개발자는 이 표준 인터페이스만 사용해서 개발하면 된다.
              그런데 인터페이스만 있다고해서 기능이 동작하지는 않는다. 이 JDBC 인터페이스를 각각의 DB 벤더
              (회사)에서 자신의 DB에 맞도록 구현해서 라이브러리로 제공하는데, 이것을 JDBC 드라이버라 한다. 예를
              들어서 MySQL DB에 접근할 수 있는 것은 MySQL JDBC 드라이버라 하고, Oracle DB에 접근할 수
              있는 것은 Oracle JDBC 드라이버라 한다.

            - 표준화의 한계
                - JDBC 의 등장으로 많은 것이 편리해졌지만, 각각의 데이터베이스마다 SQL, 데이터타입 등의 일부 사용법
                  다르다. ANSI SQL 이라는 표준이 있기는 하지만 일반적인 부분만 공통화했기 때문에 한계가 있다.
                  대표적으로 실무에서 기본으로 사용하는 페이징 SQL 은 각각의 데이터베이스마다 사용법이 다르다.
                  결국 데이터베이스를 변경하면 JDBC 코드는 변경하지 않아도 되지만 SQL 은 해당 데이터베이스에 맞도록 변경해야한다.
                  참고로 JPA(Java Persistence API)를 사용하면 이렇게 각각의 데이터베이스마다 다른 SQL 을 정의해야
                  하는 문제도 많은 부분 해결할 수 있다.

    1.2 JDBC 의 최신 데이터 접근 기술
        - 최근에는 JDBC 를 직접 사용하기 보다는 JDBC 를 편리하게 사용하는 다양한 기술이 존재한다.
          대표적으로 SQL Mapper 와 ORM 기술로 나눌 수 있다.
        - JDBC 직접 사용
          애플리케이션 로직 -> SQL 전달 -> JDBC

        - SQL Mapper
          애플리케이션 로직 -> SQL 전달 -> SQL Mapper -> SQL 전달 -> JDBC
                                        - jdbcTemplate
                                        - MyBatis

          - 장점: JDBC 를 편리하게 사용하도록 도와준다.
                - SQL 응답 결과를 객체로 편리하게 변환해준다.
                - JDBC 의 반복 코드를 제거해준다.
          - 단점: 개발자가 SQL 을 직접 작성해야한다.
          - 대표 기술: 스프링 JdbcTemplate, MyBatis

        - ORM 기술
            - 애플리케이션 로직 -> 객체전달 -> JPA -> SQL 전달 -> JDBC
                                          - 하이버네이트
                                          - 이클립스링크
            - ORM 은 객체를 관계형 데이터베이스 테이블과 매핑해주는 기술이다. 이 기술 덕분에 개발자는
              반복적인 SQL 을 직접 작성하지 않고, ORM 기술이 개발자 대신에 SQL 을 동적으로 만들어
              실행해준다. 추가로 각각의 데이터베이스마다 다른 SQL 을 사용하는 문제도 중간에서 해결해준다.
            - 대표 기술: JPA, 하이버네이트, 이클립스링크
            - JPA 는 자바 진영의 ORM 표준 인터페이스이고, 이것을 구현한 것으로 하이버네이트와 이클립스 링크 등의 구현 기술이 있다.

    1.3 데이터베이스 연결
        - 데이터베이스에 연결하려면 JDBC 가 제공하는 DriverManager.getConnection(..) 를 사용하면 된다.
          이렇게 하면 라이브러리에 있는 데이터베이스 드라이버를 찾아서 해당 드라이버가 제공하는 커넥션을
          반환해준다. 여기서는 H2 데이터베이스 드라이버가 작동해서 실제 데이터베이스와 커넥션을 맺고 그 결과를 반환해준다.

        - JDBC DriverManager 연결 이해
            - JDBC 는 java.sql.Connection 표준 커넥션 인터페이스를 정의한다.
            - H2 데이터베이스 드라이버는 JDBC Connection 인터페이스를 구현한 org.h2.jdbc.JdbcConnection 구현체를 제공한다.

        - DriverManager 커넥션 요청 흐름
            애플리케이션 로직 -> 커넥션 요청 -> DriverManager.getConnection
            -> (H2 or MySQL) 드라이버 -> (H2 or MySQL) 커넥션 반환

        - JDBC 가 제공하는 DriverManager 는 라이브러리에 등록된 DB 드라이버들을 관리하고, 커넥션을
          획득하는 기능을 제공한다.

        1. 애플리케이션 로직에서 커넥션이 필요하면 DriverManager.getConnection() 을 호출한다.
        2. DriverManager 는 라이브러리에 등록된 드라이버 목록을 자동으로 인식한다. 이 드라이버들에게
           순서대로 다음 정보를 넘겨서 커넥션을 획득할 수 있는지 확인한다.
            - URL: 예) jdbc:h2:tcp://localhost/~/test
            - 이름, 비밀번호 등 접속에 필요한 추가 정보
            - 여기서 각각의 드라이버는 URL 정보를 체크해서 본인이 처리할 수 있는 요청인지 확인한다. 예를
              들어서 URL 이 jdbc:h2 로 시작하면 이것은 h2 데이터베이스에 접근하기 위한 규칙이다. 따라서 H2
              드라이버는 본인이 처리할 수 있으므로 실제 데이터베이스에 연결해서 커넥션을 획득하고 이 커넥션을
              클라이언트에 반환한다. 반면에 URL 이 jdbc:h2 로 시작했는데 MySQL 드라이버가 먼저 실행되면
              이 경우 본인이 처리할 수 없다는 결과를 반환하게 되고, 다음 드라이버에게 순서가 넘어간다.
        3. 이렇게 찾은 커넥션 구현체가 클라이언트에 반환된다.

    1.4 JDBC 개발 - 등록
        - getConnection() : 이전에 만들어둔 DBConnectionUtil 를 통해서 데이터베이스 커넥션을 획득한다.
        - sql : 데이터베이스에 전달할 SQL 을 정의한다. 여기서는 데이터를 등록해야 하므로 insert sql 을 준비했다.
        - con.prepareStatement(sql) : 데이터베이스에 전달할 SQL 과 파라미터로 전달할 데이터들을 준비한다.
            - sql : insert into member(member_id, money) values(?, ?)"
            - pstmt.setString(1, member.getMemberId()) : SQL 의 첫번째 ? 에 값을 지정한다. 문자이므로
              setString 을 사용한다.
            - pstmt.setInt(2, member.getMoney()) : SQL 의 두번째 ? 에 값을 지정한다. Int 형 숫자이므로
              setInt 를 지정한다.

        - pstmt.executeUpdate() : Statement 를 통해 준비된 SQL 을 커넥션을 통해 실제 데이터베이스에
          전달한다. 참고로 executeUpdate() 은 int 를 반환하는데 영향받은 DB row 수를 반환한다. 여기서는
          하나의 row 를 등록했으므로 1을 반환한다.

        - 리소스 정리
          쿼리를 실행하고 나면 리소스를 정리해야 한다. 여기서는 Connection , PreparedStatement 를
          사용했다. 리소스를 정리할 때는 항상 역순으로 해야한다. Connection 을 먼저 획득하고 Connection 을
          통해 PreparedStatement 를 만들었기 때문에 리소스를 반환할 때는 PreparedStatement 를 먼저
          종료하고, 그 다음에 Connection 을 종료하면 된다.

        주의
        리소스 정리는 꼭! 해주어야 한다. 따라서 예외가 발생하든, 하지 않든 항상 수행되어야 하므로 finally
        구문에 주의해서 작성해야한다. 만약 이 부분을 놓치게 되면 커넥션이 끊어지지 않고 계속 유지되는 문제가
        발생할 수 있다. 이런 것을 리소스 누수라고 하는데, 결과적으로 커넥션 부족으로 장애가 발생할 수 있다.
            - connection 은 외부 리소스를 쓰는 것.
            - 실제 tcp/ip 커넥션이 걸려서 쓰는 것.
            - 근데 얘를 안닫아주면 연결이 안 끊어지고 계속 유지가 될 수 있음.

    1.5 JDBC 개발 - 조회
        - ResultSet
            - ResultSet 은 다음과 같이 생긴 데이터 구조이다. 보통 select 쿼리의 결과가 순서대로 들어간다.
            - ResultSet 내부에 있는 커서( cursor )를 이동해서 다음 데이터를 조회할 수 있다.
            - rs.next() : 이것을 호출하면 커서가 다음으로 이동한다. 참고로 최초의 커서는 데이터를 가리키고 있지
              않기 때문에 rs.next() 를 최초 한번은 호출해야 데이터를 조회할 수 있다.
                - rs.next() 의 결과가 true 면 커서의 이동 결과 데이터가 있다는 뜻이다.
                - rs.next() 의 결과가 false 면 더이상 커서가 가리키는 데이터가 없다는 뜻이다.

            - rs.getString("member_id") : 현재 커서가 가리키고 있는 위치의 member_id 데이터를 String 타입으로 반환한다.
            - rs.getInt("money") : 현재 커서가 가리키고 있는 위치의 money 데이터를 int 타입으로 반환한다.


