3.트랜잭션 이해
    3.1 트랜잭션 개념 이해
    3.2 데이터베이스 연결 구조와 DB 세션
    3.3 트랜잭션 DB 에제1 - 개념이해
    3.4 트랜잭션 DB 에제2 - 자동 커밋, 수동 커밋
    3.5 DB 락 - 개념 이해
    3.6 DB 락 - 조회
    3.7 트랜잭션 - 적용2


    3.1 트랜잭션 개념 이해
        - 트랜잭션 ACID
            - 원자성: 트랜잭션 내에서 실행한 작업들은 마치 하나의 작업인 것처럼 모두 성공 하거나 모두 실패해야 한다.
            - 일관성: 모든 트랜잭션은 일관성 있는 데이터베이스 상태를 유지해야 한다. 예를 들어 데이터베이스에서
                     정한 무결성 제약 조건을 항상 만족해야 한다.
            - 격리성: 동시에 실행되는 트랜잭션들이 서로에게 영향을 미치지 않도록 격리한다. 예를 들어 동시에 같은
                     데이터를 수정하지 못하도록 해야 한다. 격리성은 동시성과 관련된 성능 이슈로 인해 트랜잭션 격리 수준
                     (Isolation level)을 선택할 수 있다.
            - 지속성: 트랜잭션을 성공적으로 끝내면 그 결과가 항상 기록되어야 한다. 중간에 시스템에 문제가 발생해도
                     데이터베이스 로그 등을 사용해서 성공한 트랜잭션 내용을 복구해야 한다.

        - 트랜잭션은 원자성, 일관성, 지속성을 보장한다. 문제는 격리성인데 트랜잭션 간에 격리성을 완벽히
          보장하려면 트랜잭션을 거의 순서대로 실행해야 한다. 이렇게 하면 동시 처리 성능이 매우 나빠진다. 이런
          문제로 인해 ANSI 표준은 트랜잭션의 격리 수준을 4단계로 나누어 정의했다.

        - 트랜잭션 격리 수준 - Isolation level
          READ UNCOMMITED(커밋되지 않은 읽기)
          READ COMMITTED(커밋된 읽기)
          REPEATABLE READ(반복 가능한 읽기)
          SERIALIZABLE(직렬화 가능)

    3.2 데이터베이스 연결 구조와 DB 세션
        - 데이터베이스 연결 구조1
            - 사용자는 웹 애플리케이션 서버(WAS)나 DB 접근 툴 같은 클라이언트를 사용해서 데이터베이스 서버에
              접근할 수 있다. 클라이언트는 데이터베이스 서버에 연결을 요청하고 커넥션을 맺게 된다. 이때
              데이터베이스 서버는 내부에 세션이라는 것을 만든다. 그리고 앞으로 해당 커넥션을 통한 모든 요청은 이
              세션을 통해서 실행하게 된다.
            - 쉽게 이야기해서 개발자가 클라이언트를 통해 SQL 을 전달하면 현재 커넥션에 연결된 세션이 SQL 을 실행한다.
            - 세션은 트랜잭션을 시작하고, 커밋 또는 롤백을 통해 트랜잭션을 종료한다. 그리고 이후에 새로운
              트랜잭션을 다시 시작할 수 있다.
            - 사용자가 커넥션을 닫거나, 또는 DBA(DB 관리자)가 세션을 강제로 종료하면 세션은 종료된다.

        - 데이터베이스 연결 구조2
            - 커넥션 풀이 10개의 커넥션을 생성하면, 세션도 10개 만들어진다.

    3.3 트랜잭션 DB 에제1 - 개념이해
        - 트랜잭션 사용법
            - 데이터 변경 쿼리를 실행하고 데이터베이스에 그 결과를 반영하려면 커밋 명령어인 commit 을 호출하고,
              결과를 반영하고 싶지 않으면 롤백 명령어인 rollback 을 호출하면 된다.
            - 커밋을 호출하기 전까지는 임시로 데이터를 저장하는 것이다. 따라서 해당 트랜잭션을 시작한 세션(사용자)
              에게만 변경 데이터가 보이고 다른 세션(사용자)에게는 변경 데이터가 보이지 않는다.

        - 커밋하지 않은 데이터를 다른 곳에서 조회할 수 있으면 어떤 문제가 발생할까?
            - 예를 들어서 커밋하지 않는 데이터가 보인다면, 세션2는 데이터를 조회했을 때 신규 회원1, 2가 보일
              것이다. 따라서 신규 회원1, 신규 회원2가 있다고 가정하고 어떤 로직을 수행할 수 있다. 그런데 세션1이
              롤백을 수행하면 신규 회원1, 신규 회원2의 데이터가 사라지게 된다. 따라서 데이터 정합성에 큰 문제가
              발생한다.

    3.4 트랜잭션 DB 에제2 - 자동 커밋, 수동 커밋
        - 자동 커밋
          트랜잭션을 사용하려면 먼저 자동 커밋과 수동 커밋을 이해해야 한다.
          자동 커밋으로 설정하면 각각의 쿼리 실행 직후에 자동으로 커밋을 호출한다. 따라서 커밋이나 롤백을 직접
          호출하지 않아도 되는 편리함이 있다. 하지만 쿼리를 하나하나 실행할 때 마다 자동으로 커밋이 되어버리기
          때문에 우리가 원하는 트랜잭션 기능을 제대로 사용할 수 없다.
          자동 커밋이라고 해서 트랜잭션이 없는게 아니라 db 내부에서 트랜잭션이 있는데 굉장히 짧은 순간에 트랜잭션이 생겼다가 쿼리를
          수행하고 자동으로 커밋이 호출됨.

        - 수동 커밋 설정
          보통 자동 커밋 모드가 기본으로 설정된 경우가 많기 때문에, 수동 커밋 모드로 설정하는 것을 트랜잭션을
          시작한다고 표현할 수 있다.
          수동 커밋 설정을 하면 이후에 꼭 commit , rollback 을 호출해야 한다.

    3.5 DB 락 - 개념 이해
        - 세션1이 트랜잭션을 시작하고 데이터를 수정하는 동안 아직 커밋을 수행하지 않았는데, 세션2에서 동시에
          같은 데이터를 수정하게 되면 여러가지 문제가 발생한다. 바로 트랜잭션의 원자성이 깨지는 것이다. 여기에
          더해서 세션1이 중간에 롤백을 하게 되면 세션2는 잘못된 데이터를 수정하는 문제가 발생한다.
          이런 문제를 방지하려면, 세션이 트랜잭션을 시작하고 데이터를 수정하는 동안에는 커밋이나 롤백 전까지
          다른 세션에서 해당 데이터를 수정할 수 없게 막아야 한다.

        1. 세션1은 트랜잭션을 시작한다.
        2. 세션1은 memberA 의 money 를 500으로 변경을 시도한다. 이때 해당 로우의 락을 먼저 획득해야 한다.
           락이 남아 있으므로 세션1은 락을 획득한다. (세션1이 세션2보다 조금 더 빨리 요청했다.)
        3. 세션1은 락을 획득했으므로 해당 로우에 update sql 을 수행한다.
        4. 세션2는 트랜잭션을 시작한다.
        5. 세션2도 memberA 의 money 데이터를 변경하려고 시도한다. 이때 해당 로우의 락을 먼저 획득해야 한다.
           락이 없으므로 락이 돌아올 때 까지 대기한다.
        -  참고로 세션2가 락을 무한정 대기하는 것은 아니다. 락 대기 시간을 넘어가면 락 타임아웃 오류가 발생한다.
           락 대기 시간은 설정할 수 있다.
        6. 세션1은 커밋을 수행한다. 커밋으로 트랜잭션이 종료되었으므로 락도 반납한다.
        -  락을 획득하기 위해 대기하던 세션2가 락을 획득한다.
        7. 세션2는 update sql 을 수행한다.
        8. 세션2는 커밋을 수행하고 트랜잭션이 종료되었으므로 락을 반납한다.

    3.6 DB 락 - 조회
        - 일반적인 조회는 락을 사용하지 않는다
          데이터베이스마다 다르지만, 보통 데이터를 조회할 때는 락을 획득하지 않고 바로 데이터를 조회할 수 있다.
        - 데이터를 조회할 때도 락을 획득하고 싶을 때가 있다. 이럴 때는 select for update 구문을 사용하면 된다.
          이렇게 하면 세션1이 조회 시점에 락을 가져가버리기 때문에 다른 세션에서 해당 데이터를 변경할 수 없다.
          물론 이 경우도 트랜잭션을 커밋하면 락을 반납한다.

        - 조회 시점에 락이 필요한 경우는 언제일까?
            - 트랜잭션 종료 시점까지 해당 데이터를 다른 곳에서 변경하지 못하도록 강제로 막아야 할 때 사용한다.
            - 예를 들어서 애플리케이션 로직에서 memberA 의 금액을 조회한 다음에 이 금액 정보로 애플리케이션에서
              어떤 계산을 수행한다. 그런데 이 계산이 돈과 관련된 매우 중요한 계산이어서 계산을 완료할 때 까지
              memberA 의 금액을 다른곳에서 변경하면 안된다. 이럴 때 조회 시점에 락을 획득하면 된다.

    3.7 트랜잭션 - 적용2
        - 트랜잭션은 비즈니스 로직이 있는 서비스 계층에서 시작해야 한다. 비즈니스 로직이 잘못되면 해당
          비즈니스 로직으로 인해 문제가 되는 부분을 함께 롤백해야 하기 때문이다.
        - 그런데 트랜잭션을 시작하려면 커넥션이 필요하다. 결국 서비스 계층에서 커넥션을 만들고, 트랜잭션 커밋
          이후에 커넥션을 종료해야 한다.
        - 애플리케이션에서 DB 트랜잭션을 사용하려면 트랜잭션을 사용하는 동안 같은 커넥션을 유지해야한다.
          그래야 같은 세션을 사용할 수 있다.

        - 애플리케이션에서 같은 커넥션을 유지하려면 어떻게 해야할까? 가장 단순한 방법은 커넥션을 파라미터로
          전달해서 같은 커넥션이 사용되도록 유지하는 것이다.

















