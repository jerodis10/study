4.ControlStatement
	4.1 선택문
	4.2 반복문
	4.3 기타
	
	
	4.3.1 JUnit5
		1.JUnit이란?
			- Java의 단위 테스팅(Unit Testingf) 도구
			- public static void main(String[] args) 메소드에서 System.out으로 번거로운 디버깅 X
			
			※ 단위 테스트란?
				- 소스코드의 특정 프로덕션 코드가 의도한 대로 정확히 작동하는지 검증하는 절차
				- 모든 메소드에 대해 테스트 케이스(Test Case)를 작성하는 절차
			
		2.Junit 특징
			- 각 메소드별로 @Test 어노테이션을 선언하여 독립적인 테스트 가능
			- 단정문(Assertions)으로 테스트 케이스의 수행결과 판별 가능
			- 클래스 단위로 테스트 수행 시 테스트 메서드들의 실행순서는 무작위로 실행된다.
			
		3.Junit 어노테이션
			- @BeforeAll : 현재 클래스의 모든 테스트 메서드보다 먼저 실행, static 메서드이어야 함	
			- @BeforeEach : 각각의 테스트 메소드 수행 전에 실행되는 메서드
				- 인스턴스 변수의 초기화에 사용되기도 한다.
			- @AfterAll : 메서드보다 이후에 실행, static 메서드이어야 함
			- @AfterEach : 각각의 테스트 메소드 수행 후에 실행되는 메서드
			- @DisplayName : 테스트 메소드의 이름을 정의
			- @Disable : 테스트 메서드를 비활성화 할 수 있다.
			- @TestFactory - 동적 테스트를 위한 테스트 팩토리 인 메소드
			- @Nested - 주석이 달린 클래스가 중첩 된 비 정적 테스트 클래스임을 나타냄
 			- @Tag - 테스트 필터링을위한 태그 선언
  			- @ExtendWith - 사용자 지정 확장을 등록하는 데 사용
		
		4.단정문		
			- junit에서 제공하는 단정문보다 가독성이 좋은 AssertJ 자바 라이브러리를 많이 사용한다.
				assertEquals(expected, actual);         // Junit의 단정문
				assertThat(actual).isEqualTo(expected); // AssertJ의 단정문
				
				
		5.Junit 메서드	
			- assertThrows(Class<> classType, Executable executable)
			- 첫번째 인자로 발생할 예외 클래스의 class타입을 받은 뒤 executable을 실행하여 예외가 발생할 경우 
			  classType과 발생된 Exception이 같은 타입인지 확인.
			  
		6.AssertJ 메서드
			- 기본 검증 메서드
				- isEqualTo(값) : 값과 같은지 검증한다.
				- isNotEqualTo(값) : 값과 같지 않은지 검증한다.
				- isNull() : null인지 검증한다
				- isNotNull() : null이 아닌지 검증한다.
				- isIn(값 목록) : 값 목록에 포함되어 있는지 검증한다.
				- isNotIn(값 목록) : 값 목록에 포함되어 있지 않은지 검증한다.
				
			- Exception 관련 검증 메서드
				- assertThatThrownBy() : 인자로 받은 람다에서 익셉션이 발생하는지 검증한다.
				- isInstanceOf() : 익셉션의 타입을 추가로 검증할 수 있다.
				- assertThatExceptionOfType() : 발생할 익셉션의 타입을 지정하고 isThrownBy() 메서드를
				  이용해서 익셉션이 발생할 코드 블록을 지정할 수 있다.	
			
			- String에 대한 추가 검증 메서드
				- contains(CharSequance... values) : 인자로 지정한 문자열들을 모두 포함하고 있는지 검증한다.
				- containsOnlyOnce(CharSequance sequance) : 해당 문자열을 딱 한 번만 포함하는지 검증한다.
				- containsOnlyDigits() : 숫자만 포함하는지 검증한다.
				- containsWhitespaces() : 공백 문자를 포함하고 있는지 검증한다.
				- containsOnlyWhitespaces() : 공백 문자만 포함하는지 검증한다. 공백 문자 여부를 
				  Chracter#isWhitespace() 메서드를 따른다.
				  
			- String에 대한 추가 검증 메서드2
				- isZero() / isNotZero() : 0인지 또는 0이 아닌지를 검증한다.
				- isOne() : 1 인지를 검증한다.
				- isPositive() / isNotPositive() : 양수인지 또는 양수가 아닌지를 검증한다.
				- isNegative() / isNotNegative() : 음수인지 또는 음수가 아닌지를 검증한다.	  
			  
	4.3.2 LinkedList 구현
		- 배열은 간단하고 인덱스를 이용하여 데이터를 접근하는 시간이 빠르다는 장점이 있지만 다음과 같은 단점도 존재한다.
		
		1.크기를 변경할 수 없다.
  			- 사용중 크기 제한시 새로운 배열을 생성해서 데이터를 복사해야한다.
  			- 혹은 충분히 큰 크기의 배열을 생성해야 하므로 메모리 낭비가 초래된다.

		2.비연속적인 데이터의 추가 또는 삭제에 오랜시간이 걸린다.
  			- 중간 데이터의 추가 및 삭제시 빈자리를 채우기 위한 데이터 이동(복사)이 발생한다.
			  이러한 단점을 보완하기 위해 링크드 리스트(연결 리스트)라는 자료구조가 나왔다.

		- 링크드 리스트 데이터 삭제
			- 삭제는 간단하다. 삭제하고자 하는 노드의 이전노드가 삭제하고자 하는 노드가 가리키고 있는 주소값을 
			  가지도록 변경하기만 하면 된다. 배열처럼 복사하는 과정이 없기 때문에 처리속도가 매우 빠르다.
			  
		- 링크드 리스트 데이터 추가
			- 새로운 데이터를 추가할 때는 새로운 노드를 생성한 다음 추가하고자 하는 위치의 이전 노드의 주소값을 
			  새로운 노드의 주소값으로 할당해주고, 새로운 노드가 그 다음 노드의 주소값을 가리키도록 변경하기면 
			  하면 되므로 이것 역시 속도가 매우 빠르다.	
			  
		- LinkedList vs ArrayList 
			- ArrayList:
    			- 내부적으로 데이터를 배열에서 관리
      				=> 추가, 삭제 시 임시 배열 생성해서 복사. 이부분이 상당하 성능 저하의 요인 O(N)
    			- but, 배열로 관리 하므로, Index를 통해 검색하는 장점이 있다. O(1)

		    - LinkedList:
		    	- Node간의 연결을 통해 관리
		        	=> 데이터 검색 시 첫 노드(head)부터 순회. 탐색이 성능 저하의 요인 O(N)
		    	- 추가, 삭제 시 복사가 없고 노드만으로 가능 O(1)
			  
	4.3.3 if문 / switch 지양할 것
		- 상속과 다형성을 이용하여 if문효과를 내는 방법
		- https://refactoring.guru/replace-conditional-with-polymorphism
		- 다만, 3~4개정도는 괜찮다(늘어나지 않는다는 가정하에)  
		
	4.3.4 Test Double이란?
		- 테스트를 진행하기 어려운 경우(테스트 환경을 구현하는 코드가 복잡할 경우 등) 이를 대신해 테스트를 
		  진행할 수 있도록 만들어주는 객체이다. 자바 진영에서는 대표적으로 Mockito가 있다.	
		