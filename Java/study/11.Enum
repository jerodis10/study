11.Enum
	11.1 enum 정의하는 방법
	11.2 java.lang.Enum
	11.3 enum이 제공하는 메소드 (value(), valueOf() 
	11.4 EnumSet
	
	
	11.1 enum 정의하는 방법
		- enum이란?
			- enum(열거형)은 서로 관련된 상수를 편리하게 선언하기 위한 것으로 상수를 여러개 정의할 때 사용한다. 
			  enum은 여러 상수를 정의한 후, 정의된 것 이외의 값은 허용하지 않는다.
			- 열거형 필드의 이름은 상수이기 때문에 대문자로 표기한다.
			- 기본적으로 0부터 시작하는 정수값이 연속적으로 부여된다.
			
		- 열거형의 장점
			- 문자열과 비교해, IDE의 적극적인 지원을 받을 수 있다.
				- 자동완성, 오타검증, 텍스트 리팩토링 등
			- 허용 가능한 값들을 제한할 수 있다.
			- 리팩토링시 변경 범위가 최소화 된다.
				- 내용 추가가 필요하더라도, Enum 코드외에 수정할 필요가 없다.
			- 확실한 부분과 불확실한 부분을 분리할 수 있다.
				- A값과 B값이 실제로 동일한 것인지, 전혀 다른 의미인지..
				- 코드를 사용하기 위해 추가로 필요한 메서드들은 무엇인지..
				- 변경되면 어디까지 변경해야 하는 것인지..
			- 문맥을 담을 수 있다.
				- A라는 상황에서 "a"와 B라는 상황에서 "a"는 똑같은 문자열 "a"지만 전혀 다른 의미입니다.
				- 문자열은 이를 표현할 수 없지만, Enum은 이를 표현할 수 있다.
				- 이로인해 실행되는 코드를 이해하기 위해 추가로 무언가를 찾아보는 행위를 최소화 할 수 있다.
				
		- Enum은 왜 만들어졌는가?
			- Enum을 잘 사용하면 코드의 가독성을 높이고 논리적인 오류를 줄일 수 있다.		
				
			- IT 회사의 정보가 추가되었고 회사 이름을 상수로 관리하려한다 해보자.	
				  - public class EnumDemo {
					    public static final int APPLE = 1;
					    public static final int PEACH = 2;
					    public static final int BANANA = 3;
					
					    ... ...
					
					    public static final int APPLE = 1;
					    public static final int GOOGLE = 2;
					    public static final int FACEBOOK = 3;
					
					}		
			 	
				- 과일 '사과'와 회사 '애플'은 이름은 같지만 서로 다른 의미를 가진다. 
				  하지만 위의 예시처럼 사용하려면 이름이 중복되기 때문에 컴파일 에러가 발생한다.
				- 이름의 중복은 아래처럼 이름을 다르게 해주거나 인터페이스로 만들면 구분이 가능해진다.
				- 하지만 이런 식으로 상수를 인터페이스로 관리하는 것은 안티패턴이다. 
				  인터페이스는 규약을 위해 만든 것이지, 이런 식으로 쓰라고 만든 개념이 아니기 때문이다.
				- 하지만 '과일'과 '회사'는 서로 비교조차 되어서는 안되는 다른 개념이다. 
				  따라서 위와 같은 코드는 애초에 작성할 수 없게 컴파일 과정에서 막아줘야 한다.
				- 이러한 현상(타입은 다르지만 값이 같기 때문에 조건식의 결과가 true)을 typeSafe하지 못한다고 한다.
				
				- type-safety는 숫자만 해당하는게 아니라 문자열도 마찬가지이다. 
				  QueryDSL과 같은 라이브러리가 각광받는 이유가 타입세이프 때문이다.
				  
				- 둘이 애초에 비교를 하지 못하도록 하려면 서로 다른 객체로 만들어주면 된다.
				  
				  class Fruit {
					    public static final Fruit APPLE = new Fruit();
					    public static final Fruit PEACH = new Fruit();
					    public static final Fruit BANANA = new Fruit();
					}
					
					class Company {
					    public static final Company APPLE = new Company();
					    public static final Company GOOGLE = new Company();
					    public static final Company FACEBOOK = new Company();
					}
					public class EnumDemo {
					
					    public static void main(String[] args) {
					        if (Fruit.APPLE == Company.APPLE) {}   // 컴파일 에러 발생
					    }
					}
					
					이렇게 하면 위에서 언급했던 문제들
					1) 상수와 리터럴이 논리적인 연관이 없음.
					2) 서로 다른 개념끼리 이름이 충돌할 수 있음
					3) 서로 다른 개념임에도 비교하는 코드가 가능함
					이 3가지의 문제가 모두 해결된다.
					
				- 다음과 같이 switch문을 이용해 각 상수별로 다른 로직을 실행하는 메서드를 정의할 수도 있다.
					enum Transport {
					    BUS(1200), TAXI(3900), SUBWAY(1200);
					
					    private final int BASIC_FARE;   // 기본요금
					
					    Transport(int basicFare) {
					        BASIC_FARE = basicFare;
					    }
					
					    public double fare() {     // 운송 수단별로 다르게 책정되는 요금
					       	switch(this) {
					        	case BUS -> {
					            	return BASIC_FARE * 1.5
					            }
					            case TAXI -> {
					                return BASIC_FARE * 2.0;
					            }
					            case SUBWAY -> {
					                return BASIC_FARE * 0.5;
					            }
					            default -> throw new IllegalArgumentException(); // 실행될 일 없는 코드이지만 없으면 컴파일 에러
					        }
					    }
					}	
					
				- 아래와 같이 추상 메서드를 선언해서 각 상수 별로 다르게 동작하는 코드를 구현할 수도 있다.
					enum Transport {
					    BUS(1200) {
					        @Override
					        double fare(int distance) {
					            return distance * BASIC_FARE * 1.5;
					        }
					    },
					
					    TAXI(3900) {
					        @Override
					        double fare(int distance) {
					            return distance * BASIC_FARE * 2.0;
					        }
					    },
					
					    SUBWAY(1200) {
					        @Override
					        double fare(int distance) {
					            return distance * BASIC_FARE * 0.5;
					        }
					    };
					
					    protected final int BASIC_FARE;  // 기본요금, protected로 선언해야 상수에서 접근 가능
					
					    Transport(int basicFare) {
					        BASIC_FARE = basicFare;
					    }
					
					    abstract double fare(int distance);   // 거리에 따른 요금 계산
				  
		- Enum은 언제 사용하는가		  
			- 필요한 원소를 컴파일 타임에 다 알 수 있는 상수 집합이라면 항상 열거 타입을 사용하자. 태양계 행성, 한 주의 요일, 
			  체스 말 처럼 본질적으로 열거 타입인 타입은 당연히 포함된다. 그리고 메뉴 아이템, 연산 코드, 명령줄 플래그 등 
			  허용하는 값 모두를 컴파일타임에 이미 알고 있을 때도 쓸 수 있다. 열거 타입에 정의된 상수 개수가 영원히 
			  고정 불변일 필요는 없다. 열거 타입은 나중에 상수가 추가되도 바이너리 수준에서 호환되도록 설계되었다.	
			  
	11.2 java.lang.Enum
		- Class getDeclaringClass(): 열거형의 Class객체를 반환
		- String name(): 열거형 상수의 이름을 문자열로 반환
		- int ordinal(): 열겨형 상수가 정의된 순서를 반환(0부터 시작)
		- T valueOf(Class enumType, String name): 지정된 열거형에서 name과 일치하는 열거형 상수를 반환
		- compareTo(E o): 지정된 객체보다 자긍ㄴ 경우 음의 정수, 동일한 경우 0, 크면 양의 정수를 반한
		
		- 그 밖에 Object클래스로부터 상속받은 메소드들이 있다.
		
	11.3 enum이 제공하는 메소드 (value(), valueOf())
		- java.lang.Enum 에선 values(), valueOf() 메소드에 대한 내용을 자세히 찾아볼 수 없다. 
		  그 이유는 컴파일러가 자동으로 추가해주는 메소드이기 때문이다.
		- 컴파일까지 실행한 후 바이트코드를 분석해보면 static으로 선언되어 있는 메소드 2개를 발견할 수 있다. 
		  이로써 values(), valueOf() 메소드는 컴파일러가 자동으로 추가해준다는 사실을 직접 확인할 수 있다.
		
		- static E values(): 해당 열거체의 모든 상수를 저장한 배열을 생성하여 반환
		- static E valuesOf(String name): 전달된 문자열과 일치하는 해당 열거체의 상수를 반환
		
		- ordinal
			- ordinal()의 가장 큰 문제점은 바로 순서가 바뀔 수 있다.
			- ordinal()은 Enum 내부에서 사용하기 위해 만든 것이지, 
			  프로그래머가 이 메서드에 의존하는 코드를 작성하는 것은 안티패턴이다.
			  
	11.4 EnumSet
		- Set 인터페이스를 기반으로 하면서 Enumeration type을 사용하는 방법이다.
		
		- EnumSet은 AbstractSet 클래스를 상속하고 Set 인터페이스를 구현한다.
		- 오직 열거형 상수만을 값으로 가질 수 있다. 또한 모든 값은 같은 enum type이어야 한다.
		- null value를 추가하는 것을 허용하지 않는다. NPE를 던지는 것도 허용하지 않는다.
		- ordinal값의 순서대로 요소가 저장된다.
		- thread-safe하지 않다. 동기식으로 사용하려면 Collections.synchronizedMap을 사용하거나, 
		  외부에서 동기화를 구현해야 한다.
		- 모든 메서드는 arithmetic bitwise operation을 사용하기 때문에 모든 기본 연산의 시간 복잡도가 O(1)이다
		
			import java.util.EnumSet;
	
			enum Gfg { CODE, LEARN, CONTRIBUTE, QUIZ, MCQ };
			
			public class EnumSetExample {
			    public static void main(String[] args) {
					
			       	// Creating a set
			        EnumSet<Gfg> set1, set2, set3, set4;
			        
			        // Adding elements
					set1 = EnumSet.of(Gfg.QUIZ, Gfg.CONTRIBUTE, Gfg.LEARN, Gfg.CODE); //일일이 입력
			        set2 = EnumSet.complementOf(set1); //인자로 들어온 enumset에서 누락된값만 집어넣음?
			        set3 = EnumSet.allOf(Gfg.class); //전체를 다 집어넣음
			        set4 = EnumSet.range(Gfg.CODE, Gfg.CONTRIBUTE); //시작범위, 끝범위 입력하면 그 사이에 값 대입
			
			
			        System.out.println("Set 1: " + set1);
			        System.out.println("Set 2: " + set2);
			        System.out.println("Set 3: " + set3);
			        System.out.println("Set 4: " + set4);
			    }
			}
			
		- EnumSet에 new 연산자를 사용하지 않는 이유
			- EnumSet은 다른 컬렉션들과 달리 new 연산자를 사용할 수 없다. 
			  단지 정적 팩토리 메소드만으로 EnumSet의 구현 객체를 반환받을 수 있다. 왜그럴까?
			- EnumSet의 내부를 살펴보면 abstract 클래스, 추상 클래스라는 것을 알 수 있다. 
			  즉, EnumSet은 추상 클래스이기 때문에 객체로 생성 및 사용이 불가능한 것이다.
			  
			- 왜 이렇게 만들었을까?
				1.사용자 편의성 
				  (사용자는 어떤 구현 객체가 적합한지 몰라도 상관없다.)
				  RegularEnumSet은 원소의 개수가 적을 때 적합하고, JumboEnumSet은 원소의 개수가 많을 때 적합하지만, 
				  이는 EnumSet의 구현체들을 모두 알고 있는 사용자가 아니라면 난해한 선택지가 될 수 있다. 하지만 EnumSet을 
				  가장 잘 알고 있는 EnumSet 개발자가 적절한 구현 객체를 반환해준다면 EnumSet을 사용하는 입장에서는 
				  어떤 구현체가 적합한지 고려하지 않아도 된다.  
				2.사용자 편의성2 
				  (사용자는 빈번하게 발생되는 EnumSet 초기화 과정을 간단히 진행할 수 있다.)
				  EnumSet이 다루는 Enum의 모든 원소들을 Set에 담는 행위는 빈번하게 수행될 것으로 예상되는 일이다. 
				  이러한 경우를 대비하여 EnumSet의 allOf라는 메소드를 사용하면 모든 Enum 원소가 담겨있는 EnumSet을 쉽게 
				  반환받고 사용할 수 있다.
				3.EnumSet의 확장성과 유지보수의 이점
				  EnumSet을 유지보수하는 과정에서 RegularEnumSet과 JumboEnumSet 이외에 다른 경우를 대비하는 
				  구현 클래스가 추가 된다고 하여도 내부에 감추어져 있기 때문에, EnumSet을 사용하면 기존의 코드에는 전혀 영향이 없다. 
				  심지어 RegularEnumSet이 삭제된다 하더라도 사용자에게 영향이 없다 이는 EnumSet의 확장성의 
				  큰 이점으로 작용할 수 있다.
				  
				  
				  
			    
			  
			  	
		
		
		
		
			  
			  
			  
		  
		    
		  
		
	
		
		
			  
			  	  
				  
				    
				  
				  
				  	
				
							
			  
			  
			  	
	