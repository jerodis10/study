5.Class
	5.1 객체 만드는 방법 (new 키워드 이해하기)
	5.2 메소드 정의하는 방법
	5.3 생성자 정의하는 방법
	5.4 this 키워드 이해하기
	
	
	- 클래스를 정의하는 방법
		- 객체 지향 프로그래밍(Object-Oriented Programming)이란 컴퓨터 프로그래밍의 패러다임 중에 하나로, 
		  프로그래밍에서 필요한 데이터를 추상화시켜 상태와 행위를 가진 객체를 만들어 자율적인 객체들끼리 상호작용하여 
		  시스템을 분할하는 방법이다. 즉, 객체지향의 세계에서는 객체들이 서로 메시지를 주고받으며 돌아가는 시스템인데 
		  이러한 객체를 만들어 주는게 클래스이다.
		
		- 클래스란 객체를 만드는데 필요한 구현 메커니즘일뿐이다. 
		
		- 클래스는 객체의 정적인 타입(상태, 행위)을 기술하지만 객체는 각각 동적으로 
		  메시지를 주고받으면서 협력하는 것이 바로 객체지향이다.
		  
		- 보통 자바 코딩을 할 때 클래스에 기능 구현 시 어떤 클래스를 만들고 그안의 변수, 메소드 등 클래스 관점에서 
		  생각을 많이 한다. 하지만 이는 잘못된 생각이고 객체들간의 커뮤니케이션에 초점을 맞춰야 한다.
		
	- 클래스를 만들 때 주의할 점	
		1. 관례상 클래스는 명사이여야 하며 각 단어의 첫글자를 대문자로 하는 파스칼 표기법으로 네이밍을 한다.
		2. 한 클래스파일 내에 여러 클래스들을 정의할 수 있지만 public 접근 제한자가 붙은 클래스는 딱 하나이여야 한다. 
		   또한, 파일 이름과 동일한 이름의 클래스에만 public 접근 제한자를 붙일 수 있다.
		3. 첫 번째 글자는 숫자가 올 수 없다.
		4. '$', '_' 이외의 특수 문자는 사용할 수 없다. 
		5. 클래스명은 한글, 영어 둘다 되지만 그냥 영어로 쓰자...^^
		6. 클래스 명으로 자바의 예약어를 사용할 수 없다.
		
		
	5.1 객체 만드는 방법 (new 키워드 이해하기)
	 	- 클래스로부터 객체를 만드는 것을 클래스의 인스턴스화라고 하며, 
	 	  어떤 클래스로 부터 만들어진 객체를 그 클래스의 인스턴스라고 한다. 
	 	  
	 	- Animal animal = new Anima();   
	 	1. new 연산자를 통해 객체를 만들었다.
	 	2. 이는 힙(heal)영역에 데이터를 저장할 공간을 할당받고 할당받은 공간의 참조값(객체의 주소값)을 
	 	   객체변수(animal)에게 반환한다.
	 	3. new 오른쪽에 있는 기본 생성자를 호출한다.
	 	4. 건네받은 주소를 참조 타입인 클래스 변수에 저장해두면, 
	 	   변수를 통해 객체를 사용하여 클래스에 정의한 메소드를 호출한다.
	 
	5.2 메소드 정의하는 방법	
	 	- 접근제어자
	 		- public : 같은 프로젝트 폴더 안에 있는 어디든 접근할 수 있다.
  			- protected : 같은 패키지안에 존재하면 접근가능하며, 다른 패키지더라도 상속관계면 접근이 가능하다.
  			- default : 접근제어자 생략시 자동으로 붙는 것으로 같은 패키지안에 존재하면 접근이 가능하다.
  			- private : 같은 패키지의 같은 클래스에서만 접근이 가능하다.
  			
  		- 제어자
  			- static이 붙은 메서드는 객체를 생성하지 않고 클래스명.메소드명으로 바로 접근이 가능하다.
			  static이 붙지 않았다면 메소드가 존재하는 객체를 생성한 다음 접근할 수 있다.		
			  
	5.3 생성자 정의하는 방법
		- 생성자에서 초기화하지 않고 자바 빈 규약에 의한 setter 메서드를 통해 객체를 먼저 생성 후 값을 세팅할 수도 있다.
		  만약 한번 할당받고 더이상 수정이 원치않는 필드값에 대한 setter메서드가 존재하면 후에 값이 마음대로 변경될 
		  가능성이 있기 때문에 객체 생성시 필드값을 강제로 초기화하는 방법이 더 적절하다.(final 키워드를 붙이면 된다)	
		  
		- 자바에서는 생성자가 아무것도 없으면 컴파일러가 자동으로 기본생성자를 만들어 준다.
		- 컴파일러가 만들어 주는 기본 생성자의 경우, 상위 클래스의 기본 생성자를 호출(super(); 생략)한다.
		- 만약 상위 클래스에서 기본 생성자가 존재하지않고, 하위 클래스는 컴파일러에 의해 기본 생성자가 
		  생성되는 경우에는 컴파일 에러가 발생한다.   
		- 하지만 생성자가 하나라도 존재하면 기본생성자를 자동으로 만들어주지 않기 때문에 직접 작성해주어야 한다. 
		
	5.4 this 키워드 이해하기
		- 자바에서 this 키워드는 객체의 자기자신을 가르키는 참조이다.
		- 즉, 자기자신의 메모리 주소를 담고 있는 키워드이다.
		- 모든 인스턴스메서드에 지역변수로 숨겨진 채로 존재한다.
		
		1. 객체 자신의 속성(변수)값을 가리키기 위해 사용한다.
		2. 클래스 내부에서 생성자 오버로딩된 다른 생성자 호출하기 위해 사용한다.	
			- 주의할 점
				- 생성자의 이름으로 클래스이름 대신 this를 사용한다.
					=> Car(color, "auto", 4); 불가능
				- 한 생성자에서 다른 생성자를 호출할 때는 반드시 첫 줄에서만 호출이 가능하다.
				
		3. 객체 자신의 참조값을 전달하고 싶을 때 사용한다.
		
	* 인스턴스 초기화 순서				  
  		- 초기화 순서 : 기본값 => 인스턴스 초기화 -> 생성자
  		
  	* 생성자 != 메서드	
  		- 만약 메소드였다면 Init(int number)안에서 Init();를 호출할 수 있어야 한다.
  		
  	* 클래스 종류
  		- Nested Class(중첩 클래스)
  			- 한 클래스 내부에 다른 클래스를 선언한 것이다.
  			
  			- static 키워드를 이용한 경우, static nested class라고 한다.
  			- static 키워드를 이용하지 않은 경우, inner class라고 한다.
  			
  			- 중첩 클래스는 중첩 클래스를 둘러싼 클래스의 멤버이기 때문에, 둘러싼 클래스의 필드에 얼마든지 접근이 가능하다.
  			  (private로 되어있어도 접근 가능). 하지만 static으로 선언한 중첩 클래스의 경우 필드에 접근이 불가능 하다.
			  중첩 클래스 또한 둘러싼 클래스의 멤버이기 때문에, 모든 접근제어 지시자를 사용할 수 있다.
  		
  			- 중첩 클래스를 사용하는 이유
  				- 한 곳에서만 사용되는 클래스들을 논리적으로 그룹화 할 수 있다
  				- 캡슐화를 증가시킬 수 있다.
  				- 좀 더 읽기 쉽고 유지보수하기 쉬운 코드를 작성할 수 있다.
  		
  		- Static Nested Class
  			- Static Nested Class는 바깥 클래스의 변수나 메서드에 직접 접근이 불가능하다. 
  			  따라서 바깥 클래스의 변수나 메소드에 접근하기 위해서는 그 클래스의 객체 참조를 사용해야한다.
  			
  			- Static Nested Class는 일반적으로 선언하는 클래스처럼 사용된다. 
  			  따라서 단순히 패키징을 보다 편하기 하기 위해 사용된 클래스라고 이해하면 된다.
  			  
  			- public class OuterClass {
				    public static class StaticNestedClass {
				
				    }
				}
				
				public class Main {
				    public static void main(String[] args) {
				        OuterClass.StaticNestedClass staticNestedClass = new OuterClass.StaticNestedClass();
				    }
				}
  		
  		- Inner Class
  			- Inner Class는 객체의 메서드나 필드에 바로 접근이 가능하지만, Inner Class는 인스턴스와 관련되기 때문에
  			  (정확히는 인스턴스의 멤버 변수로서 정의되기 때문에) static 멤버 변수를 가질 수 없다.
  			  
  			- public class OuterClass {
				    public class InnerClass {
				        static int NUMBER = 10; // 컴파일 에러 발생
				        static final int IMMUTABLE_NUMBER = 10; // 선언 가능
				    }
				}  
			
			  위의 코드를 보면 단순히 static키워드만 쓴 멤버 변수는 컴파일 에러가 발생한다. 그러한 이유는 Inner Class는 
			  바깥 클래스의 인스턴스에 종속적인데, 바깥 클래스에 대한 인스턴스를 여러개 생성한 경우, 어떤 인스턴스의 
			  static 멤버 변수 값이 옳은 것인지 알 수 없기 때문이다. 하지만 final 키워드를 사용하게 될 경우 값이 
			  컴파일 시점에 결정되고 변경될 수 없기 때문에 사용이 가능하다.	
			  
			- Inner Class를 인스턴스화 하기 위해서는 먼저 바깥 클래스를 인스턴스화 해야 한다. 
			  그 후 바깥 클래스의 인스턴스를 이용하여 Inner Class 객체를 만들 수 있다.
			  public class OuterClass {
				    public class InnerClass {
				    }
				}
				
				public class Main {
				    public static void main(String[] args) {
				        OuterClass outerClass = new OuterClass();
				        
				        OuterClass.InnerClass innerClass = outerClass.new InnerClass();
				    }
				}
			  
			- Inner Class에 바깥 클래스의 멤버 변수와 동일한 멤버 변수가 존재할때,
			  { 바깥 클래스의 이름 }.this{ 멤버 변수 }로 바깥 클래스의 멤버 변수에 접근할 수 있다.  
			  
			  public class OuterClass {
				    private int number = 20;
				
				    public class InnerClass {
				        private int number = 30;
				    
				        public void method(int number) {
				            System.out.println(number); // 10이 출력됩니다.
				            System.out.println(this.number); // 30이 출력됩니다.
				            System.out.println(OuterClass.this.number);  // 20이 출력됩니다.
				        }
				    }
				}
				
				public class Main {
				    public static void main(String[] args) {
				        OuterClass outerClass = new OuterClass();
				        OuterClass.InnerClass innerClass = outerClass.new InnerClass();
				
				        innerClass.method(10);
				    }
				}
				
		- Local Class
			- Local Class란 코드 블럭 { } 안에 정의된 클래스를 의미한다. 
			  Local Class는 특정 메서드내에서만 필요한 객체가 필요할 때 주로 사용된다.		
		
		- Anonymous Class
			- Anonymous Class는 이름이 없다는 것만 제외하면 Local Class와 동일하다. 따라서 Local Class를 
			  한번만 사용해야하는 경우에 사용할 수 있다. 또한 Anonymous Class 선언과 동시에 인스턴스화가 가능하다.		
			
			- Anonymous Class 표현식은 다음으로 구성
			  - new 연산자
			  - 구현하고자 하는 클래스 혹은 인터페이스의 이름
			  - 구현하고자하는 클래스의 생성자와 동일한 arguments를 가진 괄호, 인터페이스의 경우 빈 괄호를 사용
			  - 클래스를 정의한 body 부분. 메서드는 선언할 수 있지만, 명령어는 선언할 수 없다.
			
			- Anonymous Class 제약사항
			  - final 혹은 effectively fianl이 아닌 지역 변수에 접근할 수 없다.
			  ※ effectively fianl : final이 붙지 않은 변수의 값이 변경되지 않는 변수
			  - 중첩클래스처럼 바깥 클래스의 변수와 동일한 이름으로 선언시 바깥 클래스의 변수를 가리키게 된다.
			  - static 초기화 블럭 및 멤버 interface를 선언할 수 없다.
			  - 상수 변수에 한해서만 static 멤버를 가질 수 있다.
			  - 생성자를 정의할 수 없다.
			
			- Anonymous Class 허용사항
			  - 바깥 클래스의 멤버에 접근할 수 있다.
			  - 필드, 추가 메서드, instance 초기화 블럭 및 Local Class를 선언할 수 있다.  
			  
	* 컴파일된 클래스 파일이 로드되고 메모리에 적재되기 까지의 과정
				  
	* 만약 런타임시 클래스의 정보를 알고 싶다면?		  			  
  					