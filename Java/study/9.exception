9.exception
	9.1 예외 처리란?
	9.2 자바에서 예외 처리 방법
	9.3 예외처리 전략
	9.4 자바가 제공하는 예외 계층 구조
	9.5 Exception과 Error의 차이는?
	9.6 RuntimeException과 RE가 아닌 것의 차이는?
	9.7 커스텀한 예외 만드는 방법
	
	
	9.1 예외 처리란?
		- 세상에 완벽한 프로그램은 없다. 코드에 문제가 없을 것 같더라도 외부환경요인 등에 의해 문제가 발생하곤 한다.
		  예외 처리란 문제가 발생될 만한 곳을 예상하여 사전에 '문제가 발생하면 이렇게 해라'라고 프로그래밍 하는 것이다.
		- 즉, 어느 한 부분에서 예외가 발생하더라도 계속해서 프로그램이 동작되도록 하는데 목적이 있다.
		
		- 반드시 주의해야 하는 점
			- 바로 예외를 잡고 아무런 처리도 하지않는 것!!
			- try/catch문으로 예외를 잡아놓고 catch문을 비워놓는다?
			- 컴파일 오류는 나지 않지만 예외가 발생했을 때 원인 파악이 어려워 개발 & 유지보수에 치명적
			- 따라서, 무작정 catch하고 무시하거나, throw해버리는 행위는 지양해야 한다.
			
		- 메서드내에서 에러가 발생하면, 메서드는 객체를 만들고 런타임 시스템에 전달
		- 이 객체는 예외 객체라고 불리며 에러에 대한 정보와 이에 대한 타입, 에러가 발생한 시점의 프로그램의 상태에 대한 
		  정보를 담고 있습니다. 예외 객체를 생성하여 런타임 시스템에 전달하는 것을 예외를 던진다고 표현	 
		- 메서드가 예외를 던지면, 런타임 시스템은 해결할 수 있는 '무엇'을 찾기위해 시도합니다. 
		- 예외를 처리할 수 있는 '무엇'의 집합은 오류가 발생한 메소드를 사용하기 위해 불려진 
		  메소드의 순서가 있는 리스트입니다. 메서드의 리스트는 콜 스택이라고 알려져 있습니다.	
		
		- 런타임 시스템은 예외를 제어할 수 있는 코드 블럭을 가지고 있는 메서드를 찾기 위해 콜스택에서 검색합니다.
		- 이 코드 블럭을 exception handler라고 부릅니다.
		- 검색은 오류가 발생한 메서드로부터 시작하여 메서드가 호출된 역순으로 콜 스택을 통해서 진행됩니다.
		- 적절한 핸들러가 발견되면, 런타임 시스템은 예외를 핸들러로 전달합니다.
		- exceptiton handler는 던져진 예외 오브젝트의 타입이 핸들러가 제어할 수 있는 타입과 
		  일치하는 경우 적절하다고 간주됩니다.
		- 선택된 exception handler는 예외를 잡았다고 말합니다.
		- 만약에 런타임 시스템이 적절한 exception handler를 찾지 못하고 콜 스택의 모든 메서드를 철저하게 검색하면, 
		  런타임 시스템(결과적으로 프로그램)은 종료됩니다. (이는 비정상 종료로 볼 수 있습니다.)	
		  
	9.2 자바에서 예외 처리 방법	
		- try-catch-finally
			- catc문의 예외타입을 작성할 때는 항상 명확한 예외 타입을 작성하는 것을 우선해야 한다.
			  오류 처리가 귀찮아서 Exception 예외타입(상위)을 이용해 묶어서 catch 처리하는 경우도 있는데 
			  이 부분은 차후 실무에서 보안에 대한 부분을 대응하다보면, 명시적이지 않기 때문에 이슈가 된다.
			  또한, Exception에 대한 처리 가독성이 현저히 저하된다.(어떤 이슈가 발생될지 모른다)
			  우가 작성하는 코드임으로 명확한 Exception 타입을 작성하여 해당 Exception에 적절한 처리가 
			  될 수 있도록 작성하자.  
			  
			- 단 하나의 catch 절을 사용해 모든 오류 정보를 전달받고 특정 오류만 instanceof를 이용해 선택적으로 
			  처리할 경우 예측 가능한 오류만 처리하고 그 밖의 모든 예외는 무시된다. 예측 불가능한 예외는 무시되거나 
			  잘못된 오류 절차로 이어질 수 있으며, 특히 외부 오류로 발생한 오류도 예측 불가능한 오류로 분류되어 
			  오류가 발생해도 오류가 발생한 정확한 이유를 알 수 없거나 예외 자체가 무시되어 오류가 발생하지 않은 
			  상태로 가장할 수 있다.	
			  
			- 해결책 -> 내/외부 오류를 분리해서 예외를 처리
				- 예측 불가능한 오류는 그대로 발생하게 해서 나중에 문제가 발생했을 때 이를 처리할 수 있게 작성.
				
			- 반복문 내에서는 Checked Exception에 대한 처리는 지양해야 한다.
			  반복문 내에서 Checked Exception에 대한 예외처리 구문이 들어가게 되면 성능은 2배 3배 떨어지게 된다. 
			  이러한 경우에는 insert에서 예외 발생 시, RuntimeException으로 한번 Wrapping하여 Exception이 
			  발생 되도록 하고 반복문 내에서는 최대한 예외처리에 대한 코드를 제거하는 것이 성능상 유리하다.
			  
			- finally 안에서 return을 하는 경우에는 신중해야 한다.
			  finally 안에 return : try 블록 안에서 발생한 예외는 무시되고 
			  finally 거쳐 정상종료(예외를 알 수 없음)	
			  
			(1) try 블록 안에 return 있는 경우  
				- catch문을 통과하지 않고 출력되었다.
			(2) 예외 발생 상황에서 catch 블록 안에 return이 있는 경우
				- 예상대로 try → catch → finally 통과 하였고 정상 결과에는 
				  catch 블록에서 처리한 값이 출력되었다.
			(3) finally에 return 이 존재하는 경우	  
				- 값이 변경되는 현상 발생	  
			
		- throw
			- throw 키워드를 통해서 고의로 예외를 발생 시킬 수 있다. 프로그램 동작 중에 개발자가 원하는 조건을 
			  만족하지 않을 때 더 이상 코드가 진행하지 못하게 예외를 발생시킬 때 사용한다. 
			  대표적으로 라이브러리를 만들 때 사용한다고 한다.		
		
		- throws
			- 예외가 발생한 메소드를 호출한 곳으로 예외 객체를 넘기는 방법.
			- 자바의 예외 처리 방법은 예외가 발생한 지점에서 try-catch 혹은 try-catch-finally 블록을 이용하여 
			  직접처리 하지 않아도 예외가 발생한 메소드를 호출한 지점으로 예외를 전달하여 처리하는 방법이 있다.	  
			  
		- multicatch block		
			- JDK1.7이상 부터는 여러개의 catch문들을 하나로 합칠 수 있게 되었다.
			- 단, 나열된 예외 클래스들이 부모-자식 관계에 있다면 오류가 발생한다.
			- 왜냐하면, 자식 클래스로 잡아낼 수 있는 예외는 부모 클래스로도 잡아낼 수 있기 때문데 사실상 코드가 
			  중복된 것이나 마찬가지이기 때문이다. 이때 컴파일러는 중복된 코드를 제거하라는 의미에서 에러를 발생시킨다.
			- 또한, multicatch는 하나의 블록으로 여러 예외를 처리하는 것이기 때문에 multicatch 블럭 내에서는 
			  발생한 예외가 정확히 어디에 속한 것인지 알 수 없다. 그래서 참조 변수 e에는 '|'로 연결된 예외들의 
			  공통 조상 클래스에 대한 정보가 담긴다.  
	
		- try-with-resources		  
			- JDK 1.7부터 나온것으로 try에 자원 객체를 전달하면, 
			  try 코드 블록이 끝나면 자동으로 자원을 종료해주는 기능이다.	
			- 즉, 따로 finally 블럭이나 모든 catch 블럭에 종료 처리를 하지 않아도 된다.
			- 이 때, try에 전달할 수 있는 자원은 AutoCloseable 인터페이스의 구현체로 한정된다.
			
	9.3 예외처리 전략
		(1) 예외 복구
			- 재시도를 통해 예외를 복구하는 코드
				int maxretry = MAX_RETRY;
				while(maxretry -- > 0) {
				    try {
				        // 예외가 발생할 가능성이 있는 시도
				        return; // 작업성공시 리턴
				    }
				    catch (SomeException e) {
				        // 로그 출력. 정해진 시간만큼 대기
				    } 
				    finally {
				        // 리소스 반납 및 정리 작업
				    }
				}
				throw new RetryFailedException(); // 최대 재시도 횟수를 넘기면 직접 예외 발생
			
				- 예외복구의 핵심은 예외가 발생하여도 애플리케이션은 정상적인 흐름으로 진행된다는 것이다. 
				  위 리스트[1]은 재시도를 통해 예외를 복구하는 코드이다. 이 예제는 네트워크 환경이 좋지 않아 
				  서버에 접속이 안되는 상황의 시스템에 적용하면 효율적이다. 예외가 발생하면 그 예외를 잡아서 
				  일정 시간만큼 대기하고 다시 재시도를 반복한다. 그리고 최대 재시도 횟수를 넘기면 예외를 발생시킨다. 
				  재시도를 통해 정상적인 흐름을 타게 한다거나, 예외가 발생하면 이를 미치 예측하여 다른 흐름으로 
				  유도시키도록 구현하면 비록 예외가 발생하였어도 정상적으로 작업을 종료할 수 있을 것이다.
		
		(2) 예외처리 회피		  
			public void add() throws SQLException {
			    ... // 구현 로직
			}		 
			
			- 위 코드는 간단해보이지만 아주 신중해야하는 로직이다. 예외가 발생하면 throws를 통해 호출한쪽으로 예외를 
			  던지고 그 처리를 회피하는 것이다. 하지만 무책임하게 던지는 것은 위험하다.
			- 외부로 던져버리면 문제점의 발생 원인이 정확히 내부의 잘못에서 발생한 문제인지 외부에서 잘못 호출해서 
			  발생한 문제인지 구분하거나 그 원인을 파악하기가 매우 어렵다. 
			- 호출한 쪽에서 다시 예외를 받아 처리하도록 하거나, 
			  해당 메소드에서 이 예외를 던지는 것이 최선의 방법이라는 확신이 있을 때만 사용해야 한다.
			  
		(3) 예외 전환
			- 예외전환을 위한 중첩 예외
				// 예외의 에러 코드에 따라 분기하여 예외 전환
				public void add(User user) throws DuplicateUserIdException, SQLException {
				    try {
				        // code ..
				    } catch (SQLException e) {
				        if (e.getErrorCode() == MysqlErrorNumbers.ER_DUP_ENTRY) {
				            throw new DuplicateUserIdException();
				        }
				
				        throw e;
				    }
				}	
				
				- 위 코드는 예외를 잡아서 다른 예외를 던지는 것이다. 호출한 쪽에서 예외를 받아서 처리할 때 
				  좀더 명확하게 인지할 수 있도록 돕기 위한 방법이다. 어떤 예외인지 분명해야 처리가 수월해지기 
				  때문이다. 예를 들어 Checked Exception중 복구가 불가능한 예외가 잡혔다면 이를 
				  UnChecked Exception으로 전환하여 다른 계층에서 일일이 
				  예외를 선언할 필요가 없도록 할 수도 있다.  
			  	  
	9.4 자바가 제공하는 예외 계층 구조		
		- java.lang.Throwable class가 Java Exception의 Root Class이다.		  
			- Exception과 Error 클래스는 Throwable 클래스를 상속받아 처리하도록 되어있다.	    
			- Throwable클래스에 선언되어있고, Exception클래스에서 오버라이딩한 메소드는 10개가 넘으며, 
			  가장 많이 사용되는 메소드는 아래와 같다.  
				- getMessage(): 예외 메시지를 String형태로 제공받는다.
				- toString(): 예외 메시지를 String형태로 제공 받는다. 
				  (getMessage()메소드 보다는 약간 더 자세하게)	  
				- printStackTrace(): 가장 첫 줄에는 예외 메시지를 출력하고, 
				  두 번째 줄부터는 예외가 발생하게 된 메소드들의 호출 관계(Stack Trace)를 출력해준다.
				  	- printStackTrace()는 서비스 운용시 사용하면 안된다.
				  	- 개발할 때는 디버깅에 유용해서 좋다. 하지만 성능을 생각하면 지양해야 한다. 
				  	  왜냐하면 java reflection을 사용하여 trace를 추적하는 것이기 
				  	  때문에 꽤 오버헤드가 발생한다.  
				  
		- 계층은 크게 Exception과 Error로 나뉜다.	  
			- RuntimeException 		
				1. Arithmetic exception	
					- 산술 연산에서 예외 조건이 발생했을 때 발생
				2. ArrayIndexOutOfBounds Exception	
					- 잘못된 인덱스로 Array에 액세스했을 때 발생, 
					  인덱스가 음수이거나 배열 크기보다 크거나 같을 때 발생	
				3. NullPointerException
					- null 객체의 멤버를 참조할 때 발생
					
					※ NullPointerException 을 피하는 방법	
						(1) equals 메소드 사용시
							- null 일 수 있는 객체에서 equals 메소드 호출은 피하는게 좋다.
							
							public void doSomething() {
							   // name이 null일 경우, NPE 발생!
							   if (name.equals("BAD")) {
							      // do something
							   }
							}
							
							public void doSomething() {
							   // name이 null이어도 NPE 발생 안함
							   if ("BAD".equals(name)) {
							      // do something
							   }
							}
					
							- 다만 equals을 통과한 null 객체가 if문 안에서 메소드 호출 등의 이유로 
							  다시 사용된다면 동일한 NPE가 발생할 수 있으니 미리 null체크를 하는것이 좋다.
					
						(2) toString()보다는 valueOf()를 사용할 것
							- null 일 수 있는 객체에서 메소드 호출은 NPE 발생 위험이 있다. 
							  static으로 제공되는 valueOf()를 사용하면 null을 Parameter로 넘겨도 
							  null을 return할 뿐 NPE는 발생하지 않는다.
							- (valueOf()는 String, Boxed Primitives 
							  클래스(Integer, Double 등)에서 static 메소드로 제공된다.)
							
						(3) 메소드 체이닝 호출 자제하기	
							- String city = getPerson(id).getAddress().getCity();
							- 중간에 return 받은 값이 null일 경우 NPE가 발생하여 Stack Trace에서도 
							  해당 line 위치만 출력되기 때문에 어디서 에러가 발생했는지 디버깅하기도 어렵다.
							  
					- 라이브러리 이용하기
						(1) Apache Commons의 StringUtils
							- String의 null 체크를 간단히 할 때 많이 사용하는 클래스. 
							  StringUtils.isNotEmpty(), isBlank(), isNumeric(), 
							  isWhiteSpace() 등이 있다.	  
							  
						(2) Optional 을 사용	
							- Optional이란 "존재할 수도 있지만 안할 수도 있는 객체", 즉, "null이 될 수도 
							  있는 객체"를 감싸고 있는 일종의 래퍼 클래스.	
							
							- NPE를 유발할 수 있는 null을 직접 다루지 않아도 된다.
							- 수고롭게 null체크를 직접하지 않아도 된다.
							- 명시적으로 해당 변수가 null일 수도 있다는 가능성을 표현할 수 있어 
							  불필요한 방어 로직을 줄일 수 있다.
							  
				4. IllegalArgumentException
					- 어떤 메서드를 호출할때, 잘못된 변수를 전달하면 발생하는 예외입니다.
						Ex) Mybatis 사용 시 Mapper XML에서 해당 쿼리를 찾지 못하는 현상
						   (Mapper XML을 찾지 못하는 문제)			  
				
				5. IllegalStateException	
					- 메서드 호출이 잘못된 시점에 호출되었을때 발생하는 예외입니다.
					
					public class Example {
					  public static void main(String[] args) {
					    ListIterator<Object> it = new ArrayList<>().listIterator();
					    it.remove(); // illegalStateException 발생
					  }
					}
					
					
				6. ClassCastException
					- 런타임시 객체를 다운 캐스팅할때, 맞는 인스턴스가 아닌 객체를 캐스팅할때 발생하는 예외입니다.
					
			- Checked Exception			
				1. ClassNotFoundException
					- 정의한 클래스를 찾을 수 없을 때 발생하는 예외
								
				2. FileNotFoundException
					- IOException을 상속받는 클래스, 파일에 액세스 할 수 없거나 열리지 않을 때 발생
					
				3. IOException	
					- 입출력 작업이 실패하거나 중단될 때 발생
					
				4. InterruptedException
					- Thread가 waiting, sleeping 또는 어떤 처리를 하고 있을 때 
					  interrupte가 되면 발생하는 예외.
					  
				5. NumberFormatException
					- 메서드가 문자열을 숫자 형식으로 변환할 수 없는 경우 이 예외가 발생하는 예외
					
	9.5 Exception과 Error의 차이는?
		- Exception과 Error은 모두 최상위 예외 클래스인 Throwable 클래스의 하위클래스이다.
		
		- Error
			- 시스템에 비정상적인 상황이 생겼을 때 발생
			- 시스템 레벨에서 발생하기 때문에 심각한 수준의 오류
			- 따라서 개발자가 미리 예측하여 처리할 수 없기 때문에, 
			  애플리케이션에서 오류에 대한 처리를 신경 쓰지 않아도 된다.
			- 주로, 시스템 리소스 부족 혹은 시스템 충돌 오류		  
		
		- Exception			  
			- 개발자가 구현한 로직에서 발생
			- 발생할 상황을 미리 예측하여 처리할 수 있다.
			- 그럼으로 예외를 구분하고 그에 따른 처리 방법을 명확히 알고 적용하는 것이 중요하다.
			
	9.6 RuntimeException과 RE가 아닌 것의 차이는?
		- Exception은 Checked Exception과 Unchecked Exception(=RuntimeException)으로 나뉜다.
		- 가장 큰 차이는 '꼭 처리를 해야 하느냐' 이다.
		- Checked Exception이 발생할 가능성이 있는 메소드라면 반드시 try/catch로 감싸거나 
		  throw로 던져서 처리해야 한다. 즉, 꼭 처리해야 하는 Exception이다.		
		- 반면에, Uchecked Exception은 명시적인 예외처리를 하지 않아도 된다.
		  이 예외는 피할 수 있지만 개발자가 부주의해서 발생하는 경우가 대부분이고, 미리 예측하지 못했던 상황에서 
		  발생하는 예외가 아니기 때문에 굳이 로직으로 처리를 할 필요가 없도록 만들어져 있다.
		  
	9.7 커스텀한 예외 만드는 방법
		1. Always Provide a Benefit
			- 어떠한 장점을 제공할 수 없는 예외를 만드는 것 보다 오히려 UnsupportedOperationException 이나, 
			  IllegalArgumentException과 같은 표준 예외 중 하나를 사용하는 것이 낫다.  
		  
		2. Follow the Naming Convention
			- JDK가 제공하는 예외 클래스들을 보면 클래스의 이름이 모두 "Exception"으로 끝나는 것을 알 수 있다. 
							
		3. Provided javadoc Comments for Your Exception Class				
			- 기본적으로 API의 모든 클래스, 멤버변수, 생성자들에 대해서느 문서화 하는 것이 
			  일반적인 Best Practices이다.		
			- 잘 알겠지만 문서화되지 않은 API들은 사용하기 매우 어렵다.
			- JavaDoc은 예외가 발생할 수 있는 상황과 예외의 알반적인 의미를 기술한다.
			- 목적은 다른 개발자들이 API를 이해하고 일반적인 에러상황들을 피하도록 돕는 것이다.
			
		4. Provide a Constructor That Sets the Cause
			- 커스텀 예외를 던지기 전에 표준 예외를 Catch하는 케이스가 꽤 많다.
			- 이 사실을 간과하지 말자.
			
		- Exception과 RuntimeException	
			- Exception과 RuntimeException은 예외의 원인을 기술하고 있는 
			  Throwable을 받을 수 있는 생성자 메소드를 제공한다.
			- 만들고자 하는 커스텀 예외도 이렇게 하는 것이 좋다.
			- 발생한 Throwable을 파라미터를 통해 가져올 수 있는 생성자를 최소한 하나를 구현하고 
			  SuperClass에 Throwable을 전달해줘야 한다.  
			  
			  public class MyBusinessException extends Exception {
				    public MyBusinessException(String message, Throwable cause, ErrorCode code) {
				            super(message, cause);
				            this.code = code;
				        }
				        ...
				}
		
		- Custom Checked Exception
			- Checked Exception을 구현하기 위해서는 Exception 클래스를 상속받아야 하는데, 
			  커스텀 예외를 구현하기 위해 필요한 필수사항이다.	
			  
			    /**
				 * The MyBusinessException wraps all checked standard Java exception and enriches them with a custom error code.
				 * You can use this code to retrieve localized error messages and to link to our online documentation.
				 * 
				 * @author TJanssen
				 */
				public class MyBusinessException extends Exception {
				    private static final long serialVersionUID = 7718828512143293558 L;
				    private final ErrorCode code;
				    public MyBusinessException(ErrorCode code) {
				        super();
				        this.code = code;
				    }
				    public MyBusinessException(String message, Throwable cause, ErrorCode code) {
				        super(message, cause);
				        this.code = code;
				    }
				    public MyBusinessException(String message, ErrorCode code) {
				        super(message);
				        this.code = code;
				    }
				    public MyBusinessException(Throwable cause, ErrorCode code) {
				        super(cause);
				        this.code = code;
				    }
				    public ErrorCode getCode() {
				        return this.code;
				    }
				}
				
		- Custom Unchecked Exception
			- Custom Unchecked Exception 예외 구현은 checked exception 예외 구현가 동일하다.
			- 한가지 차이가 있는데 "Exception"을 확장하는 것이 아닌 "RuntimeException"을 확장한다.
			
		- Spring 예외 처리

			@RestControllerAdvice
			public static class ExceptionHandlers {
			    @ExceptionHandler(RuntimeException.class)
			    ResponseEntity<ErrorResponse> handleConstraintViolationException(RuntimeException e) {
			        final ErrorResponse response = ErrorResponse.of(ErrorCode.MEMID_NOT_FOUNDED);
			        return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
			    }
			}	
				
			- Exception이 발생할 경우 이를 캐치해줄 ExceptionHandler을 만들어준다.
			- 위 코드서는 RuntimeException이 발생한 경우 커스텀한 Response로 예외를 뿌려주게 된다.
					
	* 예외처리 비용
		- 보통 예외처리는 비용이 비싸다.
		- try-catch를 동작 하면서 발생하는 검사들도 하나의 원인이겠지만, Throwable 생성자의 fillInStackTrace()
		  메서드가 주 원인이다. 이 메서드는 예외가 발생한 메서드의 Stack Trace를 모두 출력해주기 때문이다. 
		  StackTrace란 Application이 실행된 시점부터 현재 실행 위치까지의 메서드 호출 목록이다.			  	
		- 커스텀 예외에서 이 메서드를 오버라이딩해 스택 트레이스를 최소화 해줄 수 있다.		
		- 하지만 예외 처리 비용을 아끼겠다고 굳이 사용할 일이 생길까 싶긴하다…
		
			  
				
				
				
				
				
						  
							  
							