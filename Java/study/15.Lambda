15.Lambda
	15.1 람다식 사용법
	15.2 함수형 인터페이스
	15.3 Variable Capture
	15.4 메소드, 생성자 레퍼런스
	
	
	15.1 람다식 사용법
		- 람다식이란?
			- 람다식은 메소드를 하나의 '식(expression)'으로 표현한 것이다.
			- 메소드를 람다식으로 표현하면 메소드의 이름과 반환값이 없으므로, 
			  람다식을 '익명 함수(anonymous function)'이라고도 한다.
			- 메서드 형태보다 람다식이 간결하면서도 이해하기 쉽다.
			  게다가 모든 메서드는 클래스에 포함되어야 하므로 클래스도 새로 만들어야 하고, 객체도 생성해야 이 메소드를 호출할 수 있지만, 
 			  람다식은 이 과정 없이 오직 람다식 자체만으로 이 메서드의 역할을 수행할 수 있는 것이 큰 장점이다.  
 			  
 			* 메서드와 함수의 차이  
 				-  객체지향개념에서는 함수(function) 대신 객체의 행위나 동작을 의미하는 메서드(method)라는 용어를 사용한다.
 				- 메서드는 함수와 같은 의미이지만, 
 				  특정 클래스에 반드시 속해야 한다는 제약이 있기 때문에 기존의 함수와 같은 의미를 다른 용어를 선택해서 사용한 것이다.
 				- 그러나 이제 다시 람다식을 통해 메서드가 하나의 독립적인 기능을 하기 때문에 함수라는 용어를 사용하게 되었다.
 				
 			case 1.	
 				// 메소드
				int max(int a, int b){
					return a > b ? a : b
				}
				
				// 람다식
				(int a, int b) -> {
					return a > b ? a : b
				}	
 			
 			case 2.	
 				(int a, int b) -> { a > b ? a : b}	  
 				반환값이 있는 메소드의 경우 return 문 대신 '식'으로 대신할 수 있다.  
 				문장이 아닌 '식'이므로 끝에 세미콜론(;)을 붙이지 않는다.    
 			  
 			case 3.  
 				(a, b) -> { a > b ? a : b }
 				매개변수의 타입은 추론이 가능한 경우 생략할 수 있는데, 대부분의 경우 생략이 가능하다.
 				
 			case 4.
				(a) -> a * a
				(int a) -> a * a
				a -> a * a     //OK.
				int a -> a * a //ERROR.
 				매개변수가 하나일 때는 괄호()를 생략할 수 있다.
 				단, 매개변수가 타입이 있으면 괄호()를 생략할 수 없다.
 				
 			case 5.
				(name, i) -> {
					System.out.println(name + "=" + i);
				}
				
				(name, i) -> System.out.println(name + "=" + i)
				괄호 { } 의 문장이 하나일 때는 괄호 { } 를 생략할 수 있다.
				괄호 { } 의 문장이 return문일 경우 괄호 { }를 생략할 수 없다.	
 				
 	15.2 함수형 인터페이스			
 		- 람다식은 메소드와 동등한 것처럼 보이지만, 사실 람다식은 익명 클래스의 객체와 동등하다.
 		- 타입 f = (int a, int b) -> a > b ? a : b //참조변수의 타입은?		
 		- 참조변수 f의 타입은 어떤 것이어야 할까? 참조형이므로 클래스 또는 인터페이스가 가능하다.
		  그리고 람다식과 동등한 메소드가 정의되어 있는 것이어야 한다. 
		  그래야 참조변수로 익명 객체(람다식)의 메소드를 호출할 수 있기 때문이다.	
		  
		예를 들어 max()라는 메소드가 정의된 MyFunction 인터페이스가 있다고 가정하자.  
			interface MyFunction {
				public abstract int max(int a, int b);
			}  
			
		위의 인터페이스를 구현한 익명 클래스의 객체는 아래와 같이 생성할 수 있다.  
	 		MyFunction f = new MyFunction(){
				public int max(int a, int b){
			    	return a > b ? a : b;
			    }
			};
			
			int big = f.max(5, 3) // 익명 객체의 메소드 호출	
 		MyFunction 인터페이스에 정의된 메소드 max()는 람다식 '(a, b) -> a > b ? a : b'와 메소드 선언부가 일치한다.	
 			
		따라서, 위 코드의 익명 객체를 아래와 같이 람다식으로 변경할 수 있다.	  
			MyFunction f = (a, b) -> a > b ? a : b; //익명 객체를 람다식으로 대체
			int big = f.max(5, 3); //익명 객체 메소드 호출
			
		익명 객체를 람다식으로 대체 가능한 이유?	
			람다식도 실제로는 익명 객체이고, MyFunction 인터페이스를 구현한 익명 객체의 메소드 max()와 
			람다식의 매개변수 타입과 개수, 그리고 반환값이 일치하기 때문이다.
			
		그래서 인터페이스를 통해 람다식을 다루기로 결정됐고, 람다식을 다루기 위한 인터페이스를 함수형 인터페이스라고 부르기로 했다.	
			@FunctionalInterface
			interface MyFunction { //함수형 인터페이스 MyFunction을 의미
				public abstract int max(int a, int b);
			}
		
		함수형 인터페이스에는 오직 하나의 추상 메소드만 존재해야 한다. 그래야만, 람다식과 인터페이스의 메소드가 1:1로 연결될 수 있다.
		static 메소드와 default메소드의 개수에는 제약이 없다.
		
		@FunctionalInterface를 붙이면, 컴파일러가 함수형 인터페이스를 올바르게 정의하였는지 확인하므로, 붙이는 습관을 들이자.
		
		- 함수형 인터페이스(Functional Interface)
			- 추상 메소드를 딱 하나만 가지고 있는 인터페이스
			- SAM(Single Abstract Method) 인터페이스
			- @FunctionalInterface 애노테이션을 가지고 있는 인터페이스
			
		- 람다 표현식
			- 함수형 인터페이스의 인스턴스를 만드는 방법으로 쓰일 수 있다.	
			- 코드를 줄일 수 있다.
			- 메소드 매개변수, 리턴타입, 변수로 만들어 사용할 수 있다.
			
		- 자바에서 함수형 프로그래밍
			- 함수를 First Class Object로 사용할 수 있다.
			- 순수 함수(Plus Function)
				- 사이드 이팩트 만들 수 없다.(함수 밖에 있는 값을 변경하지 못한다.)
				- 상태가 없다. (함수 밖에 정의되어 있는)
			- 고차 함수(High-Order Function)
				- 함수가 함수를 매개변수로 받을 수 있고 함수를 리턴할 수 있다.
				
		- 매개변수와 반환타입
			@FunctionalInterface
			interface MyFunction {
				void myMethod(); //추상 메소드
			}
			
			메소드의 매개변수가 MyFunction 타입이면, 이 메소드를 호출할 때 람다식을 참조하는 참조변수를 
			매개변수로 지정해야한다는 뜻이다.	
				
			void aMethod(MyFunction f){
				f.myMethod();
			}
			
			MyFunction f = () -> System.out.println("myMethod()");
			aMethod(f);
			
			또는, 참조변수 없이 아래와 같이 직접 람다식을 매개변수로 지정할 수도 있다.
			
			aMethod() -> System.out.println("myMethod()");
			
			public enum Operator {
				PLUS("+", (a,b) -> a+b),
			    SUB("-", (a,b) -> a-b),
			    DIV("/", (a,b) -> a/b),
			    MUL("*", (a,b) -> a*b);
			    
			    private final String operator;
			    
			    private final OperatorInterface operations;
			    
			    Operator(String operator, OperatorInterface operations){
			    	this.operator = operator;
			        this.operations = operations;
			    }
			    ...
			    public int apply(int a, int b){
			    	return this.operations.apply(a,b);
			    }
			}
			
			...
			
			@FunctionalInterface
			public interface OperatorInterface{
				int apply(int a, int b);
			}
			
			메소드의 반환타입이 함수형 인터페이스라면, 그 함수형 인터페이스의 추상메소드와 동등한 람다식을 가리키는 참조변수를 반환하거나, 
			람다식을 직접 반환 할 수 있다.
			
			MyFunction myMethod(){
				MyFunction f = () -> {};
			    return f; // 두 줄을 한 줄로 줄이면, return () -> {};
			}
			
			@FunctionalInterface
			interface MyFunction{
				void run(); //public abstract void run();
			}	
			
			public class LambdaEx1 {
				static void execute(MyFunction f){
			    	f.run();
			    }
			    
			    static MyFunction getMyFunction(){
			    	return () -> System.out.println("f3.run()");
			    }
			    
			    public static void main(String[] args){
			    	MyFunction f1 = () -> System.out.println("f1.run()");
			        
			        MyFunction f2 = new MyFunction(){
			        	@Override
			            public void run(){
			            	System.out.println("f2.run()");
			            }
			        };
			        
			        MyFunction f3 = getMyFunction();
			        
			        f1.run();
			        f2.run();
			        f3.run();
			        
			        execute(f1);
			        execute( () -> System.out.printlnt("run()"));
			    }
			}
			
		- 람다식 타입과 형변환
			- 람다식은 익명 객체이고, 익명 객체는 타입이 없다.
			- 따라서, 대입 연산자의 양변의 타입을 일치시키기 위해 형변환이 필요하다.
			- MyFunction f = (MyFunction)(() -> {});
			- 위의 람다식은 MyFunction 인터페이스를 직접 구현하지 않았지만, 
			  인터페이스를 구현한 클래스의 객체와 동일하기 때문에, 위와 같은 형변환을 허용한다. 그리고 이 형변환은 생략가능하다.
			- Object obj = (Object) ( () -> {}) //ERROR 함수형 인터페이스로만 형변환 가능
			  Object타입으로는 형변환 할 수 없다. 오직 함수형 인터페이스로만 형변환 가능하다.
			- 굳이 Object 타입으로 형변환하려면, 먼저 함수형 인터페이스로 변환해야 한다.
			  Object obj = (Object)(MyFunction)( () -> {});
			  String str = ( (Object)(MyFunction)( () -> {})).toString();  
			  
	15.3 Variable Capture		  
		- 람다식에서 외부 지역변수를 참조하는 행위를 Lambda Capturing(람다 캡쳐링)이라고 한다.
		
		- 람다에서 접근가능한 변수는 아래와 같이 세가지 종류가 있다.
			- 지역 변수
			- static 변수
			- 인스턴스 변수
		
		- 지역변수만 변경이 불가능하고 나머지 변수들은 읽기 및 쓰기가 가능하다.
		- 람다는 지역 변수가 존재하는 스택에 직접 접근하지 않고, 지역 변수를 자신(람다가 동작하는 쓰레드)의 스택에 복사한다.
		- 각각의 쓰레드마다 고유한 스택을 갖고 있어서 지역 변수가 존재하는 쓰레드가 사라져도 
		  람다는 복사된 값을 참조하면서 에러가 발생하지 않는다.
		  
		- 그런데 멀티 쓰레드 환경이라면, 여러 개의 쓰레드에서 람다식을 사용하면서 람다 캡쳐링이 계속 발생하는데 이 때 외부 변수 값의 
		  불변성을 보장하지 못하면서 동기(sync)화 문제가 발생한다.
		  이러한 문제로 지역변수는 final, Effectively Final 제약조건을 갖게된다.  
		  	
		- 익명 클래스 구현체와 달리 "쉐도잉" 하지 않는다.
		  익명 클래스는 새로 스콥을 만들지만, 람다는 람다를 감싸고 있는 스콥과 같다.
		  
		- Effectively Final
			- 람다식 내부에서 외부 지역변수를 참조하였을 때 지역 변수는 재할당을 하지 않아야 하는 것을 의미한다.
				
				@FunctionalInterface
				interface MyFunction3 {
				    void myMethod();
				}
				
				class Outer{
					int val = 10;
				    
				    class Inner{
				    	int val = 20;
				        
				        void method(int i) //void method(final int i)
				        	int val = 30; //final int val = 30;
				            i = 10; //ERROR. 상수의 값은 변경할 수 없다.
				            
				            MyFunction3 f = () -> {
				        		System.out.println("             i : " + i);
				                System.out.println("           val : " + val);
				                System.out.println("      this.val : " + ++this.val);
				                System.out.println("Outer.this.val : " + ++Outer.this.val);
				            }
				            
				            f.myMethod();
				            
				    } // End Of Inner
				} // End Of Outer
				
				public class LambdaEx3 {
				    public static void main(String[] args) {
				        Outer outer = new Outer();
				        Outer.Inner inner = outer.new Inner();
				        inner.method(100);
				    }
				}
				
			- 람다식 내에서 참조하는 지역변수는 final이 붙지 않아도 상수로 간주된다.
			- 람다식 내에서 지역변수 i와 val을 참조하고 있으므로 람다식 내에서나 다른 곳에서도 이 변수들의 값을 변경할 수 없다.
			- 반면, Inner 클래스와 Outer 클래스의 인스턴스 변수인 this.val과 Outer.this.val은 상수로 간주되지 않아서 값을 변경해도 된다.
			- 람다식에서 this는 내부적으로 생성되는 익명 객체의 참조가 아니라 람다식을 실행한 객체의 참조다.
			- 따라서, 위의 코드에서 this는 중첩 객체인 Inner이다.
				
				
			  
		  	
			
				  
			  
			  
			  
				
			
			
			
		