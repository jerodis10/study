7.package
	7.1 package 키워드
	7.2 import 키워드
	7.3 클래스패스
	7.4 CLASSPATH 환경변수
	7.5 -classpath 옵션
	
	
	7.1 package 키워드
		- 서로 관련이 있는 클래스 또는 인터페이스들을 묶어 놓은 묶음이다.
		- 관련 클래스를 그룹화하고 포함된 클래스의 네임스페이스를 정의하는 역할
		- 점(.)을 구분자로 하여 계층구조로 되어 있음
		- 모든 클래스는 반드시 하나의 패키지에 속해야 함
		- 패키지를 선언하지 않으면 자바에서 기본적으로 제공하는 이름 없는 패키지(unnamed package)로 속하게 됨
		- 모든 클래스에는 정의된 클래스 이름과 패키지 이름이 있다. 이 둘을 합쳐야 완전하게 한 클래스를 
		  표현한다고 할 수 있으며 FQCN(Fully Qualified Class Name)이라고 한다.
		  Ex) String 클래스의 패키지는 java.lang이며 FQCN은 java.lang.String이 된다.
		- 패키지 이름은 모두 소문자이여야 한다.  
		
		- 패키지의 종류
			- Built-in 패키지
				- Java API에 포함되는 다수의 클래스를 포함하는 패키지이다.
				
				- java.lang : language support 클래스들을 포함하는 패키지
					- 프리미티브 타입이나 수학 연산이 정의되어 있는 클래스들
					- 자동적으로 import 됨
					- String, System
				- java.io : 입출력 기능을 지원하는 클래스들을 포함하는 패키지
				- java.util : 자료 구조 구현을 위한 유틸리티 클래스를 포함하는 패키지
					- Linked List, Dictionary...
				- java.applet : Applets을 생성하기 위한 클래스들을 포함하는 패키지
				- java.awt : GUI 컴포넌트를 구현하기 위한 클래스들을 포함하는 패키지
				- java.net 네트워킹 기능을 지원하기 위한 클래스를 포함하는 패키지
	
	7.2 import 키워드			
		- import란?
			- 다른 패키지에 있는 클래스를 사용해야 할 때 패키지명을 생략하기 위해서 사용
			- 같은 패키지에 있는 클래스들은 import문을 선언하지 않아도 패키지명 생략 가능
			- 컴파일러에게 소스코드에 사용된 클래스의 패키지에 대한 정보를 제공하는 역할을 함
			- 컴파일시 컴파일러는 import문을 통해 알게 된 패키지를 모든 클래스명 앞에 붙여줌
			- package문 다음, 클래스 선언 이전에 위치해야함
			
		- static import문
			- 임의의 패키지의 클래스에서 public static으로 정의된 멤버(필드나 메서드)를 사용할 때, 
			  클래스명을 언급하지 않고도 사용할 수 있다.	
			  
		- 클래스명 conclicts 처리하기
			- 서로 다른 패키지에 동일한 이름의 클래스가 존재할 경우 사용에 주의해야 한다.
			- 만약 2개의 패키지에 있는 Date를 사용하려할 경우, 클래스 풀네임(FQCN)을 사용해서 코드를 작성한다.
			
	7.3 클래스패스			  
		- 클래스 패스는 "클래스의 경로(클래스가 존재하는 경로)"를 뜻한다.
		- JVM은 프로그램의 실행과정에서 실행에 필요한 클래스를 찾을 때, 이 클래스 패스를 기준으로 찾게된다.
		
		- 세미콜론(;)을 구분자로 하여 여러 개의 경로를 지정할 수 잇다.
		- 클래스패스를 지정해주지 않으면 기본적으로 현재 디렉터리가 클래스 패스로 지정된다.
		
		- 그럼 JVM은 어떻게 해당 클래스를 찾을까?
			- 만약 JVM이 Menu 클래스를 찾기 위해 존재하는 모든 클래스를 검사해야 한다면 매우 비효율적일 것이다. 
			  그러므로 우리는 CLASSPATH 변수를 사용하여 해당 클래스가 위치한 곳을 JVM에게 알려준다.
			- 만약 Menu 클래스가 dir이라는 디렉토리에 존재한다면 Menu 클래스의 전체 경로는 
			  dir/org/company/Menu가 된다.
			- 이 때 dir이라는 디렉토리를 classpath변수로 등록해 놓고, 나머지 정보는(org/company/Menu)는 
			  import 명령어를 통해 제공해주므로 외부 패키지의 클래스를 가져와 사용할 수 있게 된다.	
			- jar파일도 동일한 형태로 동작시킬 수 있다. jar파일의 path를 classpath로 등록하면 JVM이 
			  해당 jar파일 안에 있는 클래스들을 찾아서 사용할 수 있게 된다.
			  
		- 지정하는 방법
  			- 클래스 환경 변수
    			- 시스템에서 어디서든 참조 할 수 있게 환경변수로 설정
    			- 최근 지양하는 방법(자세한건 아래 참조)
  			- classpath 옵션
    			- cmd에서 자바 컴파일 또는 실행시 명령어를 통해 임시로 지정할 수 있음	  
	
	7.4 CLASSPATH 환경변수
		- 환경변수는 운영체제에 지정하는 변수로 JVM과 같은 애플리케이션들을은 환경변수 값을 참고해서 동작하게 된다. 
		  자바는 클래스 패스로 환경변수 CLASSPATH를 사용하는데 이 값을 지정하면 실행할 때마다 -classpath 옵션을
		  사용하지 않아도 되며 애플리케이션이 실행될 때 JVM이 지정한 디렉토리에 있는 클래스들을 먼저 JVM에 로드한다. 
		  그러므로 CLASSPATH 환경변수에는 필수 클래스들이 위치하는 디렉토리를 등록하도록 한다.
		  (모든 프로젝트에 전역적으로 등록되기 때문에 반드시 필수클래스들을 지정해야 한다)
		  
		- 하지만 최근에는 이방법은 지양되고 있으며 IDE나 빌드도구를 통해 프로젝트별 클래스패스를 설정한다.
		
		- maven이나 gradle을 사용하여 라이브러리를 추가하면 external Libraries에 들어가게 되고 
		  이안에 있는 라이브러리들이 classpath에 들어감  
		  
		- 인텔리제이 기준, 프로젝트에서 다운받은 JDK 중 하나를 지정하여 Project SDK를 지정하면
		  JDK안에 가져올 수 있다.
		  
		  
	