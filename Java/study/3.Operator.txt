3.Operator
	3.1 산술 연산자
	3.2 비트 연산자
	3.3 관계 연산자
	3.4 논리 연산자
	3.5 instanceof
	3.6 assignment(=) operator
	3.7 화살표(->) 연산자
	3.8 3항 연산자
	3.9 (optional) java12.switch 연산자
	
	
	3.5 instanceof
		- instanceof란 좌항과 우항의 참조변수 타입이 같은지 확인하는 연산자이다.
		- 좌측에는 참조변수가, 우측에는 타입(클래스명)이 피연산자로 위치한다.
		- 부모-자식관계에 따라 참조변수가 검사한 타입으로 형변환이 가능하면 true를, 불가능하면 false를 반환한다. 
		  주로, 상속관계에서 부모객체인지 자식객체인지 확인하는데 사용한다.
		- 조상타입의 참조변수로 자손타입의 인스턴스를 참조할 수 있기 때문에, 참조변수의 타입과 인스턴스의 타입이 
		  항상 일치하지는 않는다. 조상타입의 참조변수로는 실제 인스턴스의 멤버들을 모두 사용할 수 없기 때문에, 
		  실제 인스턴스와 같은 타입의 참조변수로 형변환을 해야만 인스턴스의 모든 멤버들을 사용할 수 있다.
		  
	3.7 화살표(->) 연산자
		- 모든 메서드는 클래스에 포함되어야 하므로 클래스를 생성하고, 객체도 생성해야만 메서드를 호출할 수 있다. 
		  그러나 람다식은 이 모든 과정없이 람다식 자체만으로도 메서드의 역할을 대신할 수 있다.
		  
		- 람다식은 메서드의 매개변수로 전달되어지는 것이 가능하고, 메서드의 결과로 반환될 수도 있따. 
		  람다식으로 인해 메서드를 변수처럼 다루는 것이 가능해진 것이다.
		  
		- 반환값이 있는 메서드의 경우, return문 대신 '식(expression)'으로 대신 할 수 있다. 식의 연산결과가 
		  자동적으로 반환값이 되는데 이 때 '문장(statement)'이 아닌 '식'이므로 끝에 ;를 붙이지 않는다.
		  
		- 람다식에 선언된 매개변수의 타입은 추론이 가능한 경우 생략할 수 있는데, 두 매개변수 중 어느 하나의 타입만 
		  생략하는 것은 허용되지 않는다. 대부분의 경우 생략이 가능하고 람다식에 반환타입이 없는 이유는 항상 추론이
		  가능하기 때문이다. 
		  
		- 선언된 매개변수가 하나뿐인 경우에는 괄호()를 생략할 수 있다. 하지만 매개변수의 타입이 있으면 생략할 수 없다.
		
		- 괄호{}안의 문장이 하나인 경우 괄호{}를 생략할 수 있다. 이 때 문장의 끝에 ;를 붙이지 않아야 한다. 
		  그러나 괄호{}안의 문장이 return문일 경우 생략할 수 없다.
		  
	3.9 (optional) java12.switch 연산자
		- 확장된 switch문
			1.복수의 case	  
		        switch(weekday){
		            case MONDAY, FRIDAY:
		                time = "";
		                break;
		            case TUESDAY, THURSDAY:
		                time = "";
		                break;
		            default:
		                time = "휴일"
		        }
		        
			2.지시자(->) 문법
			   	switch(weekday){
		            case MONDAY, FRIDAY -> time = "";
		            case TUESDAY, THURSDAY -> time = "";
		            default -> time = "휴일";
		        }
	        
	        3.블럭 사용
	        	switch(weekday){
		            case MONDAY, FRIDAY -> {
		                var endTime = getEndTime();
		                time = "";
		            }
		            case TUESDAY, THURSDAY -> time = "";
		            default -> time = "휴일";
		        }
		        
		    4.switch 식
		    	- 지시자 문법에 블록을 사용하지 않는 경우나 지시자 문법에 블록을 사용한 경우 break로 값을 반환한다.
	            
	            String time = switch(weekday){
		            case MONDAY, FRIDAY -> {
		                var endTime = getEndTime();
		                break "";
		            }
		            case TUESDAY, THURSDAY -> "";
		            default -> "휴일";
		        }
	       		
	       	5.yield 키워드
	       		int result = switch(mode) {
		        	case "a", "b":
		            	yield 1;
		            case "c":
		            	yield 2;
		            case "d", "e", "f":
		                yield3;
		            default
		                yield -1;
		        };